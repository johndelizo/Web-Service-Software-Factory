//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;
namespace Microsoft.Practices.ServiceFactory.ServiceContracts
{
	/// <summary>
	/// DomainModel ServiceContractDslDomainModel
	/// Description for
	/// Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDsl
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.CoreDomainModel))]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel))]
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
	[DslModeling::DomainObjectId("108ced64-5475-4baa-bebc-6f5be3107d9e")]
	public partial class ServiceContractDslDomainModel : DslModeling::DomainModel
	{
		#region Constructor, domain model Id
	
		/// <summary>
		/// ServiceContractDslDomainModel domain model Id.
		/// </summary>
		public static readonly global::System.Guid DomainModelId = new global::System.Guid(0x108ced64, 0x5475, 0x4baa, 0xbe, 0xbc, 0x6f, 0x5b, 0xe3, 0x10, 0x7d, 0x9e);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="store">Store containing the domain model.</param>
		public ServiceContractDslDomainModel(DslModeling::Store store)
			: base(store, DomainModelId)
		{
			// Call the partial method to allow any required serialization setup to be done.
			this.InitializeSerialization(store);		
		}
		
	
		///<Summary>
		/// Defines a partial method that will be called from the constructor to
		/// allow any necessary serialization setup to be done.
		///</Summary>
		///<remarks>
		/// For a DSL created with the DSL Designer wizard, an implementation of this 
		/// method will be generated in the GeneratedCode\SerializationHelper.cs class.
		///</remarks>
		partial void InitializeSerialization(DslModeling::Store store);
	
	
		#endregion
		#region Domain model reflection
			
		/// <summary>
		/// Gets the list of generated domain model types (classes, rules, relationships).
		/// </summary>
		/// <returns>List of types.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override global::System.Type[] GetGeneratedDomainModelTypes()
		{
			return new global::System.Type[]
			{
				typeof(ServiceContractModel),
				typeof(ServiceContract),
				typeof(Operation),
				typeof(Service),
				typeof(Message),
				typeof(MessagePart),
				typeof(Fault),
				typeof(DataContractMessagePart),
				typeof(PrimitiveMessagePart),
				typeof(MessageBase),
				typeof(XsdMessage),
				typeof(DataContractFault),
				typeof(XsdElementFault),
				typeof(ServiceContractModelHasServiceContracts),
				typeof(ServiceContractModelHasOperations),
				typeof(ServiceContractReferencesOperations),
				typeof(ServiceContractModelHasServices),
				typeof(ServiceReferencesServiceContract),
				typeof(OperationHasFaults),
				typeof(ServiceContractModelHasMessages),
				typeof(RequestReferencedByOperation),
				typeof(OperationReferencesResponse),
				typeof(MessageHasMessageParts),
				typeof(ServiceContractDiagram),
				typeof(OperationConnector),
				typeof(ServiceConnector),
				typeof(MessageOperationConnector),
				typeof(ServiceContractShape),
				typeof(MessageShape),
				typeof(OperationShape),
				typeof(ServiceShape),
				typeof(XsdMessageShape),
				typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.FixUpDiagram),
				typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ConnectorRolePlayerChanged),
				typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.CompartmentItemAddRule),
				typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.CompartmentItemDeleteRule),
				typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.CompartmentItemRolePlayerChangeRule),
				typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.CompartmentItemRolePlayerPositionChangeRule),
				typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.CompartmentItemChangeRule),
			};
		}
		/// <summary>
		/// Gets the list of generated domain properties.
		/// </summary>
		/// <returns>List of property data.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override DomainMemberInfo[] GetGeneratedDomainProperties()
		{
			return new DomainMemberInfo[]
			{
				new DomainMemberInfo(typeof(ServiceContractModel), "ImplementationTechnology", ServiceContractModel.ImplementationTechnologyDomainPropertyId, typeof(ServiceContractModel.ImplementationTechnologyPropertyHandler)),
				new DomainMemberInfo(typeof(ServiceContractModel), "ProjectMappingTable", ServiceContractModel.ProjectMappingTableDomainPropertyId, typeof(ServiceContractModel.ProjectMappingTablePropertyHandler)),
				new DomainMemberInfo(typeof(ServiceContractModel), "Namespace", ServiceContractModel.NamespaceDomainPropertyId, typeof(ServiceContractModel.NamespacePropertyHandler)),
				new DomainMemberInfo(typeof(ServiceContractModel), "SerializerType", ServiceContractModel.SerializerTypeDomainPropertyId, typeof(ServiceContractModel.SerializerTypePropertyHandler)),
				new DomainMemberInfo(typeof(ServiceContract), "Name", ServiceContract.NameDomainPropertyId, typeof(ServiceContract.NamePropertyHandler)),
				new DomainMemberInfo(typeof(ServiceContract), "Namespace", ServiceContract.NamespaceDomainPropertyId, typeof(ServiceContract.NamespacePropertyHandler)),
				new DomainMemberInfo(typeof(ServiceContract), "ObjectExtenderContainer", ServiceContract.ObjectExtenderContainerDomainPropertyId, typeof(ServiceContract.ObjectExtenderContainerPropertyHandler)),
				new DomainMemberInfo(typeof(ServiceContract), "Remarks", ServiceContract.RemarksDomainPropertyId, typeof(ServiceContract.RemarksPropertyHandler)),
				new DomainMemberInfo(typeof(Operation), "Name", Operation.NameDomainPropertyId, typeof(Operation.NamePropertyHandler)),
				new DomainMemberInfo(typeof(Operation), "Action", Operation.ActionDomainPropertyId, typeof(Operation.ActionPropertyHandler)),
				new DomainMemberInfo(typeof(Operation), "IsOneWay", Operation.IsOneWayDomainPropertyId, typeof(Operation.IsOneWayPropertyHandler)),
				new DomainMemberInfo(typeof(Operation), "ObjectExtenderContainer", Operation.ObjectExtenderContainerDomainPropertyId, typeof(Operation.ObjectExtenderContainerPropertyHandler)),
				new DomainMemberInfo(typeof(Operation), "Remarks", Operation.RemarksDomainPropertyId, typeof(Operation.RemarksPropertyHandler)),
				new DomainMemberInfo(typeof(Service), "Name", Service.NameDomainPropertyId, typeof(Service.NamePropertyHandler)),
				new DomainMemberInfo(typeof(Service), "ObjectExtenderContainer", Service.ObjectExtenderContainerDomainPropertyId, typeof(Service.ObjectExtenderContainerPropertyHandler)),
				new DomainMemberInfo(typeof(Service), "Namespace", Service.NamespaceDomainPropertyId, typeof(Service.NamespacePropertyHandler)),
				new DomainMemberInfo(typeof(Service), "Remarks", Service.RemarksDomainPropertyId, typeof(Service.RemarksPropertyHandler)),
				new DomainMemberInfo(typeof(MessagePart), "Name", MessagePart.NameDomainPropertyId, typeof(MessagePart.NamePropertyHandler)),
				new DomainMemberInfo(typeof(MessagePart), "ObjectExtenderContainer", MessagePart.ObjectExtenderContainerDomainPropertyId, typeof(MessagePart.ObjectExtenderContainerPropertyHandler)),
				new DomainMemberInfo(typeof(MessagePart), "Remarks", MessagePart.RemarksDomainPropertyId, typeof(MessagePart.RemarksPropertyHandler)),
				new DomainMemberInfo(typeof(Fault), "Name", Fault.NameDomainPropertyId, typeof(Fault.NamePropertyHandler)),
				new DomainMemberInfo(typeof(Fault), "ObjectExtenderContainer", Fault.ObjectExtenderContainerDomainPropertyId, typeof(Fault.ObjectExtenderContainerPropertyHandler)),
				new DomainMemberInfo(typeof(Fault), "Remarks", Fault.RemarksDomainPropertyId, typeof(Fault.RemarksPropertyHandler)),
				new DomainMemberInfo(typeof(DataContractMessagePart), "Type", DataContractMessagePart.TypeDomainPropertyId, typeof(DataContractMessagePart.TypePropertyHandler)),
				new DomainMemberInfo(typeof(PrimitiveMessagePart), "Type", PrimitiveMessagePart.TypeDomainPropertyId, typeof(PrimitiveMessagePart.TypePropertyHandler)),
				new DomainMemberInfo(typeof(PrimitiveMessagePart), "IsNullable", PrimitiveMessagePart.IsNullableDomainPropertyId, typeof(PrimitiveMessagePart.IsNullablePropertyHandler)),
				new DomainMemberInfo(typeof(PrimitiveMessagePart), "IsCollection", PrimitiveMessagePart.IsCollectionDomainPropertyId, typeof(PrimitiveMessagePart.IsCollectionPropertyHandler)),
				new DomainMemberInfo(typeof(MessageBase), "Name", MessageBase.NameDomainPropertyId, typeof(MessageBase.NamePropertyHandler)),
				new DomainMemberInfo(typeof(MessageBase), "Namespace", MessageBase.NamespaceDomainPropertyId, typeof(MessageBase.NamespacePropertyHandler)),
				new DomainMemberInfo(typeof(MessageBase), "ObjectExtenderContainer", MessageBase.ObjectExtenderContainerDomainPropertyId, typeof(MessageBase.ObjectExtenderContainerPropertyHandler)),
				new DomainMemberInfo(typeof(MessageBase), "Remarks", MessageBase.RemarksDomainPropertyId, typeof(MessageBase.RemarksPropertyHandler)),
				new DomainMemberInfo(typeof(XsdMessage), "Element", XsdMessage.ElementDomainPropertyId, typeof(XsdMessage.ElementPropertyHandler)),
				new DomainMemberInfo(typeof(XsdMessage), "IsWrapped", XsdMessage.IsWrappedDomainPropertyId, typeof(XsdMessage.IsWrappedPropertyHandler)),
				new DomainMemberInfo(typeof(DataContractFault), "Type", DataContractFault.TypeDomainPropertyId, typeof(DataContractFault.TypePropertyHandler)),
				new DomainMemberInfo(typeof(XsdElementFault), "Element", XsdElementFault.ElementDomainPropertyId, typeof(XsdElementFault.ElementPropertyHandler)),
			};
		}
		/// <summary>
		/// Gets the list of generated domain roles.
		/// </summary>
		/// <returns>List of role data.</returns>
		protected sealed override DomainRolePlayerInfo[] GetGeneratedDomainRoles()
		{
			return new DomainRolePlayerInfo[]
			{
				new DomainRolePlayerInfo(typeof(ServiceContractModelHasServiceContracts), "ServiceContractModel", ServiceContractModelHasServiceContracts.ServiceContractModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ServiceContractModelHasServiceContracts), "ServiceContract", ServiceContractModelHasServiceContracts.ServiceContractDomainRoleId),
				new DomainRolePlayerInfo(typeof(ServiceContractModelHasOperations), "ServiceContractModel", ServiceContractModelHasOperations.ServiceContractModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ServiceContractModelHasOperations), "Operation", ServiceContractModelHasOperations.OperationDomainRoleId),
				new DomainRolePlayerInfo(typeof(ServiceContractReferencesOperations), "ServiceContract", ServiceContractReferencesOperations.ServiceContractDomainRoleId),
				new DomainRolePlayerInfo(typeof(ServiceContractReferencesOperations), "Operation", ServiceContractReferencesOperations.OperationDomainRoleId),
				new DomainRolePlayerInfo(typeof(ServiceContractModelHasServices), "ServiceContractModel", ServiceContractModelHasServices.ServiceContractModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ServiceContractModelHasServices), "Service", ServiceContractModelHasServices.ServiceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ServiceReferencesServiceContract), "Service", ServiceReferencesServiceContract.ServiceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ServiceReferencesServiceContract), "ServiceContract", ServiceReferencesServiceContract.ServiceContractDomainRoleId),
				new DomainRolePlayerInfo(typeof(OperationHasFaults), "Operation", OperationHasFaults.OperationDomainRoleId),
				new DomainRolePlayerInfo(typeof(OperationHasFaults), "Fault", OperationHasFaults.FaultDomainRoleId),
				new DomainRolePlayerInfo(typeof(ServiceContractModelHasMessages), "ServiceContractModel", ServiceContractModelHasMessages.ServiceContractModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ServiceContractModelHasMessages), "MessageBase", ServiceContractModelHasMessages.MessageBaseDomainRoleId),
				new DomainRolePlayerInfo(typeof(RequestReferencedByOperation), "MessageBase", RequestReferencedByOperation.MessageBaseDomainRoleId),
				new DomainRolePlayerInfo(typeof(RequestReferencedByOperation), "Operation", RequestReferencedByOperation.OperationDomainRoleId),
				new DomainRolePlayerInfo(typeof(OperationReferencesResponse), "Operation", OperationReferencesResponse.OperationDomainRoleId),
				new DomainRolePlayerInfo(typeof(OperationReferencesResponse), "MessageBase", OperationReferencesResponse.MessageBaseDomainRoleId),
				new DomainRolePlayerInfo(typeof(MessageHasMessageParts), "MessageBase", MessageHasMessageParts.MessageBaseDomainRoleId),
				new DomainRolePlayerInfo(typeof(MessageHasMessageParts), "MessagePart", MessageHasMessageParts.MessagePartDomainRoleId),
			};
		}
		#endregion
		#region Factory methods
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementMap;
	
		/// <summary>
		/// Creates an element of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementType">Element type which belongs to this domain model.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		public sealed override DslModeling::ModelElement CreateElement(DslModeling::Partition partition, global::System.Type elementType, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementType == null) throw new global::System.ArgumentNullException("elementType");
	
			if (createElementMap == null)
			{
				createElementMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(22);
				createElementMap.Add(typeof(ServiceContractModel), 0);
				createElementMap.Add(typeof(ServiceContract), 1);
				createElementMap.Add(typeof(Operation), 2);
				createElementMap.Add(typeof(Service), 3);
				createElementMap.Add(typeof(Message), 4);
				createElementMap.Add(typeof(DataContractMessagePart), 5);
				createElementMap.Add(typeof(PrimitiveMessagePart), 6);
				createElementMap.Add(typeof(XsdMessage), 7);
				createElementMap.Add(typeof(DataContractFault), 8);
				createElementMap.Add(typeof(XsdElementFault), 9);
				createElementMap.Add(typeof(ServiceContractDiagram), 10);
				createElementMap.Add(typeof(OperationConnector), 11);
				createElementMap.Add(typeof(ServiceConnector), 12);
				createElementMap.Add(typeof(MessageOperationConnector), 13);
				createElementMap.Add(typeof(ServiceContractShape), 14);
				createElementMap.Add(typeof(MessageShape), 15);
				createElementMap.Add(typeof(OperationShape), 16);
				createElementMap.Add(typeof(ServiceShape), 17);
				createElementMap.Add(typeof(XsdMessageShape), 18);
			}
			int index;
			if (!createElementMap.TryGetValue(elementType, out index))
			{
				// construct exception error message		
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel.SingletonResourceManager.GetString("UnrecognizedElementType"),
								elementType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementType");
			}
			switch (index)
			{
				case 0: return new ServiceContractModel(partition, propertyAssignments);
				case 1: return new ServiceContract(partition, propertyAssignments);
				case 2: return new Operation(partition, propertyAssignments);
				case 3: return new Service(partition, propertyAssignments);
				case 4: return new Message(partition, propertyAssignments);
				case 5: return new DataContractMessagePart(partition, propertyAssignments);
				case 6: return new PrimitiveMessagePart(partition, propertyAssignments);
				case 7: return new XsdMessage(partition, propertyAssignments);
				case 8: return new DataContractFault(partition, propertyAssignments);
				case 9: return new XsdElementFault(partition, propertyAssignments);
				case 10: return new ServiceContractDiagram(partition, propertyAssignments);
				case 11: return new OperationConnector(partition, propertyAssignments);
				case 12: return new ServiceConnector(partition, propertyAssignments);
				case 13: return new MessageOperationConnector(partition, propertyAssignments);
				case 14: return new ServiceContractShape(partition, propertyAssignments);
				case 15: return new MessageShape(partition, propertyAssignments);
				case 16: return new OperationShape(partition, propertyAssignments);
				case 17: return new ServiceShape(partition, propertyAssignments);
				case 18: return new XsdMessageShape(partition, propertyAssignments);
				default: return null;
			}
		}
	
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementLinkMap;
	
		/// <summary>
		/// Creates an element link of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementLinkType">Element link type which belongs to this domain model.</param>
		/// <param name="roleAssignments">List of relationship role assignments for the new link.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element link.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		public sealed override DslModeling::ElementLink CreateElementLink(DslModeling::Partition partition, global::System.Type elementLinkType, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementLinkType == null) throw new global::System.ArgumentNullException("elementLinkType");
			if (roleAssignments == null) throw new global::System.ArgumentNullException("roleAssignments");
	
			if (createElementLinkMap == null)
			{
				createElementLinkMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(10);
				createElementLinkMap.Add(typeof(ServiceContractModelHasServiceContracts), 0);
				createElementLinkMap.Add(typeof(ServiceContractModelHasOperations), 1);
				createElementLinkMap.Add(typeof(ServiceContractReferencesOperations), 2);
				createElementLinkMap.Add(typeof(ServiceContractModelHasServices), 3);
				createElementLinkMap.Add(typeof(ServiceReferencesServiceContract), 4);
				createElementLinkMap.Add(typeof(OperationHasFaults), 5);
				createElementLinkMap.Add(typeof(ServiceContractModelHasMessages), 6);
				createElementLinkMap.Add(typeof(RequestReferencedByOperation), 7);
				createElementLinkMap.Add(typeof(OperationReferencesResponse), 8);
				createElementLinkMap.Add(typeof(MessageHasMessageParts), 9);
			}
			int index;
			if (!createElementLinkMap.TryGetValue(elementLinkType, out index))
			{
				// construct exception error message
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel.SingletonResourceManager.GetString("UnrecognizedElementLinkType"),
								elementLinkType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementLinkType");
			
			}
			switch (index)
			{
				case 0: return new ServiceContractModelHasServiceContracts(partition, roleAssignments, propertyAssignments);
				case 1: return new ServiceContractModelHasOperations(partition, roleAssignments, propertyAssignments);
				case 2: return new ServiceContractReferencesOperations(partition, roleAssignments, propertyAssignments);
				case 3: return new ServiceContractModelHasServices(partition, roleAssignments, propertyAssignments);
				case 4: return new ServiceReferencesServiceContract(partition, roleAssignments, propertyAssignments);
				case 5: return new OperationHasFaults(partition, roleAssignments, propertyAssignments);
				case 6: return new ServiceContractModelHasMessages(partition, roleAssignments, propertyAssignments);
				case 7: return new RequestReferencedByOperation(partition, roleAssignments, propertyAssignments);
				case 8: return new OperationReferencesResponse(partition, roleAssignments, propertyAssignments);
				case 9: return new MessageHasMessageParts(partition, roleAssignments, propertyAssignments);
				default: return null;
			}
		}
		#endregion
		#region Resource manager
		
		private static global::System.Resources.ResourceManager resourceManager;
		
		/// <summary>
		/// The base name of this model's resources.
		/// </summary>
		public const string ResourceBaseName = "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx";
		
		/// <summary>
		/// Gets the DomainModel's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override global::System.Resources.ResourceManager ResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ServiceContractDslDomainModel.SingletonResourceManager;
			}
		}
	
		/// <summary>
		/// Gets the Singleton ResourceManager for this domain model.
		/// </summary>
		public static global::System.Resources.ResourceManager SingletonResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				if (ServiceContractDslDomainModel.resourceManager == null)
				{
					ServiceContractDslDomainModel.resourceManager = new global::System.Resources.ResourceManager(ResourceBaseName, typeof(ServiceContractDslDomainModel).Assembly);
				}
				return ServiceContractDslDomainModel.resourceManager;
			}
		}
		#endregion
		#region Copy/Remove closures
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter copyClosure;
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter removeClosure;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override DslModeling::IElementVisitorFilter GetClosureFilter(DslModeling::ClosureType type, global::System.Collections.Generic.ICollection<DslModeling::ModelElement> rootElements)
		{
			switch (type)
			{
				case DslModeling::ClosureType.CopyClosure:
					return ServiceContractDslDomainModel.CopyClosure;
				case DslModeling::ClosureType.DeleteClosure:
					return ServiceContractDslDomainModel.DeleteClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter CopyClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (ServiceContractDslDomainModel.copyClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter copyFilter = new DslModeling::ChainingElementVisitorFilter();
					copyFilter.AddFilter(new ServiceContractDslCopyClosure());
					copyFilter.AddFilter(new DslModeling::CoreCopyClosure());
					copyFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceCopyClosure());
					
					ServiceContractDslDomainModel.copyClosure = copyFilter;
				}
				return ServiceContractDslDomainModel.copyClosure;
			}
		}
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter DeleteClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (ServiceContractDslDomainModel.removeClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter removeFilter = new DslModeling::ChainingElementVisitorFilter();
					removeFilter.AddFilter(new ServiceContractDslDeleteClosure());
					removeFilter.AddFilter(new DslModeling::CoreDeleteClosure());
					removeFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceDeleteClosure());
		
					ServiceContractDslDomainModel.removeClosure = removeFilter;
				}
				return ServiceContractDslDomainModel.removeClosure;
			}
		}
		#endregion
		#region Diagram rule helpers
		/// <summary>
		/// Enables rules in this domain model related to diagram fixup for the given store.
		/// If diagram data will be loaded into the store, this method should be called first to ensure
		/// that the diagram behaves properly.
		/// </summary>
		public static void EnableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.EnableRule(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.FixUpDiagram));
			ruleManager.EnableRule(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ConnectorRolePlayerChanged));
			ruleManager.EnableRule(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.CompartmentItemAddRule));
			ruleManager.EnableRule(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.CompartmentItemDeleteRule));
			ruleManager.EnableRule(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.CompartmentItemRolePlayerChangeRule));
			ruleManager.EnableRule(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.CompartmentItemRolePlayerPositionChangeRule));
			ruleManager.EnableRule(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.CompartmentItemChangeRule));
		}
		
		/// <summary>
		/// Disables rules in this domain model related to diagram fixup for the given store.
		/// </summary>
		public static void DisableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.DisableRule(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.FixUpDiagram));
			ruleManager.DisableRule(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ConnectorRolePlayerChanged));
			ruleManager.DisableRule(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.CompartmentItemAddRule));
			ruleManager.DisableRule(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.CompartmentItemDeleteRule));
			ruleManager.DisableRule(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.CompartmentItemRolePlayerChangeRule));
			ruleManager.DisableRule(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.CompartmentItemRolePlayerPositionChangeRule));
			ruleManager.DisableRule(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.CompartmentItemChangeRule));
		}
		#endregion
	}
		
	#region Copy/Remove closure classes
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class ServiceContractDslDeleteClosure : ServiceContractDslDeleteClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ServiceContractDslDeleteClosure() : base()
		{
		}
	}
	
	/// <summary>
	/// Base class for remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class ServiceContractDslDeleteClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public ServiceContractDslDeleteClosureBase()
		{
			#region Initialize DomainData Table
			DomainRoles.Add(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts.ServiceContractDomainRoleId, true);
			DomainRoles.Add(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations.OperationDomainRoleId, true);
			DomainRoles.Add(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices.ServiceDomainRoleId, true);
			DomainRoles.Add(global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults.FaultDomainRoleId, true);
			DomainRoles.Add(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages.MessageBaseDomainRoleId, true);
			DomainRoles.Add(global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts.MessagePartDomainRoleId, true);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			return DslModeling::VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			if (targetDomainRole == null) throw new global::System.ArgumentNullException("targetDomainRole");
			return this.DomainRoles.Contains(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Specialized.HybridDictionary();
				}
				return this.domainRoles;
			}
		}
	
	}
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class ServiceContractDslCopyClosure : ServiceContractDslCopyClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ServiceContractDslCopyClosure() : base()
		{
		}
	}
	/// <summary>
	/// Base class for copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class ServiceContractDslCopyClosureBase : DslModeling::CopyClosureFilter, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ServiceContractDslCopyClosureBase():base()
		{
		}
	}
	#endregion
		
}
namespace Microsoft.Practices.ServiceFactory.ServiceContracts
{
	/// <summary>
	/// DomainEnumeration: BindingStyle
	/// Description for Microsoft.Practices.ServiceFactory.ServiceContracts.BindingStyle
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum BindingStyle
	{
		/// <summary>
		/// RPC
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.BindingStyle.RPC
		/// </summary>
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.BindingStyle/RPC.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		RPC,
		/// <summary>
		/// Document
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.BindingStyle.Document
		/// </summary>
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.BindingStyle/Document.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		Document,
	}
}
namespace Microsoft.Practices.ServiceFactory.ServiceContracts
{
	/// <summary>
	/// DomainEnumeration: ServiceEncoding
	/// Description for
	/// Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceEncoding
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum ServiceEncoding
	{
		/// <summary>
		/// Literal
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceEncoding.Literal
		/// </summary>
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceEncoding/Literal.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		Literal,
		/// <summary>
		/// Encoding
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceEncoding.Encoding
		/// </summary>
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceEncoding/Encoding.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		Encoding,
	}
}
namespace Microsoft.Practices.ServiceFactory.ServiceContracts
{
	/// <summary>
	/// DomainEnumeration: MessageType
	/// Description for Microsoft.Practices.ServiceFactory.ServiceContracts.MessageType
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum MessageType
	{
		/// <summary>
		/// RequestMessage
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.MessageType.RequestMessage
		/// </summary>
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessageType/RequestMessage.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		RequestMessage = 1,
		/// <summary>
		/// ResponseMessage
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.MessageType.ResponseMessage
		/// </summary>
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessageType/ResponseMessage.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		ResponseMessage = 2,
	}
}
namespace Microsoft.Practices.ServiceFactory.ServiceContracts
{
	/// <summary>
	/// DomainEnumeration: SerializerType
	/// Description for
	/// Microsoft.Practices.ServiceFactory.ServiceContracts.SerializerType
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum SerializerType
	{
		/// <summary>
		/// XmlSerializer
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.SerializerType.XmlSerializer
		/// </summary>
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.SerializerType/XmlSerializer.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		XmlSerializer,
		/// <summary>
		/// DataContractSerializer
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.SerializerType.DataContractSerializer
		/// </summary>
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.SerializerType/DataContractSerializer.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		DataContractSerializer,
	}
}

