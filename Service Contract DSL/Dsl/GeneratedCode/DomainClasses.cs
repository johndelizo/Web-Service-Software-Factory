//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Microsoft.Practices.ServiceFactory.ServiceContracts
{
	/// <summary>
	/// DomainClass ServiceContractModel
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("86959dd4-26ec-48e6-8907-b47c4c419546")]
	public partial class ServiceContractModel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ServiceContractModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x86959dd4, 0x26ec, 0x48e6, 0x89, 0x07, 0xb4, 0x7c, 0x4c, 0x41, 0x95, 0x46);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ServiceContractModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ServiceContractModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ImplementationTechnology domain property code
		
		/// <summary>
		/// ImplementationTechnology domain property Id.
		/// </summary>
		public static readonly global::System.Guid ImplementationTechnologyDomainPropertyId = new global::System.Guid(0x3a8e83a2, 0xda82, 0x4090, 0xb0, 0x6d, 0xcf, 0xbf, 0xd7, 0x2b, 0x49, 0x0d);
		
		/// <summary>
		/// Storage for ImplementationTechnology
		/// </summary>
		private global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.IExtensionProvider implementationTechnologyPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ImplementationTechnology domain property.
		/// This associates a platform technology with each of the shapes on the design
		/// surface. As a result, each shape may acquire additional properties specific for
		/// the chosen technology.
		/// </summary>
		[System.ComponentModel.Editor(typeof(Microsoft.Practices.Modeling.ExtensionProvider.Design.UITypeEditors.ExtensionProviderEditor),typeof(System.Drawing.Design.UITypeEditor))]
		[System.ComponentModel.TypeConverter(typeof(Microsoft.Practices.Modeling.ExtensionProvider.Design.Converters.ExtensionProviderConverter))]
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel/ImplementationTechnology.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel/ImplementationTechnology.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel/ImplementationTechnology.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3a8e83a2-da82-4090-b06d-cfbfd72b490d")]
		public global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.IExtensionProvider ImplementationTechnology
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return implementationTechnologyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ImplementationTechnologyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ServiceContractModel.ImplementationTechnology domain property.
		/// </summary>
		internal sealed partial class ImplementationTechnologyPropertyHandler : DslModeling::DomainPropertyValueHandler<ServiceContractModel, global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.IExtensionProvider>
		{
			private ImplementationTechnologyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ServiceContractModel.ImplementationTechnology domain property value handler.
			/// </summary>
			public static readonly ImplementationTechnologyPropertyHandler Instance = new ImplementationTechnologyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ServiceContractModel.ImplementationTechnology domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ImplementationTechnologyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.IExtensionProvider GetValue(ServiceContractModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.implementationTechnologyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ServiceContractModel element, global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.IExtensionProvider newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.IExtensionProvider oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.implementationTechnologyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ProjectMappingTable domain property code
		
		/// <summary>
		/// ProjectMappingTable domain property Id.
		/// </summary>
		public static readonly global::System.Guid ProjectMappingTableDomainPropertyId = new global::System.Guid(0x926a3128, 0xed5b, 0x4ea6, 0x9c, 0x2e, 0x03, 0x08, 0x46, 0x46, 0xfb, 0x4e);
		
		/// <summary>
		/// Storage for ProjectMappingTable
		/// </summary>
		private global::System.String projectMappingTablePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ProjectMappingTable domain property.
		/// Allows you to select the project mapping you would like to generate artifacts
		/// to. The drop-down lists the named entries in the ProjectMapping.xml file.
		/// Creating an implementation project structure will add a new entry to the project
		/// mapping table. The Project Mapping Table entry associates shapes on the design
		/// surface with the projects that will contain the code for those shapes.
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(Microsoft.Practices.ServiceFactory.RecipeFramework.Extensions.ProjectMapping.Design.ProjectMappingTableConverter))]
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel/ProjectMappingTable.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel/ProjectMappingTable.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel/ProjectMappingTable.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("926a3128-ed5b-4ea6-9c2e-03084646fb4e")]
		public global::System.String ProjectMappingTable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return projectMappingTablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ProjectMappingTablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ServiceContractModel.ProjectMappingTable domain property.
		/// </summary>
		internal sealed partial class ProjectMappingTablePropertyHandler : DslModeling::DomainPropertyValueHandler<ServiceContractModel, global::System.String>
		{
			private ProjectMappingTablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ServiceContractModel.ProjectMappingTable domain property value handler.
			/// </summary>
			public static readonly ProjectMappingTablePropertyHandler Instance = new ProjectMappingTablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ServiceContractModel.ProjectMappingTable domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ProjectMappingTableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ServiceContractModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.projectMappingTablePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ServiceContractModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.projectMappingTablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Namespace domain property code
		
		/// <summary>
		/// Namespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid NamespaceDomainPropertyId = new global::System.Guid(0x23783d61, 0x83d3, 0x4cf9, 0x95, 0xc0, 0xf6, 0x08, 0x83, 0x97, 0xc6, 0x4c);
		
		/// <summary>
		/// Storage for Namespace
		/// </summary>
		private global::System.String namespacePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Namespace domain property.
		/// This value represents the default XML namespace that will be applied to each
		/// shape added to the design surface.
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(Microsoft.Practices.Modeling.Dsl.Integration.Design.XmlNamespaceStringConverter))]
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel/Namespace.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel/Namespace.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel/Namespace.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("23783d61-83d3-4cf9-95c0-f6088397c64c")]
		public global::System.String Namespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ServiceContractModel.Namespace domain property.
		/// </summary>
		internal sealed partial class NamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<ServiceContractModel, global::System.String>
		{
			private NamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ServiceContractModel.Namespace domain property value handler.
			/// </summary>
			public static readonly NamespacePropertyHandler Instance = new NamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ServiceContractModel.Namespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ServiceContractModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namespacePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ServiceContractModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SerializerType domain property code
		
		/// <summary>
		/// SerializerType domain property Id.
		/// </summary>
		public static readonly global::System.Guid SerializerTypeDomainPropertyId = new global::System.Guid(0x4ae7d31e, 0xdd5a, 0x4303, 0x92, 0x57, 0x44, 0x4b, 0xcf, 0xb5, 0xdb, 0x8a);
		
		/// <summary>
		/// Storage for SerializerType
		/// </summary>
		private SerializerType serializerTypePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of SerializerType domain property.
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel.Serializer Type
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel/SerializerType.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel/SerializerType.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel/SerializerType.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("4ae7d31e-dd5a-4303-9257-444bcfb5db8a")]
		public SerializerType SerializerType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return serializerTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SerializerTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ServiceContractModel.SerializerType domain property.
		/// </summary>
		internal sealed partial class SerializerTypePropertyHandler : DslModeling::DomainPropertyValueHandler<ServiceContractModel, SerializerType>
		{
			private SerializerTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ServiceContractModel.SerializerType domain property value handler.
			/// </summary>
			public static readonly SerializerTypePropertyHandler Instance = new SerializerTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ServiceContractModel.SerializerType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SerializerTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed SerializerType GetValue(ServiceContractModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.serializerTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ServiceContractModel element, SerializerType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				SerializerType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.serializerTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ServiceContracts opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ServiceContracts.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ServiceContract> ServiceContracts
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ServiceContract>, ServiceContract>(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts.ServiceContractModelDomainRoleId);
			}
		}
		#endregion
		#region Operations opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Operations.
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations.ServiceContractModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Operation> Operations
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Operation>, Operation>(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations.ServiceContractModelDomainRoleId);
			}
		}
		#endregion
		#region Services opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Services.
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices.ServiceContractModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Service> Services
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Service>, Service>(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices.ServiceContractModelDomainRoleId);
			}
		}
		#endregion
		#region Messages opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Messages.
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages.ServiceContractModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<MessageBase> Messages
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<MessageBase>, MessageBase>(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages.ServiceContractModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Microsoft.Practices.ServiceFactory.ServiceContracts.Operation.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Microsoft.Practices.ServiceFactory.ServiceContracts.Service.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract sourceServiceContract1 = sourceElement as global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract;
			if (sourceServiceContract1 != null)
			{
				// Create link for path ServiceContractModelHasServiceContracts.ServiceContracts
				this.ServiceContracts.Add(sourceServiceContract1);

				return;
			}
				
			global::Microsoft.Practices.ServiceFactory.ServiceContracts.Operation sourceOperation2 = sourceElement as global::Microsoft.Practices.ServiceFactory.ServiceContracts.Operation;
			if (sourceOperation2 != null)
			{
				// Create link for path ServiceContractModelHasOperations.Operations
				this.Operations.Add(sourceOperation2);

				return;
			}
				
			global::Microsoft.Practices.ServiceFactory.ServiceContracts.Service sourceService3 = sourceElement as global::Microsoft.Practices.ServiceFactory.ServiceContracts.Service;
			if (sourceService3 != null)
			{
				// Create link for path ServiceContractModelHasServices.Services
				this.Services.Add(sourceService3);

				return;
			}
				
			global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase sourceMessageBase4 = sourceElement as global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase;
			if (sourceMessageBase4 != null)
			{
				// Create link for path ServiceContractModelHasMessages.Messages
				this.Messages.Add(sourceMessageBase4);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract sourceServiceContract1 = sourceElement as global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract;
			if (sourceServiceContract1 != null)
			{
				// Delete link for path ServiceContractModelHasServiceContracts.ServiceContracts
				
				foreach (DslModeling::ElementLink link in global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts.GetLinks((global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel)this, sourceServiceContract1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts.ServiceContractModelDomainRoleId, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts.ServiceContractDomainRoleId);
				}

				return;
			}
				
			global::Microsoft.Practices.ServiceFactory.ServiceContracts.Operation sourceOperation2 = sourceElement as global::Microsoft.Practices.ServiceFactory.ServiceContracts.Operation;
			if (sourceOperation2 != null)
			{
				// Delete link for path ServiceContractModelHasOperations.Operations
				
				foreach (DslModeling::ElementLink link in global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations.GetLinks((global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel)this, sourceOperation2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations.ServiceContractModelDomainRoleId, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations.OperationDomainRoleId);
				}

				return;
			}
				
			global::Microsoft.Practices.ServiceFactory.ServiceContracts.Service sourceService3 = sourceElement as global::Microsoft.Practices.ServiceFactory.ServiceContracts.Service;
			if (sourceService3 != null)
			{
				// Delete link for path ServiceContractModelHasServices.Services
				
				foreach (DslModeling::ElementLink link in global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices.GetLinks((global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel)this, sourceService3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices.ServiceContractModelDomainRoleId, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices.ServiceDomainRoleId);
				}

				return;
			}
				
			global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase sourceMessageBase4 = sourceElement as global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase;
			if (sourceMessageBase4 != null)
			{
				// Delete link for path ServiceContractModelHasMessages.Messages
				
				foreach (DslModeling::ElementLink link in global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages.GetLinks((global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel)this, sourceMessageBase4))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages.ServiceContractModelDomainRoleId, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages.MessageBaseDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.ServiceContracts
{
	/// <summary>
	/// DomainClass ServiceContract
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[Microsoft.Practices.Modeling.CodeGeneration.Metadata.ProjectMappingRoleAttribute(Microsoft.Practices.ServiceFactory.RecipeFramework.Extensions.Enums.ServiceFactoryRoleType.ServiceContractRole)]
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("482361f7-975a-457d-b04a-d191e4e32f89")]
	public partial class ServiceContract : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ServiceContract domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x482361f7, 0x975a, 0x457d, 0xb0, 0x4a, 0xd1, 0x91, 0xe4, 0xe3, 0x2f, 0x89);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ServiceContract(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ServiceContract(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x3a5cbf68, 0xc59b, 0x4036, 0xa6, 0xfd, 0xfe, 0xeb, 0xca, 0x00, 0x5a, 0x0e);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the service contract.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract/Name.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract/Name.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract/Name.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("3a5cbf68-c59b-4036-a6fd-feebca005a0e")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ServiceContract.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ServiceContract, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ServiceContract.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ServiceContract.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ServiceContract element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ServiceContract element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Namespace domain property code
		
		/// <summary>
		/// Namespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid NamespaceDomainPropertyId = new global::System.Guid(0x2ba6123b, 0x4ea0, 0x49d7, 0x92, 0xab, 0x1c, 0x55, 0x8f, 0xa1, 0x3c, 0xcb);
		
		/// <summary>
		/// Storage for Namespace
		/// </summary>
		private global::System.String namespacePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Namespace domain property.
		/// The XML namespace of the service contract.
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(Microsoft.Practices.Modeling.Dsl.Integration.Design.XmlNamespaceStringConverter))]
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract/Namespace.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract/Namespace.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract/Namespace.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2ba6123b-4ea0-49d7-92ab-1c558fa13ccb")]
		public global::System.String Namespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ServiceContract.Namespace domain property.
		/// </summary>
		internal sealed partial class NamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<ServiceContract, global::System.String>
		{
			private NamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ServiceContract.Namespace domain property value handler.
			/// </summary>
			public static readonly NamespacePropertyHandler Instance = new NamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ServiceContract.Namespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ServiceContract element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namespacePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ServiceContract element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ObjectExtenderContainer domain property code
		
		/// <summary>
		/// ObjectExtenderContainer domain property Id.
		/// </summary>
		public static readonly global::System.Guid ObjectExtenderContainerDomainPropertyId = new global::System.Guid(0x7f5d3080, 0x23ff, 0x4760, 0xae, 0xd0, 0xa1, 0xda, 0xe7, 0x8f, 0x4d, 0x41);
		
		/// <summary>
		/// Storage for ObjectExtenderContainer
		/// </summary>
		private global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer objectExtenderContainerPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ObjectExtenderContainer domain property.
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract.Object
		/// Extender Container
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract/ObjectExtenderContainer.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract/ObjectExtenderContainer.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract/ObjectExtenderContainer.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("7f5d3080-23ff-4760-aed0-a1dae78f4d41")]
		public global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer ObjectExtenderContainer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return objectExtenderContainerPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ObjectExtenderContainerPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ServiceContract.ObjectExtenderContainer domain property.
		/// </summary>
		internal sealed partial class ObjectExtenderContainerPropertyHandler : DslModeling::DomainPropertyValueHandler<ServiceContract, global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer>
		{
			private ObjectExtenderContainerPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ServiceContract.ObjectExtenderContainer domain property value handler.
			/// </summary>
			public static readonly ObjectExtenderContainerPropertyHandler Instance = new ObjectExtenderContainerPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ServiceContract.ObjectExtenderContainer domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ObjectExtenderContainerDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer GetValue(ServiceContract element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.objectExtenderContainerPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ServiceContract element, global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.objectExtenderContainerPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Remarks domain property code
		
		/// <summary>
		/// Remarks domain property Id.
		/// </summary>
		public static readonly global::System.Guid RemarksDomainPropertyId = new global::System.Guid(0x1792c489, 0xed1b, 0x4323, 0x8c, 0xb3, 0x93, 0x8a, 0xaf, 0x11, 0x5a, 0x87);
		
		/// <summary>
		/// Storage for Remarks
		/// </summary>
		private global::System.String remarksPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Remarks domain property.
		/// Provides additional documentation information to this element. Its content will
		/// be added as a <remarks> element to the generated code.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract/Remarks.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract/Remarks.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract/Remarks.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("1792c489-ed1b-4323-8cb3-938aaf115a87")]
		public global::System.String Remarks
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return remarksPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RemarksPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ServiceContract.Remarks domain property.
		/// </summary>
		internal sealed partial class RemarksPropertyHandler : DslModeling::DomainPropertyValueHandler<ServiceContract, global::System.String>
		{
			private RemarksPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ServiceContract.Remarks domain property value handler.
			/// </summary>
			public static readonly RemarksPropertyHandler Instance = new RemarksPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ServiceContract.Remarks domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RemarksDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ServiceContract element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.remarksPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ServiceContract element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.remarksPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ServiceContractModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ServiceContractModel.
		/// </summary>
		public virtual ServiceContractModel ServiceContractModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts.ServiceContractDomainRoleId) as ServiceContractModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts.ServiceContractDomainRoleId, value);
			}
		}
		#endregion
		#region Operations opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Operations.
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations.ServiceContract
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Operation> Operations
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Operation>, Operation>(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations.ServiceContractDomainRoleId);
			}
		}
		#endregion
		#region Service opposite domain role accessor
		/// <summary>
		/// Gets or sets Service.
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract.ServiceContract
		/// </summary>
		public virtual Service Service
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract.ServiceContractDomainRoleId) as Service;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract.ServiceContractDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.ServiceContracts
{
	/// <summary>
	/// DomainClass Operation
	/// Description for Microsoft.Practices.ServiceFactory.ServiceContracts.Operation
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Operation.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Operation.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("bbb75d22-1c71-4c93-88f9-dc598c649fd4")]
	public partial class Operation : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Operation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbbb75d22, 0x1c71, 0x4c93, 0x88, 0xf9, 0xdc, 0x59, 0x8c, 0x64, 0x9f, 0xd4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Operation(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Operation(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x9dbb418a, 0x4725, 0x4aa8, 0x89, 0x3a, 0xbd, 0x16, 0xf3, 0xb4, 0x6f, 0xf4);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the operation.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Operation/Name.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Operation/Name.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Operation/Name.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("9dbb418a-4725-4aa8-893a-bd16f3b46ff4")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Operation.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Operation, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Operation.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Operation.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Operation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Operation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Action domain property code
		
		/// <summary>
		/// Action domain property Id.
		/// </summary>
		public static readonly global::System.Guid ActionDomainPropertyId = new global::System.Guid(0xf5c8401f, 0xf943, 0x40e7, 0xaf, 0x1c, 0xa1, 0x07, 0x4c, 0xc2, 0xf5, 0xd7);
		
		/// <summary>
		/// Storage for Action
		/// </summary>
		private global::System.String actionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Action domain property.
		/// Represents the WS-Addressing action attribute, which is used for dispatching the
		/// request.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Operation/Action.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Operation/Action.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Operation/Action.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f5c8401f-f943-40e7-af1c-a1074cc2f5d7")]
		public global::System.String Action
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return actionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ActionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Operation.Action domain property.
		/// </summary>
		internal sealed partial class ActionPropertyHandler : DslModeling::DomainPropertyValueHandler<Operation, global::System.String>
		{
			private ActionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Operation.Action domain property value handler.
			/// </summary>
			public static readonly ActionPropertyHandler Instance = new ActionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Operation.Action domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ActionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Operation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.actionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Operation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.actionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsOneWay domain property code
		
		/// <summary>
		/// IsOneWay domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsOneWayDomainPropertyId = new global::System.Guid(0x50ec053b, 0x125e, 0x4dcf, 0x93, 0xd2, 0xed, 0x30, 0xc1, 0x49, 0x20, 0x07);
		
		/// <summary>
		/// Storage for IsOneWay
		/// </summary>
		private global::System.Boolean isOneWayPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsOneWay domain property.
		/// Indicates whether or not an operation returns a reply or fault message.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Operation/IsOneWay.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Operation/IsOneWay.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Operation/IsOneWay.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("50ec053b-125e-4dcf-93d2-ed30c1492007")]
		public global::System.Boolean IsOneWay
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isOneWayPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsOneWayPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Operation.IsOneWay domain property.
		/// </summary>
		internal sealed partial class IsOneWayPropertyHandler : DslModeling::DomainPropertyValueHandler<Operation, global::System.Boolean>
		{
			private IsOneWayPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Operation.IsOneWay domain property value handler.
			/// </summary>
			public static readonly IsOneWayPropertyHandler Instance = new IsOneWayPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Operation.IsOneWay domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsOneWayDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Operation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isOneWayPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Operation element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isOneWayPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ObjectExtenderContainer domain property code
		
		/// <summary>
		/// ObjectExtenderContainer domain property Id.
		/// </summary>
		public static readonly global::System.Guid ObjectExtenderContainerDomainPropertyId = new global::System.Guid(0xf8ee2a06, 0xbd20, 0x48e3, 0xbd, 0xb6, 0x8f, 0x4a, 0x53, 0x73, 0x33, 0x2c);
		
		/// <summary>
		/// Storage for ObjectExtenderContainer
		/// </summary>
		private global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer objectExtenderContainerPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ObjectExtenderContainer domain property.
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.Operation.Object Extender
		/// Container
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Operation/ObjectExtenderContainer.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Operation/ObjectExtenderContainer.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Operation/ObjectExtenderContainer.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("f8ee2a06-bd20-48e3-bdb6-8f4a5373332c")]
		public global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer ObjectExtenderContainer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return objectExtenderContainerPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ObjectExtenderContainerPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Operation.ObjectExtenderContainer domain property.
		/// </summary>
		internal sealed partial class ObjectExtenderContainerPropertyHandler : DslModeling::DomainPropertyValueHandler<Operation, global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer>
		{
			private ObjectExtenderContainerPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Operation.ObjectExtenderContainer domain property value handler.
			/// </summary>
			public static readonly ObjectExtenderContainerPropertyHandler Instance = new ObjectExtenderContainerPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Operation.ObjectExtenderContainer domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ObjectExtenderContainerDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer GetValue(Operation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.objectExtenderContainerPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Operation element, global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.objectExtenderContainerPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Remarks domain property code
		
		/// <summary>
		/// Remarks domain property Id.
		/// </summary>
		public static readonly global::System.Guid RemarksDomainPropertyId = new global::System.Guid(0x844361d0, 0xbd8b, 0x4b00, 0xb6, 0xe0, 0x9d, 0x10, 0x79, 0xbd, 0x48, 0xc8);
		
		/// <summary>
		/// Storage for Remarks
		/// </summary>
		private global::System.String remarksPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Remarks domain property.
		/// Provides additional documentation information to this element. Its content will
		/// be added as a <remarks> element to the generated code.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Operation/Remarks.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Operation/Remarks.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Operation/Remarks.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("844361d0-bd8b-4b00-b6e0-9d1079bd48c8")]
		public global::System.String Remarks
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return remarksPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RemarksPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Operation.Remarks domain property.
		/// </summary>
		internal sealed partial class RemarksPropertyHandler : DslModeling::DomainPropertyValueHandler<Operation, global::System.String>
		{
			private RemarksPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Operation.Remarks domain property value handler.
			/// </summary>
			public static readonly RemarksPropertyHandler Instance = new RemarksPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Operation.Remarks domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RemarksDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Operation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.remarksPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Operation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.remarksPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ServiceContractModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ServiceContractModel.
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations.Operation
		/// </summary>
		public virtual ServiceContractModel ServiceContractModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations.OperationDomainRoleId) as ServiceContractModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations.OperationDomainRoleId, value);
			}
		}
		#endregion
		#region ServiceContract opposite domain role accessor
		/// <summary>
		/// Gets or sets ServiceContract.
		/// The service contract this operation is associated with.
		/// </summary>
		public virtual ServiceContract ServiceContract
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations.OperationDomainRoleId) as ServiceContract;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations.OperationDomainRoleId, value);
			}
		}
		#endregion
		#region Faults opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Faults.
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults.Operation
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Fault> Faults
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Fault>, Fault>(global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults.OperationDomainRoleId);
			}
		}
		#endregion
		#region Request opposite domain role accessor
		/// <summary>
		/// Gets or sets Request.
		/// The message that functions as a request to this operation. These values can be
		/// controlled by connecting the messages on the design surface.
		/// </summary>
		public virtual MessageBase Request
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation.OperationDomainRoleId) as MessageBase;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation.OperationDomainRoleId, value);
			}
		}
		#endregion
		#region Response opposite domain role accessor
		/// <summary>
		/// Gets or sets Response.
		/// The message that functions as a response to this operation. These values can be
		/// controlled by connecting the messages on the design surface.
		/// </summary>
		public virtual MessageBase Response
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse.OperationDomainRoleId) as MessageBase;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse.OperationDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Microsoft.Practices.ServiceFactory.ServiceContracts.Fault.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Microsoft.Practices.ServiceFactory.ServiceContracts.Fault sourceFault1 = sourceElement as global::Microsoft.Practices.ServiceFactory.ServiceContracts.Fault;
			if (sourceFault1 != null)
			{
				// Create link for path OperationHasFaults.Faults
				this.Faults.Add(sourceFault1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Microsoft.Practices.ServiceFactory.ServiceContracts.Fault sourceFault1 = sourceElement as global::Microsoft.Practices.ServiceFactory.ServiceContracts.Fault;
			if (sourceFault1 != null)
			{
				// Delete link for path OperationHasFaults.Faults
				
				foreach (DslModeling::ElementLink link in global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults.GetLinks((global::Microsoft.Practices.ServiceFactory.ServiceContracts.Operation)this, sourceFault1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults.OperationDomainRoleId, global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults.FaultDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.ServiceContracts
{
	/// <summary>
	/// DomainClass Service
	/// Description for Microsoft.Practices.ServiceFactory.ServiceContracts.Service
	/// </summary>
	[Microsoft.Practices.Modeling.CodeGeneration.Metadata.ProjectMappingRoleAttribute(Microsoft.Practices.ServiceFactory.RecipeFramework.Extensions.Enums.ServiceFactoryRoleType.ServiceRole)]
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Service.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Service.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("b5147e13-b866-4cdf-bd90-dbeae9e91a11")]
	public partial class Service : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Service domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb5147e13, 0xb866, 0x4cdf, 0xbd, 0x90, 0xdb, 0xea, 0xe9, 0xe9, 0x1a, 0x11);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Service(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Service(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x9a3df394, 0xb295, 0x4377, 0x92, 0x02, 0xee, 0xcf, 0x4a, 0xa6, 0xf0, 0x02);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the service.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Service/Name.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Service/Name.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Service/Name.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("9a3df394-b295-4377-9202-eecf4aa6f002")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Service.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Service, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Service.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Service.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Service element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Service element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ObjectExtenderContainer domain property code
		
		/// <summary>
		/// ObjectExtenderContainer domain property Id.
		/// </summary>
		public static readonly global::System.Guid ObjectExtenderContainerDomainPropertyId = new global::System.Guid(0x1c220b59, 0xb297, 0x4e4e, 0xa6, 0x9f, 0x7f, 0x4c, 0xfa, 0x52, 0x57, 0xd9);
		
		/// <summary>
		/// Storage for ObjectExtenderContainer
		/// </summary>
		private global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer objectExtenderContainerPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ObjectExtenderContainer domain property.
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.Service.Object Extender
		/// Container
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Service/ObjectExtenderContainer.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Service/ObjectExtenderContainer.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Service/ObjectExtenderContainer.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("1c220b59-b297-4e4e-a69f-7f4cfa5257d9")]
		public global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer ObjectExtenderContainer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return objectExtenderContainerPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ObjectExtenderContainerPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Service.ObjectExtenderContainer domain property.
		/// </summary>
		internal sealed partial class ObjectExtenderContainerPropertyHandler : DslModeling::DomainPropertyValueHandler<Service, global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer>
		{
			private ObjectExtenderContainerPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Service.ObjectExtenderContainer domain property value handler.
			/// </summary>
			public static readonly ObjectExtenderContainerPropertyHandler Instance = new ObjectExtenderContainerPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Service.ObjectExtenderContainer domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ObjectExtenderContainerDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer GetValue(Service element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.objectExtenderContainerPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Service element, global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.objectExtenderContainerPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Namespace domain property code
		
		/// <summary>
		/// Namespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid NamespaceDomainPropertyId = new global::System.Guid(0xb91d74cf, 0x95c4, 0x46c3, 0x95, 0xb8, 0x0d, 0x7f, 0xd8, 0x95, 0x4b, 0x52);
		
		/// <summary>
		/// Storage for Namespace
		/// </summary>
		private global::System.String namespacePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Namespace domain property.
		/// The XML namespace of the service.
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(Microsoft.Practices.Modeling.Dsl.Integration.Design.XmlNamespaceStringConverter))]
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Service/Namespace.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Service/Namespace.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Service/Namespace.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b91d74cf-95c4-46c3-95b8-0d7fd8954b52")]
		public global::System.String Namespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Service.Namespace domain property.
		/// </summary>
		internal sealed partial class NamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<Service, global::System.String>
		{
			private NamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Service.Namespace domain property value handler.
			/// </summary>
			public static readonly NamespacePropertyHandler Instance = new NamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Service.Namespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Service element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namespacePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Service element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Remarks domain property code
		
		/// <summary>
		/// Remarks domain property Id.
		/// </summary>
		public static readonly global::System.Guid RemarksDomainPropertyId = new global::System.Guid(0x136f4872, 0x44cd, 0x415b, 0x85, 0x74, 0x98, 0x4a, 0x48, 0x07, 0xe7, 0x8e);
		
		/// <summary>
		/// Storage for Remarks
		/// </summary>
		private global::System.String remarksPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Remarks domain property.
		/// Provides additional documentation information to this element. Its content will
		/// be added as a <remarks> element to the generated code.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Service/Remarks.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Service/Remarks.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Service/Remarks.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("136f4872-44cd-415b-8574-984a4807e78e")]
		public global::System.String Remarks
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return remarksPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RemarksPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Service.Remarks domain property.
		/// </summary>
		internal sealed partial class RemarksPropertyHandler : DslModeling::DomainPropertyValueHandler<Service, global::System.String>
		{
			private RemarksPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Service.Remarks domain property value handler.
			/// </summary>
			public static readonly RemarksPropertyHandler Instance = new RemarksPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Service.Remarks domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RemarksDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Service element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.remarksPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Service element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.remarksPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ServiceContractModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ServiceContractModel.
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices.Service
		/// </summary>
		public virtual ServiceContractModel ServiceContractModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices.ServiceDomainRoleId) as ServiceContractModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices.ServiceDomainRoleId, value);
			}
		}
		#endregion
		#region ServiceContract opposite domain role accessor
		/// <summary>
		/// Gets or sets ServiceContract.
		/// The contract that the service implements.
		/// </summary>
		public virtual ServiceContract ServiceContract
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract.ServiceDomainRoleId) as ServiceContract;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract.ServiceDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.ServiceContracts
{
	/// <summary>
	/// DomainClass Message
	/// Description for Microsoft.Practices.ServiceFactory.ServiceContracts.Message
	/// </summary>
	[Microsoft.Practices.Modeling.CodeGeneration.Metadata.ProjectMappingRoleAttribute(Microsoft.Practices.ServiceFactory.RecipeFramework.Extensions.Enums.ServiceFactoryRoleType.MessageContractRole)]
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Message.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Message.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e5d605dc-eb6f-4b44-bbb4-f812a784f04e")]
	public partial class Message : MessageBase
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Message domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe5d605dc, 0xeb6f, 0x4b44, 0xbb, 0xb4, 0xf8, 0x12, 0xa7, 0x84, 0xf0, 0x4e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Message(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Message(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Microsoft.Practices.ServiceFactory.ServiceContracts.DataContractMessagePart.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Microsoft.Practices.ServiceFactory.ServiceContracts.PrimitiveMessagePart.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Microsoft.Practices.ServiceFactory.ServiceContracts.DataContractMessagePart sourceDataContractMessagePart1 = sourceElement as global::Microsoft.Practices.ServiceFactory.ServiceContracts.DataContractMessagePart;
			if (sourceDataContractMessagePart1 != null)
			{
				// Create link for path MessageHasMessageParts.MessageParts
				this.MessageParts.Add(sourceDataContractMessagePart1);

				return;
			}
				
			global::Microsoft.Practices.ServiceFactory.ServiceContracts.PrimitiveMessagePart sourcePrimitiveMessagePart2 = sourceElement as global::Microsoft.Practices.ServiceFactory.ServiceContracts.PrimitiveMessagePart;
			if (sourcePrimitiveMessagePart2 != null)
			{
				// Create link for path MessageHasMessageParts.MessageParts
				this.MessageParts.Add(sourcePrimitiveMessagePart2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Microsoft.Practices.ServiceFactory.ServiceContracts.DataContractMessagePart sourceDataContractMessagePart1 = sourceElement as global::Microsoft.Practices.ServiceFactory.ServiceContracts.DataContractMessagePart;
			if (sourceDataContractMessagePart1 != null)
			{
				// Delete link for path MessageHasMessageParts.MessageParts
				
				foreach (DslModeling::ElementLink link in global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts.GetLinks((global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase)this, sourceDataContractMessagePart1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts.MessageBaseDomainRoleId, global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts.MessagePartDomainRoleId);
				}

				return;
			}
				
			global::Microsoft.Practices.ServiceFactory.ServiceContracts.PrimitiveMessagePart sourcePrimitiveMessagePart2 = sourceElement as global::Microsoft.Practices.ServiceFactory.ServiceContracts.PrimitiveMessagePart;
			if (sourcePrimitiveMessagePart2 != null)
			{
				// Delete link for path MessageHasMessageParts.MessageParts
				
				foreach (DslModeling::ElementLink link in global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts.GetLinks((global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase)this, sourcePrimitiveMessagePart2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts.MessageBaseDomainRoleId, global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts.MessagePartDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.ServiceContracts
{
	/// <summary>
	/// DomainClass MessagePart
	/// Description for Microsoft.Practices.ServiceFactory.ServiceContracts.MessagePart
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessagePart.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessagePart.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("116281c4-9d4f-441b-8ab7-4f52e7206230")]
	public abstract partial class MessagePart : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MessagePart domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x116281c4, 0x9d4f, 0x441b, 0x8a, 0xb7, 0x4f, 0x52, 0xe7, 0x20, 0x62, 0x30);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected MessagePart(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x61d27623, 0x7035, 0x4bab, 0x85, 0xbd, 0x9e, 0x43, 0x3c, 0xfb, 0xd9, 0x8e);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the data contract.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessagePart/Name.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessagePart/Name.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessagePart/Name.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("61d27623-7035-4bab-85bd-9e433cfbd98e")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MessagePart.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<MessagePart, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MessagePart.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MessagePart.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MessagePart element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MessagePart element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ObjectExtenderContainer domain property code
		
		/// <summary>
		/// ObjectExtenderContainer domain property Id.
		/// </summary>
		public static readonly global::System.Guid ObjectExtenderContainerDomainPropertyId = new global::System.Guid(0x641f688e, 0x79ee, 0x472a, 0x9e, 0xa8, 0x1e, 0xba, 0xa6, 0xfa, 0xed, 0x94);
		
		/// <summary>
		/// Storage for ObjectExtenderContainer
		/// </summary>
		private global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer objectExtenderContainerPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ObjectExtenderContainer domain property.
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.MessagePart.Object Extender
		/// Container
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessagePart/ObjectExtenderContainer.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessagePart/ObjectExtenderContainer.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessagePart/ObjectExtenderContainer.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("641f688e-79ee-472a-9ea8-1ebaa6faed94")]
		public global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer ObjectExtenderContainer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return objectExtenderContainerPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ObjectExtenderContainerPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MessagePart.ObjectExtenderContainer domain property.
		/// </summary>
		internal sealed partial class ObjectExtenderContainerPropertyHandler : DslModeling::DomainPropertyValueHandler<MessagePart, global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer>
		{
			private ObjectExtenderContainerPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MessagePart.ObjectExtenderContainer domain property value handler.
			/// </summary>
			public static readonly ObjectExtenderContainerPropertyHandler Instance = new ObjectExtenderContainerPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MessagePart.ObjectExtenderContainer domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ObjectExtenderContainerDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer GetValue(MessagePart element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.objectExtenderContainerPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MessagePart element, global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.objectExtenderContainerPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Remarks domain property code
		
		/// <summary>
		/// Remarks domain property Id.
		/// </summary>
		public static readonly global::System.Guid RemarksDomainPropertyId = new global::System.Guid(0x9578acbc, 0xe576, 0x4765, 0x83, 0x28, 0x10, 0xe5, 0xaa, 0xdc, 0x70, 0x2b);
		
		/// <summary>
		/// Storage for Remarks
		/// </summary>
		private global::System.String remarksPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Remarks domain property.
		/// Provides additional documentation information to this element. Its content will
		/// be added as a <remarks> element to the generated code.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessagePart/Remarks.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessagePart/Remarks.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessagePart/Remarks.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9578acbc-e576-4765-8328-10e5aadc702b")]
		public global::System.String Remarks
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return remarksPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RemarksPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MessagePart.Remarks domain property.
		/// </summary>
		internal sealed partial class RemarksPropertyHandler : DslModeling::DomainPropertyValueHandler<MessagePart, global::System.String>
		{
			private RemarksPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MessagePart.Remarks domain property value handler.
			/// </summary>
			public static readonly RemarksPropertyHandler Instance = new RemarksPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MessagePart.Remarks domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RemarksDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MessagePart element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.remarksPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MessagePart element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.remarksPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Message opposite domain role accessor
		/// <summary>
		/// Gets or sets Message.
		/// A cross-model reference to the associated data contract type on the data
		/// contract model.
		/// </summary>
		public virtual MessageBase Message
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts.MessagePartDomainRoleId) as MessageBase;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts.MessagePartDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.ServiceContracts
{
	/// <summary>
	/// DomainClass Fault
	/// Description for Microsoft.Practices.ServiceFactory.ServiceContracts.Fault
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Fault.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Fault.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("0c6f407e-fbf2-454a-af8f-8e03ad226563")]
	public abstract partial class Fault : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Fault domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0c6f407e, 0xfbf2, 0x454a, 0xaf, 0x8f, 0x8e, 0x03, 0xad, 0x22, 0x65, 0x63);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Fault(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x709d5f7b, 0xf1b2, 0x4c1c, 0x8b, 0x2c, 0x8b, 0x7e, 0x84, 0xeb, 0x64, 0x22);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the fault contract.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Fault/Name.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Fault/Name.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Fault/Name.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("709d5f7b-f1b2-4c1c-8b2c-8b7e84eb6422")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Fault.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Fault, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Fault.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Fault.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Fault element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Fault element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ObjectExtenderContainer domain property code
		
		/// <summary>
		/// ObjectExtenderContainer domain property Id.
		/// </summary>
		public static readonly global::System.Guid ObjectExtenderContainerDomainPropertyId = new global::System.Guid(0x13960a6e, 0xa7c5, 0x44e4, 0x81, 0xd1, 0x07, 0x49, 0xf2, 0x7f, 0x7c, 0x5d);
		
		/// <summary>
		/// Storage for ObjectExtenderContainer
		/// </summary>
		private global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer objectExtenderContainerPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ObjectExtenderContainer domain property.
		/// Description for Microsoft.Practices.ServiceFactory.ServiceContracts.Fault.Object
		/// Extender Container
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Fault/ObjectExtenderContainer.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Fault/ObjectExtenderContainer.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Fault/ObjectExtenderContainer.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("13960a6e-a7c5-44e4-81d1-0749f27f7c5d")]
		public global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer ObjectExtenderContainer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return objectExtenderContainerPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ObjectExtenderContainerPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Fault.ObjectExtenderContainer domain property.
		/// </summary>
		internal sealed partial class ObjectExtenderContainerPropertyHandler : DslModeling::DomainPropertyValueHandler<Fault, global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer>
		{
			private ObjectExtenderContainerPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Fault.ObjectExtenderContainer domain property value handler.
			/// </summary>
			public static readonly ObjectExtenderContainerPropertyHandler Instance = new ObjectExtenderContainerPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Fault.ObjectExtenderContainer domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ObjectExtenderContainerDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer GetValue(Fault element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.objectExtenderContainerPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Fault element, global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.objectExtenderContainerPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Remarks domain property code
		
		/// <summary>
		/// Remarks domain property Id.
		/// </summary>
		public static readonly global::System.Guid RemarksDomainPropertyId = new global::System.Guid(0x5fec8f49, 0x52e4, 0x462c, 0xa8, 0x71, 0x35, 0x1f, 0xf3, 0x9f, 0x6d, 0xc1);
		
		/// <summary>
		/// Storage for Remarks
		/// </summary>
		private global::System.String remarksPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Remarks domain property.
		/// Provides additional documentation information to this element. Its content will
		/// be added as a <remarks> element to the generated code.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Fault/Remarks.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Fault/Remarks.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.Fault/Remarks.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("5fec8f49-52e4-462c-a871-351ff39f6dc1")]
		public global::System.String Remarks
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return remarksPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RemarksPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Fault.Remarks domain property.
		/// </summary>
		internal sealed partial class RemarksPropertyHandler : DslModeling::DomainPropertyValueHandler<Fault, global::System.String>
		{
			private RemarksPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Fault.Remarks domain property value handler.
			/// </summary>
			public static readonly RemarksPropertyHandler Instance = new RemarksPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Fault.Remarks domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RemarksDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Fault element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.remarksPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Fault element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.remarksPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Operation opposite domain role accessor
		/// <summary>
		/// Gets or sets Operation.
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults.Fault
		/// </summary>
		public virtual Operation Operation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults.FaultDomainRoleId) as Operation;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults.FaultDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.ServiceContracts
{
	/// <summary>
	/// DomainClass DataContractMessagePart
	/// Description for
	/// Microsoft.Practices.ServiceFactory.ServiceContracts.DataContractMessagePart
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.DataContractMessagePart.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.DataContractMessagePart.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5f9c7b4d-0ba2-45b5-9ad1-43e03b1cf255")]
	public partial class DataContractMessagePart : MessagePart
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DataContractMessagePart domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5f9c7b4d, 0x0ba2, 0x45b5, 0x9a, 0xd1, 0x43, 0xe0, 0x3b, 0x1c, 0xf2, 0x55);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DataContractMessagePart(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DataContractMessagePart(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0x2243a296, 0xc566, 0x42fb, 0x80, 0x52, 0x35, 0xf0, 0xa2, 0x91, 0x24, 0x9e);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference typePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// A cross-model reference to the associated data contract type on the data
		/// contract model.
		/// </summary>
		[System.ComponentModel.Editor(typeof(Microsoft.VisualStudio.Modeling.Integration.Picker.ModelElementReferenceEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[System.ComponentModel.TypeConverter(typeof(Microsoft.VisualStudio.Modeling.Integration.ModelBusReferenceTypeConverter))]
		[Microsoft.VisualStudio.Modeling.Integration.Picker.SupplyFileBasedBrowserConfiguration("Please choose a DataContract file",  "DataContract files|*.datacontract")]
		[Microsoft.VisualStudio.Modeling.Integration.Picker.ApplyElementTypeLimitations(typeof(Microsoft.Practices.ServiceFactory.DataContracts.DataContract), typeof(Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnum), typeof(Microsoft.Practices.ServiceFactory.DataContracts.DataContractCollection), typeof(Microsoft.Practices.ServiceFactory.DataContracts.PrimitiveDataTypeCollection))]
		[System.CLSCompliant(false)]
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.DataContractMessagePart/Type.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.DataContractMessagePart/Type.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.DataContractMessagePart/Type.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2243a296-c566-42fb-8052-35f0a291249e")]
		public global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DataContractMessagePart.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<DataContractMessagePart, global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DataContractMessagePart.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DataContractMessagePart.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference GetValue(DataContractMessagePart element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DataContractMessagePart element, global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.ServiceContracts
{
	/// <summary>
	/// DomainClass PrimitiveMessagePart
	/// Description for
	/// Microsoft.Practices.ServiceFactory.ServiceContracts.PrimitiveMessagePart
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.PrimitiveMessagePart.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.PrimitiveMessagePart.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1be9f8fe-13c0-4d40-866a-8d613f69c476")]
	public partial class PrimitiveMessagePart : MessagePart
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PrimitiveMessagePart domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1be9f8fe, 0x13c0, 0x4d40, 0x86, 0x6a, 0x8d, 0x61, 0x3f, 0x69, 0xc4, 0x76);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PrimitiveMessagePart(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PrimitiveMessagePart(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0x11e59170, 0x7ebe, 0x4d6d, 0xb1, 0x28, 0xfc, 0x84, 0x49, 0xd1, 0xfa, 0xa5);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private global::System.String typePropertyStorage = "System.String";
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// A primitive .NET type.
		/// </summary>
		[System.ComponentModel.Editor(typeof(Microsoft.Practices.ServiceFactory.RecipeFramework.Extensions.Editors.TypeBrowser.FilteredTypeBrowser), typeof(System.Drawing.Design.UITypeEditor))]
		[System.ComponentModel.TypeConverterAttribute(typeof(System.ComponentModel.TypeConverter))]
		[System.Workflow.ComponentModel.Design.TypeFilterProvider(typeof(Microsoft.Practices.ServiceFactory.RecipeFramework.Extensions.Editors.TypeBrowser.PublicPrimitiveTypeFilter))]
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.PrimitiveMessagePart/Type.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.PrimitiveMessagePart/Type.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.PrimitiveMessagePart/Type.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("System.String")]
		[DslModeling::DomainObjectId("11e59170-7ebe-4d6d-b128-fc8449d1faa5")]
		public global::System.String Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PrimitiveMessagePart.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<PrimitiveMessagePart, global::System.String>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PrimitiveMessagePart.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PrimitiveMessagePart.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(PrimitiveMessagePart element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PrimitiveMessagePart element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsNullable domain property code
		
		/// <summary>
		/// IsNullable domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsNullableDomainPropertyId = new global::System.Guid(0xd99be5ca, 0x4b9c, 0x4197, 0xab, 0x2b, 0xc1, 0x11, 0x36, 0x3e, 0xdf, 0xe9);
		
		/// <summary>
		/// Storage for IsNullable
		/// </summary>
		private global::System.Boolean isNullablePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsNullable domain property.
		/// Indicates whether or not this part can have a null value.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.PrimitiveMessagePart/IsNullable.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.PrimitiveMessagePart/IsNullable.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.PrimitiveMessagePart/IsNullable.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d99be5ca-4b9c-4197-ab2b-c111363edfe9")]
		public global::System.Boolean IsNullable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isNullablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsNullablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PrimitiveMessagePart.IsNullable domain property.
		/// </summary>
		internal sealed partial class IsNullablePropertyHandler : DslModeling::DomainPropertyValueHandler<PrimitiveMessagePart, global::System.Boolean>
		{
			private IsNullablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PrimitiveMessagePart.IsNullable domain property value handler.
			/// </summary>
			public static readonly IsNullablePropertyHandler Instance = new IsNullablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PrimitiveMessagePart.IsNullable domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsNullableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(PrimitiveMessagePart element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isNullablePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PrimitiveMessagePart element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isNullablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsCollection domain property code
		
		/// <summary>
		/// IsCollection domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsCollectionDomainPropertyId = new global::System.Guid(0x0c208891, 0x8244, 0x42d1, 0x85, 0x68, 0x34, 0x30, 0xd5, 0xbd, 0x3c, 0x84);
		
		/// <summary>
		/// Storage for IsCollection
		/// </summary>
		private global::System.Boolean isCollectionPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsCollection domain property.
		/// Indicates whether or not this part is a generic list collection. 
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.PrimitiveMessagePart/IsCollection.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.PrimitiveMessagePart/IsCollection.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.PrimitiveMessagePart/IsCollection.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("0c208891-8244-42d1-8568-3430d5bd3c84")]
		public global::System.Boolean IsCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isCollectionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsCollectionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PrimitiveMessagePart.IsCollection domain property.
		/// </summary>
		internal sealed partial class IsCollectionPropertyHandler : DslModeling::DomainPropertyValueHandler<PrimitiveMessagePart, global::System.Boolean>
		{
			private IsCollectionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PrimitiveMessagePart.IsCollection domain property value handler.
			/// </summary>
			public static readonly IsCollectionPropertyHandler Instance = new IsCollectionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PrimitiveMessagePart.IsCollection domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsCollectionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(PrimitiveMessagePart element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isCollectionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PrimitiveMessagePart element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isCollectionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.ServiceContracts
{
	/// <summary>
	/// DomainClass MessageBase
	/// Description for Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("c2e3c28a-4faf-4831-8542-836ff69f17b0")]
	public abstract partial class MessageBase : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MessageBase domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc2e3c28a, 0x4faf, 0x4831, 0x85, 0x42, 0x83, 0x6f, 0xf6, 0x9f, 0x17, 0xb0);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected MessageBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x078daf85, 0x4e09, 0x48dc, 0xbc, 0xc6, 0x06, 0x83, 0x37, 0xad, 0x13, 0x43);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of this message.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase/Name.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase/Name.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase/Name.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("078daf85-4e09-48dc-bcc6-068337ad1343")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MessageBase.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<MessageBase, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MessageBase.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MessageBase.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MessageBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MessageBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Namespace domain property code
		
		/// <summary>
		/// Namespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid NamespaceDomainPropertyId = new global::System.Guid(0x82d7a5a3, 0x7d88, 0x41b6, 0xb9, 0x9e, 0x58, 0xfc, 0x1c, 0x02, 0x42, 0xfe);
		
		/// <summary>
		/// Storage for Namespace
		/// </summary>
		private global::System.String namespacePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Namespace domain property.
		/// The XML namespace of this message.
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(Microsoft.Practices.Modeling.Dsl.Integration.Design.XmlNamespaceStringConverter))]
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase/Namespace.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase/Namespace.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase/Namespace.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("82d7a5a3-7d88-41b6-b99e-58fc1c0242fe")]
		public global::System.String Namespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MessageBase.Namespace domain property.
		/// </summary>
		internal sealed partial class NamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<MessageBase, global::System.String>
		{
			private NamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MessageBase.Namespace domain property value handler.
			/// </summary>
			public static readonly NamespacePropertyHandler Instance = new NamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MessageBase.Namespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MessageBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namespacePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MessageBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ObjectExtenderContainer domain property code
		
		/// <summary>
		/// ObjectExtenderContainer domain property Id.
		/// </summary>
		public static readonly global::System.Guid ObjectExtenderContainerDomainPropertyId = new global::System.Guid(0x3fbd8fb5, 0x9313, 0x40bd, 0xbb, 0x89, 0x41, 0xeb, 0xb3, 0x1a, 0xd1, 0x60);
		
		/// <summary>
		/// Storage for ObjectExtenderContainer
		/// </summary>
		private global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer objectExtenderContainerPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ObjectExtenderContainer domain property.
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase.Object Extender
		/// Container
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase/ObjectExtenderContainer.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase/ObjectExtenderContainer.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase/ObjectExtenderContainer.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("3fbd8fb5-9313-40bd-bb89-41ebb31ad160")]
		public global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer ObjectExtenderContainer
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return objectExtenderContainerPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ObjectExtenderContainerPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MessageBase.ObjectExtenderContainer domain property.
		/// </summary>
		internal sealed partial class ObjectExtenderContainerPropertyHandler : DslModeling::DomainPropertyValueHandler<MessageBase, global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer>
		{
			private ObjectExtenderContainerPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MessageBase.ObjectExtenderContainer domain property value handler.
			/// </summary>
			public static readonly ObjectExtenderContainerPropertyHandler Instance = new ObjectExtenderContainerPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MessageBase.ObjectExtenderContainer domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ObjectExtenderContainerDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer GetValue(MessageBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.objectExtenderContainerPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MessageBase element, global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::Microsoft.Practices.Modeling.ExtensionProvider.Extension.ObjectExtenderContainer oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.objectExtenderContainerPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Remarks domain property code
		
		/// <summary>
		/// Remarks domain property Id.
		/// </summary>
		public static readonly global::System.Guid RemarksDomainPropertyId = new global::System.Guid(0xebdcb4a2, 0x8a9e, 0x40bf, 0xb2, 0x19, 0x8d, 0x5c, 0x51, 0xe2, 0x7b, 0x2c);
		
		/// <summary>
		/// Storage for Remarks
		/// </summary>
		private global::System.String remarksPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Remarks domain property.
		/// Provides additional documentation information to this element. Its content will
		/// be added as a <remarks> element to the generated code.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase/Remarks.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase/Remarks.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase/Remarks.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ebdcb4a2-8a9e-40bf-b219-8d5c51e27b2c")]
		public global::System.String Remarks
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return remarksPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RemarksPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MessageBase.Remarks domain property.
		/// </summary>
		internal sealed partial class RemarksPropertyHandler : DslModeling::DomainPropertyValueHandler<MessageBase, global::System.String>
		{
			private RemarksPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MessageBase.Remarks domain property value handler.
			/// </summary>
			public static readonly RemarksPropertyHandler Instance = new RemarksPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MessageBase.Remarks domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RemarksDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MessageBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.remarksPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MessageBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.remarksPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ServiceContractModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ServiceContractModel.
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages.MessageBase
		/// </summary>
		public virtual ServiceContractModel ServiceContractModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages.MessageBaseDomainRoleId) as ServiceContractModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages.MessageBaseDomainRoleId, value);
			}
		}
		#endregion
		#region RequestFor opposite domain role accessor
		
		/// <summary>
		/// Gets a list of RequestFor.
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation.MessageBase
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Operation> RequestFor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Operation>, Operation>(global::Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation.MessageBaseDomainRoleId);
			}
		}
		#endregion
		#region ResponseFor opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ResponseFor.
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse.MessageBase
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Operation> ResponseFor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Operation>, Operation>(global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse.MessageBaseDomainRoleId);
			}
		}
		#endregion
		#region MessageParts opposite domain role accessor
		
		/// <summary>
		/// Gets a list of MessageParts.
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts.MessageBase
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<MessagePart> MessageParts
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<MessagePart>, MessagePart>(global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts.MessageBaseDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.ServiceContracts
{
	/// <summary>
	/// DomainClass XsdMessage
	/// Description for Microsoft.Practices.ServiceFactory.ServiceContracts.XsdMessage
	/// </summary>
	[Microsoft.Practices.Modeling.CodeGeneration.Metadata.ProjectMappingRoleAttribute(Microsoft.Practices.ServiceFactory.RecipeFramework.Extensions.Enums.ServiceFactoryRoleType.MessageContractRole)]
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.XsdMessage.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.XsdMessage.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ced5d2b3-cd2c-458c-9850-788dbb4a5f1c")]
	public partial class XsdMessage : MessageBase
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// XsdMessage domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xced5d2b3, 0xcd2c, 0x458c, 0x98, 0x50, 0x78, 0x8d, 0xbb, 0x4a, 0x5f, 0x1c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public XsdMessage(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public XsdMessage(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Element domain property code
		
		/// <summary>
		/// Element domain property Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainPropertyId = new global::System.Guid(0xfe68a7c5, 0x8173, 0x4290, 0x9b, 0x19, 0x74, 0x95, 0x43, 0x9b, 0x9e, 0xe7);
		
		/// <summary>
		/// Storage for Element
		/// </summary>
		private global::System.String elementPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Element domain property.
		/// A reference to a complexType or element in an XSD file that represents this
		/// message.
		/// </summary>
		[Microsoft.Practices.Modeling.CodeGeneration.Metadata.ProjectMappingRoleAttribute(Microsoft.Practices.ServiceFactory.RecipeFramework.Extensions.Enums.ServiceFactoryRoleType.DataContractRole)]
		[System.ComponentModel.Editor(typeof(Microsoft.Practices.ServiceFactory.ServiceContracts.XsdElementPickerEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[System.ComponentModel.TypeConverterAttribute(typeof(System.ComponentModel.TypeConverter))]
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.XsdMessage/Element.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.XsdMessage/Element.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.XsdMessage/Element.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("fe68a7c5-8173-4290-9b19-7495439b9ee7")]
		public global::System.String Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return elementPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ElementPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the XsdMessage.Element domain property.
		/// </summary>
		internal sealed partial class ElementPropertyHandler : DslModeling::DomainPropertyValueHandler<XsdMessage, global::System.String>
		{
			private ElementPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the XsdMessage.Element domain property value handler.
			/// </summary>
			public static readonly ElementPropertyHandler Instance = new ElementPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the XsdMessage.Element domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ElementDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(XsdMessage element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.elementPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(XsdMessage element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.elementPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsWrapped domain property code
		
		/// <summary>
		/// IsWrapped domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsWrappedDomainPropertyId = new global::System.Guid(0x695596b7, 0xcc70, 0x4644, 0x8d, 0x91, 0x4a, 0x64, 0x14, 0x46, 0xa7, 0x65);
		
		/// <summary>
		/// Storage for IsWrapped
		/// </summary>
		private global::System.Boolean isWrappedPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsWrapped domain property.
		/// Indicates if the message contains a wrapper element.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.XsdMessage/IsWrapped.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.XsdMessage/IsWrapped.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.XsdMessage/IsWrapped.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("695596b7-cc70-4644-8d91-4a641446a765")]
		public global::System.Boolean IsWrapped
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isWrappedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsWrappedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the XsdMessage.IsWrapped domain property.
		/// </summary>
		internal sealed partial class IsWrappedPropertyHandler : DslModeling::DomainPropertyValueHandler<XsdMessage, global::System.Boolean>
		{
			private IsWrappedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the XsdMessage.IsWrapped domain property value handler.
			/// </summary>
			public static readonly IsWrappedPropertyHandler Instance = new IsWrappedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the XsdMessage.IsWrapped domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsWrappedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(XsdMessage element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isWrappedPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(XsdMessage element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isWrappedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.ServiceContracts
{
	/// <summary>
	/// DomainClass DataContractFault
	/// Description for
	/// Microsoft.Practices.ServiceFactory.ServiceContracts.DataContractFault
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.DataContractFault.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.DataContractFault.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("71530164-07b8-460b-be36-729c10871d18")]
	public partial class DataContractFault : Fault
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DataContractFault domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x71530164, 0x07b8, 0x460b, 0xbe, 0x36, 0x72, 0x9c, 0x10, 0x87, 0x1d, 0x18);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DataContractFault(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DataContractFault(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0x5f0afdf3, 0xb096, 0x46b0, 0xb3, 0x11, 0x72, 0x93, 0x72, 0xd8, 0x33, 0x58);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference typePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// A cross-model reference to the associated data contract type on the data
		/// contract model.
		/// </summary>
		[System.ComponentModel.Editor(typeof(Microsoft.VisualStudio.Modeling.Integration.Picker.ModelElementReferenceEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[System.ComponentModel.TypeConverter(typeof(Microsoft.VisualStudio.Modeling.Integration.ModelBusReferenceTypeConverter))]
		[Microsoft.VisualStudio.Modeling.Integration.Picker.SupplyFileBasedBrowserConfiguration("Please choose a DataContract file",  "DataContract files|*.datacontract")]
		[Microsoft.VisualStudio.Modeling.Integration.Picker.ApplyElementTypeLimitations(typeof(Microsoft.Practices.ServiceFactory.DataContracts.FaultContract))]
		[System.CLSCompliant(false)]
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.DataContractFault/Type.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.DataContractFault/Type.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.DataContractFault/Type.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("5f0afdf3-b096-46b0-b311-729372d83358")]
		public global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DataContractFault.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<DataContractFault, global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DataContractFault.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DataContractFault.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference GetValue(DataContractFault element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DataContractFault element, global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.ServiceContracts
{
	/// <summary>
	/// DomainClass XsdElementFault
	/// Description for
	/// Microsoft.Practices.ServiceFactory.ServiceContracts.XsdElementFault
	/// </summary>
	[Microsoft.Practices.Modeling.CodeGeneration.Metadata.ProjectMappingRoleAttribute(Microsoft.Practices.ServiceFactory.RecipeFramework.Extensions.Enums.ServiceFactoryRoleType.FaultContractRole)]
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.XsdElementFault.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.XsdElementFault.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("cbe50d8d-a5dc-4a54-ae20-e347ebedd2b5")]
	public partial class XsdElementFault : Fault
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// XsdElementFault domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcbe50d8d, 0xa5dc, 0x4a54, 0xae, 0x20, 0xe3, 0x47, 0xeb, 0xed, 0xd2, 0xb5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public XsdElementFault(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public XsdElementFault(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Element domain property code
		
		/// <summary>
		/// Element domain property Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainPropertyId = new global::System.Guid(0xa78a1b4c, 0x64d9, 0x4d1f, 0xa9, 0xf2, 0x26, 0x28, 0xff, 0x59, 0xe9, 0xc1);
		
		/// <summary>
		/// Storage for Element
		/// </summary>
		private global::System.String elementPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Element domain property.
		/// A reference to a complexType or element in an XSD file that represents this
		/// fault.
		/// </summary>
		[System.ComponentModel.Editor(typeof(Microsoft.Practices.ServiceFactory.ServiceContracts.XsdElementPickerEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[System.ComponentModel.TypeConverterAttribute(typeof(System.ComponentModel.TypeConverter))]
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.XsdElementFault/Element.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.XsdElementFault/Element.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.XsdElementFault/Element.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a78a1b4c-64d9-4d1f-a9f2-2628ff59e9c1")]
		public global::System.String Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return elementPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ElementPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the XsdElementFault.Element domain property.
		/// </summary>
		internal sealed partial class ElementPropertyHandler : DslModeling::DomainPropertyValueHandler<XsdElementFault, global::System.String>
		{
			private ElementPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the XsdElementFault.Element domain property value handler.
			/// </summary>
			public static readonly ElementPropertyHandler Instance = new ElementPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the XsdElementFault.Element domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ElementDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(XsdElementFault element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.elementPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(XsdElementFault element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.elementPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
