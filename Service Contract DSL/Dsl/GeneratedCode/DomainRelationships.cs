//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Microsoft.Practices.ServiceFactory.ServiceContracts
{
	/// <summary>
	/// DomainRelationship ServiceContractModelHasServiceContracts
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("fc321a85-682a-47c1-ab36-ebdd439b3c7a")]
	public partial class ServiceContractModelHasServiceContracts : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ServiceContractModelHasServiceContracts domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfc321a85, 0x682a, 0x47c1, 0xab, 0x36, 0xeb, 0xdd, 0x43, 0x9b, 0x3c, 0x7a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ServiceContractModelHasServiceContracts link in the same Partition as the given ServiceContractModel
		/// </summary>
		/// <param name="source">ServiceContractModel to use as the source of the relationship.</param>
		/// <param name="target">ServiceContract to use as the target of the relationship.</param>
		public ServiceContractModelHasServiceContracts(ServiceContractModel source, ServiceContract target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ServiceContractModelHasServiceContracts.ServiceContractModelDomainRoleId, source), new DslModeling::RoleAssignment(ServiceContractModelHasServiceContracts.ServiceContractDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ServiceContractModelHasServiceContracts(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ServiceContractModelHasServiceContracts(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ServiceContractModelHasServiceContracts(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ServiceContractModelHasServiceContracts(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ServiceContractModel domain role code
		
		/// <summary>
		/// ServiceContractModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ServiceContractModelDomainRoleId = new global::System.Guid(0x9e8820d7, 0xe00c, 0x484a, 0x9b, 0x39, 0x1e, 0xe0, 0xe3, 0x07, 0x51, 0x0e);
		
		/// <summary>
		/// DomainRole ServiceContractModel
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts/ServiceContractModel.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts/ServiceContractModel.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts/ServiceContractModel.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ServiceContracts", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts/ServiceContractModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9e8820d7-e00c-484a-9b39-1ee0e307510e")]
		public virtual ServiceContractModel ServiceContractModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ServiceContractModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ServiceContractModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ServiceContractModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ServiceContractModel of a ServiceContract
		/// <summary>
		/// Gets ServiceContractModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ServiceContractModel GetServiceContractModel(ServiceContract element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ServiceContractDomainRoleId) as ServiceContractModel;
		}
		
		/// <summary>
		/// Sets ServiceContractModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetServiceContractModel(ServiceContract element, ServiceContractModel newServiceContractModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ServiceContractDomainRoleId, newServiceContractModel);
		}
		#endregion
		#region ServiceContract domain role code
		
		/// <summary>
		/// ServiceContract domain role Id.
		/// </summary>
		public static readonly global::System.Guid ServiceContractDomainRoleId = new global::System.Guid(0x0d3776fa, 0xed1d, 0x48e4, 0xb5, 0xca, 0x18, 0xa7, 0xf0, 0x96, 0x1f, 0xea);
		
		/// <summary>
		/// DomainRole ServiceContract
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts/ServiceContract.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts/ServiceContract.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts/ServiceContract.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ServiceContractModel", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts/ServiceContract.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("0d3776fa-ed1d-48e4-b5ca-18a7f0961fea")]
		public virtual ServiceContract ServiceContract
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ServiceContract)DslModeling::DomainRoleInfo.GetRolePlayer(this, ServiceContractDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ServiceContractDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ServiceContracts of a ServiceContractModel
		/// <summary>
		/// Gets a list of ServiceContracts.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ServiceContract> GetServiceContracts(ServiceContractModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ServiceContract>, ServiceContract>(element, ServiceContractModelDomainRoleId);
		}
		#endregion
		#region ServiceContractModel link accessor
		/// <summary>
		/// Get the list of ServiceContractModelHasServiceContracts links to a ServiceContractModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts> GetLinksToServiceContracts ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel serviceContractModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts>(serviceContractModelInstance, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts.ServiceContractModelDomainRoleId);
		}
		#endregion
		#region ServiceContract link accessor
		/// <summary>
		/// Get the ServiceContractModelHasServiceContracts link to a ServiceContract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts GetLinkToServiceContractModel (global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract serviceContractInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts>(serviceContractInstance, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts.ServiceContractDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ServiceContract not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ServiceContractModelHasServiceContracts instance accessors
		
		/// <summary>
		/// Get any ServiceContractModelHasServiceContracts links between a given ServiceContractModel and a ServiceContract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts> GetLinks( global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts>();
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts>(source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts.ServiceContractModelDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts link in links )
			{
				if ( target.Equals(link.ServiceContract) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ServiceContractModelHasServiceContracts link between a given ServiceContractModeland a ServiceContract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts GetLink( global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts>(source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts.ServiceContractModelDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServiceContracts link in links )
			{
				if ( target.Equals(link.ServiceContract) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.ServiceContracts
{
	/// <summary>
	/// DomainRelationship ServiceContractModelHasOperations
	/// Description for
	/// Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("9810bec1-75ca-4600-847f-7e32604c2531")]
	public partial class ServiceContractModelHasOperations : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ServiceContractModelHasOperations domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9810bec1, 0x75ca, 0x4600, 0x84, 0x7f, 0x7e, 0x32, 0x60, 0x4c, 0x25, 0x31);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ServiceContractModelHasOperations link in the same Partition as the given ServiceContractModel
		/// </summary>
		/// <param name="source">ServiceContractModel to use as the source of the relationship.</param>
		/// <param name="target">Operation to use as the target of the relationship.</param>
		public ServiceContractModelHasOperations(ServiceContractModel source, Operation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ServiceContractModelHasOperations.ServiceContractModelDomainRoleId, source), new DslModeling::RoleAssignment(ServiceContractModelHasOperations.OperationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ServiceContractModelHasOperations(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ServiceContractModelHasOperations(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ServiceContractModelHasOperations(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ServiceContractModelHasOperations(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ServiceContractModel domain role code
		
		/// <summary>
		/// ServiceContractModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ServiceContractModelDomainRoleId = new global::System.Guid(0xa58d0693, 0x8972, 0x4fb4, 0x8b, 0x81, 0x90, 0x52, 0xa9, 0x0a, 0xbf, 0xd4);
		
		/// <summary>
		/// DomainRole ServiceContractModel
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations.ServiceContractModel
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations/ServiceContractModel.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations/ServiceContractModel.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations/ServiceContractModel.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Operations", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations/ServiceContractModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a58d0693-8972-4fb4-8b81-9052a90abfd4")]
		public virtual ServiceContractModel ServiceContractModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ServiceContractModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ServiceContractModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ServiceContractModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ServiceContractModel of a Operation
		/// <summary>
		/// Gets ServiceContractModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ServiceContractModel GetServiceContractModel(Operation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, OperationDomainRoleId) as ServiceContractModel;
		}
		
		/// <summary>
		/// Sets ServiceContractModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetServiceContractModel(Operation element, ServiceContractModel newServiceContractModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, OperationDomainRoleId, newServiceContractModel);
		}
		#endregion
		#region Operation domain role code
		
		/// <summary>
		/// Operation domain role Id.
		/// </summary>
		public static readonly global::System.Guid OperationDomainRoleId = new global::System.Guid(0xfb4a732f, 0x79c8, 0x4576, 0x8f, 0xad, 0x0e, 0x13, 0xb4, 0x6c, 0xfa, 0x32);
		
		/// <summary>
		/// DomainRole Operation
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations.Operation
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations/Operation.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations/Operation.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations/Operation.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ServiceContractModel", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations/Operation.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("fb4a732f-79c8-4576-8fad-0e13b46cfa32")]
		public virtual Operation Operation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Operation)DslModeling::DomainRoleInfo.GetRolePlayer(this, OperationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OperationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Operations of a ServiceContractModel
		/// <summary>
		/// Gets a list of Operations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Operation> GetOperations(ServiceContractModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Operation>, Operation>(element, ServiceContractModelDomainRoleId);
		}
		#endregion
		#region ServiceContractModel link accessor
		/// <summary>
		/// Get the list of ServiceContractModelHasOperations links to a ServiceContractModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations> GetLinksToOperations ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel serviceContractModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations>(serviceContractModelInstance, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations.ServiceContractModelDomainRoleId);
		}
		#endregion
		#region Operation link accessor
		/// <summary>
		/// Get the ServiceContractModelHasOperations link to a Operation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations GetLinkToServiceContractModel (global::Microsoft.Practices.ServiceFactory.ServiceContracts.Operation operationInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations>(operationInstance, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations.OperationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Operation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ServiceContractModelHasOperations instance accessors
		
		/// <summary>
		/// Get any ServiceContractModelHasOperations links between a given ServiceContractModel and a Operation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations> GetLinks( global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.Operation target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations>();
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations>(source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations.ServiceContractModelDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations link in links )
			{
				if ( target.Equals(link.Operation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ServiceContractModelHasOperations link between a given ServiceContractModeland a Operation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations GetLink( global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.Operation target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations>(source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations.ServiceContractModelDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasOperations link in links )
			{
				if ( target.Equals(link.Operation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.ServiceContracts
{
	/// <summary>
	/// DomainRelationship ServiceContractReferencesOperations
	/// Description for
	/// Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("096ae312-0e53-4109-8819-6eefa07035a1")]
	public partial class ServiceContractReferencesOperations : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ServiceContractReferencesOperations domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x096ae312, 0x0e53, 0x4109, 0x88, 0x19, 0x6e, 0xef, 0xa0, 0x70, 0x35, 0xa1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ServiceContractReferencesOperations link in the same Partition as the given ServiceContract
		/// </summary>
		/// <param name="source">ServiceContract to use as the source of the relationship.</param>
		/// <param name="target">Operation to use as the target of the relationship.</param>
		public ServiceContractReferencesOperations(ServiceContract source, Operation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ServiceContractReferencesOperations.ServiceContractDomainRoleId, source), new DslModeling::RoleAssignment(ServiceContractReferencesOperations.OperationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ServiceContractReferencesOperations(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ServiceContractReferencesOperations(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ServiceContractReferencesOperations(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ServiceContractReferencesOperations(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ServiceContract domain role code
		
		/// <summary>
		/// ServiceContract domain role Id.
		/// </summary>
		public static readonly global::System.Guid ServiceContractDomainRoleId = new global::System.Guid(0x1395dbef, 0x7477, 0x449b, 0xac, 0xdf, 0xf6, 0xbe, 0x77, 0x06, 0x30, 0xae);
		
		/// <summary>
		/// DomainRole ServiceContract
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations.ServiceContract
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations/ServiceContract.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations/ServiceContract.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations/ServiceContract.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Operations", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations/ServiceContract.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1395dbef-7477-449b-acdf-f6be770630ae")]
		public virtual ServiceContract ServiceContract
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ServiceContract)DslModeling::DomainRoleInfo.GetRolePlayer(this, ServiceContractDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ServiceContractDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ServiceContract of a Operation
		/// <summary>
		/// Gets ServiceContract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ServiceContract GetServiceContract(Operation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, OperationDomainRoleId) as ServiceContract;
		}
		
		/// <summary>
		/// Sets ServiceContract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetServiceContract(Operation element, ServiceContract newServiceContract)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, OperationDomainRoleId, newServiceContract);
		}
		#endregion
		#region Operation domain role code
		
		/// <summary>
		/// Operation domain role Id.
		/// </summary>
		public static readonly global::System.Guid OperationDomainRoleId = new global::System.Guid(0xb2e9f4f7, 0x1e9c, 0x49c6, 0xad, 0x18, 0x52, 0xd5, 0x5a, 0xcb, 0x6e, 0xe3);
		
		/// <summary>
		/// DomainRole Operation
		/// The service contract this operation is associated with.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations/Operation.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations/Operation.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations/Operation.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ServiceContract", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations/Operation.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("b2e9f4f7-1e9c-49c6-ad18-52d55acb6ee3")]
		public virtual Operation Operation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Operation)DslModeling::DomainRoleInfo.GetRolePlayer(this, OperationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OperationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Operations of a ServiceContract
		/// <summary>
		/// Gets a list of Operations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Operation> GetOperations(ServiceContract element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Operation>, Operation>(element, ServiceContractDomainRoleId);
		}
		#endregion
		#region ServiceContract link accessor
		/// <summary>
		/// Get the list of ServiceContractReferencesOperations links to a ServiceContract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations> GetLinksToOperations ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract serviceContractInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations>(serviceContractInstance, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations.ServiceContractDomainRoleId);
		}
		#endregion
		#region Operation link accessor
		/// <summary>
		/// Get the ServiceContractReferencesOperations link to a Operation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations GetLinkToServiceContract (global::Microsoft.Practices.ServiceFactory.ServiceContracts.Operation operationInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations>(operationInstance, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations.OperationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Operation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ServiceContractReferencesOperations instance accessors
		
		/// <summary>
		/// Get any ServiceContractReferencesOperations links between a given ServiceContract and a Operation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations> GetLinks( global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.Operation target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations>();
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations>(source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations.ServiceContractDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations link in links )
			{
				if ( target.Equals(link.Operation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ServiceContractReferencesOperations link between a given ServiceContractand a Operation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations GetLink( global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.Operation target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations>(source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations.ServiceContractDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractReferencesOperations link in links )
			{
				if ( target.Equals(link.Operation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.ServiceContracts
{
	/// <summary>
	/// DomainRelationship ServiceContractModelHasServices
	/// Description for
	/// Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a95f0175-0f05-4a6e-80ba-9949cf8267a7")]
	public partial class ServiceContractModelHasServices : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ServiceContractModelHasServices domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa95f0175, 0x0f05, 0x4a6e, 0x80, 0xba, 0x99, 0x49, 0xcf, 0x82, 0x67, 0xa7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ServiceContractModelHasServices link in the same Partition as the given ServiceContractModel
		/// </summary>
		/// <param name="source">ServiceContractModel to use as the source of the relationship.</param>
		/// <param name="target">Service to use as the target of the relationship.</param>
		public ServiceContractModelHasServices(ServiceContractModel source, Service target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ServiceContractModelHasServices.ServiceContractModelDomainRoleId, source), new DslModeling::RoleAssignment(ServiceContractModelHasServices.ServiceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ServiceContractModelHasServices(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ServiceContractModelHasServices(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ServiceContractModelHasServices(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ServiceContractModelHasServices(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ServiceContractModel domain role code
		
		/// <summary>
		/// ServiceContractModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ServiceContractModelDomainRoleId = new global::System.Guid(0xf5e8c9e2, 0x66a4, 0x44ae, 0xab, 0xed, 0x21, 0x19, 0xb3, 0xe4, 0x9b, 0x63);
		
		/// <summary>
		/// DomainRole ServiceContractModel
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices.ServiceContractModel
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices/ServiceContractModel.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices/ServiceContractModel.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices/ServiceContractModel.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Services", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices/ServiceContractModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f5e8c9e2-66a4-44ae-abed-2119b3e49b63")]
		public virtual ServiceContractModel ServiceContractModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ServiceContractModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ServiceContractModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ServiceContractModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ServiceContractModel of a Service
		/// <summary>
		/// Gets ServiceContractModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ServiceContractModel GetServiceContractModel(Service element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ServiceDomainRoleId) as ServiceContractModel;
		}
		
		/// <summary>
		/// Sets ServiceContractModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetServiceContractModel(Service element, ServiceContractModel newServiceContractModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ServiceDomainRoleId, newServiceContractModel);
		}
		#endregion
		#region Service domain role code
		
		/// <summary>
		/// Service domain role Id.
		/// </summary>
		public static readonly global::System.Guid ServiceDomainRoleId = new global::System.Guid(0x95c39005, 0x60a2, 0x479a, 0xac, 0x80, 0xe3, 0x60, 0x6d, 0x8b, 0xdb, 0x4c);
		
		/// <summary>
		/// DomainRole Service
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices.Service
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices/Service.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices/Service.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices/Service.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ServiceContractModel", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices/Service.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("95c39005-60a2-479a-ac80-e3606d8bdb4c")]
		public virtual Service Service
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Service)DslModeling::DomainRoleInfo.GetRolePlayer(this, ServiceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ServiceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Services of a ServiceContractModel
		/// <summary>
		/// Gets a list of Services.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Service> GetServices(ServiceContractModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Service>, Service>(element, ServiceContractModelDomainRoleId);
		}
		#endregion
		#region ServiceContractModel link accessor
		/// <summary>
		/// Get the list of ServiceContractModelHasServices links to a ServiceContractModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices> GetLinksToServices ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel serviceContractModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices>(serviceContractModelInstance, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices.ServiceContractModelDomainRoleId);
		}
		#endregion
		#region Service link accessor
		/// <summary>
		/// Get the ServiceContractModelHasServices link to a Service.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices GetLinkToServiceContractModel (global::Microsoft.Practices.ServiceFactory.ServiceContracts.Service serviceInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices>(serviceInstance, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices.ServiceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Service not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ServiceContractModelHasServices instance accessors
		
		/// <summary>
		/// Get any ServiceContractModelHasServices links between a given ServiceContractModel and a Service.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices> GetLinks( global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.Service target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices>();
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices>(source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices.ServiceContractModelDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices link in links )
			{
				if ( target.Equals(link.Service) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ServiceContractModelHasServices link between a given ServiceContractModeland a Service.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices GetLink( global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.Service target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices>(source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices.ServiceContractModelDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasServices link in links )
			{
				if ( target.Equals(link.Service) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.ServiceContracts
{
	/// <summary>
	/// DomainRelationship ServiceReferencesServiceContract
	/// Description for Microsoft.Practices.ServiceFactory.ServiceContracts
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a2a99593-2a34-4d79-9c31-8759acdcf4e1")]
	public partial class ServiceReferencesServiceContract : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ServiceReferencesServiceContract domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa2a99593, 0x2a34, 0x4d79, 0x9c, 0x31, 0x87, 0x59, 0xac, 0xdc, 0xf4, 0xe1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ServiceReferencesServiceContract link in the same Partition as the given Service
		/// </summary>
		/// <param name="source">Service to use as the source of the relationship.</param>
		/// <param name="target">ServiceContract to use as the target of the relationship.</param>
		public ServiceReferencesServiceContract(Service source, ServiceContract target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ServiceReferencesServiceContract.ServiceDomainRoleId, source), new DslModeling::RoleAssignment(ServiceReferencesServiceContract.ServiceContractDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ServiceReferencesServiceContract(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ServiceReferencesServiceContract(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ServiceReferencesServiceContract(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ServiceReferencesServiceContract(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Service domain role code
		
		/// <summary>
		/// Service domain role Id.
		/// </summary>
		public static readonly global::System.Guid ServiceDomainRoleId = new global::System.Guid(0x0377668c, 0xe435, 0x4e95, 0xbd, 0xe4, 0xe8, 0x53, 0xed, 0x1f, 0x3a, 0xa9);
		
		/// <summary>
		/// DomainRole Service
		/// The contract that the service implements.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract/Service.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract/Service.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract/Service.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ServiceContract", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract/Service.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("0377668c-e435-4e95-bde4-e853ed1f3aa9")]
		public virtual Service Service
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Service)DslModeling::DomainRoleInfo.GetRolePlayer(this, ServiceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ServiceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Service of a ServiceContract
		/// <summary>
		/// Gets Service.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Service GetService(ServiceContract element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ServiceContractDomainRoleId) as Service;
		}
		
		/// <summary>
		/// Sets Service.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetService(ServiceContract element, Service newService)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ServiceContractDomainRoleId, newService);
		}
		#endregion
		#region ServiceContract domain role code
		
		/// <summary>
		/// ServiceContract domain role Id.
		/// </summary>
		public static readonly global::System.Guid ServiceContractDomainRoleId = new global::System.Guid(0x931190c0, 0x2e6e, 0x4636, 0x8b, 0x65, 0xe3, 0x1f, 0x40, 0xd0, 0x34, 0x61);
		
		/// <summary>
		/// DomainRole ServiceContract
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract.ServiceContract
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract/ServiceContract.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract/ServiceContract.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract/ServiceContract.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Service", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract/ServiceContract.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("931190c0-2e6e-4636-8b65-e31f40d03461")]
		public virtual ServiceContract ServiceContract
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ServiceContract)DslModeling::DomainRoleInfo.GetRolePlayer(this, ServiceContractDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ServiceContractDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ServiceContract of a Service
		/// <summary>
		/// Gets ServiceContract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ServiceContract GetServiceContract(Service element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ServiceDomainRoleId) as ServiceContract;
		}
		
		/// <summary>
		/// Sets ServiceContract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetServiceContract(Service element, ServiceContract newServiceContract)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ServiceDomainRoleId, newServiceContract);
		}
		#endregion
		#region Service link accessor
		/// <summary>
		/// Get the ServiceReferencesServiceContract link to a Service.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract GetLinkToServiceContract (global::Microsoft.Practices.ServiceFactory.ServiceContracts.Service serviceInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract>(serviceInstance, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract.ServiceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Service not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ServiceContract link accessor
		/// <summary>
		/// Get the ServiceReferencesServiceContract link to a ServiceContract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract GetLinkToService (global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract serviceContractInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract>(serviceContractInstance, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract.ServiceContractDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ServiceContract not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ServiceReferencesServiceContract instance accessors
		
		/// <summary>
		/// Get any ServiceReferencesServiceContract links between a given Service and a ServiceContract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract> GetLinks( global::Microsoft.Practices.ServiceFactory.ServiceContracts.Service source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract>();
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract>(source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract.ServiceDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract link in links )
			{
				if ( target.Equals(link.ServiceContract) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ServiceReferencesServiceContract link between a given Serviceand a ServiceContract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract GetLink( global::Microsoft.Practices.ServiceFactory.ServiceContracts.Service source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract>(source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract.ServiceDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceReferencesServiceContract link in links )
			{
				if ( target.Equals(link.ServiceContract) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.ServiceContracts
{
	/// <summary>
	/// DomainRelationship OperationHasFaults
	/// Description for
	/// Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("780f41e2-b2eb-43e4-9797-1d4d6ed0ca84")]
	public partial class OperationHasFaults : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// OperationHasFaults domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x780f41e2, 0xb2eb, 0x43e4, 0x97, 0x97, 0x1d, 0x4d, 0x6e, 0xd0, 0xca, 0x84);
	
				
		/// <summary>
		/// Constructor
		/// Creates a OperationHasFaults link in the same Partition as the given Operation
		/// </summary>
		/// <param name="source">Operation to use as the source of the relationship.</param>
		/// <param name="target">Fault to use as the target of the relationship.</param>
		public OperationHasFaults(Operation source, Fault target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(OperationHasFaults.OperationDomainRoleId, source), new DslModeling::RoleAssignment(OperationHasFaults.FaultDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OperationHasFaults(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OperationHasFaults(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OperationHasFaults(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OperationHasFaults(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Operation domain role code
		
		/// <summary>
		/// Operation domain role Id.
		/// </summary>
		public static readonly global::System.Guid OperationDomainRoleId = new global::System.Guid(0xbfcabfa4, 0x2cdb, 0x4b90, 0xbb, 0x4b, 0xeb, 0x57, 0x53, 0xe4, 0x67, 0x20);
		
		/// <summary>
		/// DomainRole Operation
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults.Operation
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults/Operation.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults/Operation.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults/Operation.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Faults", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults/Operation.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bfcabfa4-2cdb-4b90-bb4b-eb5753e46720")]
		public virtual Operation Operation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Operation)DslModeling::DomainRoleInfo.GetRolePlayer(this, OperationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OperationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Operation of a Fault
		/// <summary>
		/// Gets Operation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Operation GetOperation(Fault element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FaultDomainRoleId) as Operation;
		}
		
		/// <summary>
		/// Sets Operation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetOperation(Fault element, Operation newOperation)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FaultDomainRoleId, newOperation);
		}
		#endregion
		#region Fault domain role code
		
		/// <summary>
		/// Fault domain role Id.
		/// </summary>
		public static readonly global::System.Guid FaultDomainRoleId = new global::System.Guid(0xf167f11b, 0x328d, 0x43ae, 0x84, 0x1e, 0x90, 0xb2, 0x5d, 0xdf, 0xf0, 0x53);
		
		/// <summary>
		/// DomainRole Fault
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults.Fault
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults/Fault.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults/Fault.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults/Fault.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Operation", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults/Fault.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f167f11b-328d-43ae-841e-90b25ddff053")]
		public virtual Fault Fault
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Fault)DslModeling::DomainRoleInfo.GetRolePlayer(this, FaultDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FaultDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Faults of a Operation
		/// <summary>
		/// Gets a list of Faults.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Fault> GetFaults(Operation element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Fault>, Fault>(element, OperationDomainRoleId);
		}
		#endregion
		#region Operation link accessor
		/// <summary>
		/// Get the list of OperationHasFaults links to a Operation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults> GetLinksToFaults ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.Operation operationInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults>(operationInstance, global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults.OperationDomainRoleId);
		}
		#endregion
		#region Fault link accessor
		/// <summary>
		/// Get the OperationHasFaults link to a Fault.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults GetLinkToOperation (global::Microsoft.Practices.ServiceFactory.ServiceContracts.Fault faultInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults>(faultInstance, global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults.FaultDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Fault not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region OperationHasFaults instance accessors
		
		/// <summary>
		/// Get any OperationHasFaults links between a given Operation and a Fault.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults> GetLinks( global::Microsoft.Practices.ServiceFactory.ServiceContracts.Operation source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.Fault target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults>();
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults>(source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults.OperationDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults link in links )
			{
				if ( target.Equals(link.Fault) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one OperationHasFaults link between a given Operationand a Fault.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults GetLink( global::Microsoft.Practices.ServiceFactory.ServiceContracts.Operation source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.Fault target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults>(source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults.OperationDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationHasFaults link in links )
			{
				if ( target.Equals(link.Fault) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.ServiceContracts
{
	/// <summary>
	/// DomainRelationship ServiceContractModelHasMessages
	/// Description for
	/// Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("46173368-dadd-4e71-b51f-780ba06e1111")]
	public partial class ServiceContractModelHasMessages : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ServiceContractModelHasMessages domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x46173368, 0xdadd, 0x4e71, 0xb5, 0x1f, 0x78, 0x0b, 0xa0, 0x6e, 0x11, 0x11);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ServiceContractModelHasMessages link in the same Partition as the given ServiceContractModel
		/// </summary>
		/// <param name="source">ServiceContractModel to use as the source of the relationship.</param>
		/// <param name="target">MessageBase to use as the target of the relationship.</param>
		public ServiceContractModelHasMessages(ServiceContractModel source, MessageBase target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ServiceContractModelHasMessages.ServiceContractModelDomainRoleId, source), new DslModeling::RoleAssignment(ServiceContractModelHasMessages.MessageBaseDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ServiceContractModelHasMessages(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ServiceContractModelHasMessages(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ServiceContractModelHasMessages(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ServiceContractModelHasMessages(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ServiceContractModel domain role code
		
		/// <summary>
		/// ServiceContractModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ServiceContractModelDomainRoleId = new global::System.Guid(0xfeb77b0a, 0x97f7, 0x4672, 0x8d, 0x85, 0xa8, 0x89, 0x8c, 0xab, 0x21, 0xc2);
		
		/// <summary>
		/// DomainRole ServiceContractModel
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages.ServiceContractModel
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages/ServiceContractModel.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages/ServiceContractModel.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages/ServiceContractModel.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Messages", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages/ServiceContractModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagateCopyToLinkOnly, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("feb77b0a-97f7-4672-8d85-a8898cab21c2")]
		public virtual ServiceContractModel ServiceContractModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ServiceContractModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ServiceContractModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ServiceContractModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ServiceContractModel of a MessageBase
		/// <summary>
		/// Gets ServiceContractModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ServiceContractModel GetServiceContractModel(MessageBase element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MessageBaseDomainRoleId) as ServiceContractModel;
		}
		
		/// <summary>
		/// Sets ServiceContractModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetServiceContractModel(MessageBase element, ServiceContractModel newServiceContractModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MessageBaseDomainRoleId, newServiceContractModel);
		}
		#endregion
		#region MessageBase domain role code
		
		/// <summary>
		/// MessageBase domain role Id.
		/// </summary>
		public static readonly global::System.Guid MessageBaseDomainRoleId = new global::System.Guid(0x3e9d92a4, 0x46e8, 0x4568, 0x82, 0xec, 0x90, 0x6e, 0x6d, 0x46, 0x08, 0x92);
		
		/// <summary>
		/// DomainRole MessageBase
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages.MessageBase
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages/MessageBase.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages/MessageBase.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages/MessageBase.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ServiceContractModel", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages/MessageBase.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("3e9d92a4-46e8-4568-82ec-906e6d460892")]
		public virtual MessageBase MessageBase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MessageBase)DslModeling::DomainRoleInfo.GetRolePlayer(this, MessageBaseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MessageBaseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Messages of a ServiceContractModel
		/// <summary>
		/// Gets a list of Messages.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MessageBase> GetMessages(ServiceContractModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<MessageBase>, MessageBase>(element, ServiceContractModelDomainRoleId);
		}
		#endregion
		#region ServiceContractModel link accessor
		/// <summary>
		/// Get the list of ServiceContractModelHasMessages links to a ServiceContractModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages> GetLinksToMessages ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel serviceContractModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages>(serviceContractModelInstance, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages.ServiceContractModelDomainRoleId);
		}
		#endregion
		#region MessageBase link accessor
		/// <summary>
		/// Get the ServiceContractModelHasMessages link to a MessageBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages GetLinkToServiceContractModel (global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase messageBaseInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages>(messageBaseInstance, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages.MessageBaseDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MessageBase not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ServiceContractModelHasMessages instance accessors
		
		/// <summary>
		/// Get any ServiceContractModelHasMessages links between a given ServiceContractModel and a MessageBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages> GetLinks( global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages>();
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages>(source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages.ServiceContractModelDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages link in links )
			{
				if ( target.Equals(link.MessageBase) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ServiceContractModelHasMessages link between a given ServiceContractModeland a MessageBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages GetLink( global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages>(source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages.ServiceContractModelDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModelHasMessages link in links )
			{
				if ( target.Equals(link.MessageBase) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.ServiceContracts
{
	/// <summary>
	/// DomainRelationship RequestReferencedByOperation
	/// Description for
	/// Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("8295600c-96eb-44ad-ab6f-8bc00704d9e5")]
	public partial class RequestReferencedByOperation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RequestReferencedByOperation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8295600c, 0x96eb, 0x44ad, 0xab, 0x6f, 0x8b, 0xc0, 0x07, 0x04, 0xd9, 0xe5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RequestReferencedByOperation link in the same Partition as the given MessageBase
		/// </summary>
		/// <param name="source">MessageBase to use as the source of the relationship.</param>
		/// <param name="target">Operation to use as the target of the relationship.</param>
		public RequestReferencedByOperation(MessageBase source, Operation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RequestReferencedByOperation.MessageBaseDomainRoleId, source), new DslModeling::RoleAssignment(RequestReferencedByOperation.OperationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RequestReferencedByOperation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RequestReferencedByOperation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RequestReferencedByOperation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RequestReferencedByOperation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MessageBase domain role code
		
		/// <summary>
		/// MessageBase domain role Id.
		/// </summary>
		public static readonly global::System.Guid MessageBaseDomainRoleId = new global::System.Guid(0x8c611f7e, 0x0ee1, 0x4660, 0x82, 0xc3, 0xa7, 0x29, 0x78, 0xdf, 0x84, 0x52);
		
		/// <summary>
		/// DomainRole MessageBase
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation.MessageBase
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation/MessageBase.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation/MessageBase.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation/MessageBase.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "RequestFor", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation/MessageBase.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8c611f7e-0ee1-4660-82c3-a72978df8452")]
		public virtual MessageBase MessageBase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MessageBase)DslModeling::DomainRoleInfo.GetRolePlayer(this, MessageBaseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MessageBaseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Request of a Operation
		/// <summary>
		/// Gets Request.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MessageBase GetRequest(Operation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, OperationDomainRoleId) as MessageBase;
		}
		
		/// <summary>
		/// Sets Request.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetRequest(Operation element, MessageBase newMessageBase)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, OperationDomainRoleId, newMessageBase);
		}
		#endregion
		#region Operation domain role code
		
		/// <summary>
		/// Operation domain role Id.
		/// </summary>
		public static readonly global::System.Guid OperationDomainRoleId = new global::System.Guid(0x9a1f5b7f, 0x6504, 0x4517, 0x93, 0x1b, 0x6c, 0x5d, 0xe6, 0xf3, 0x90, 0xb1);
		
		/// <summary>
		/// DomainRole Operation
		/// The message that functions as a request to this operation. These values can be
		/// controlled by connecting the messages on the design surface.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation/Operation.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation/Operation.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation/Operation.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Request", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation/Operation.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("9a1f5b7f-6504-4517-931b-6c5de6f390b1")]
		public virtual Operation Operation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Operation)DslModeling::DomainRoleInfo.GetRolePlayer(this, OperationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OperationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access RequestFor of a MessageBase
		/// <summary>
		/// Gets a list of RequestFor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Operation> GetRequestFor(MessageBase element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Operation>, Operation>(element, MessageBaseDomainRoleId);
		}
		#endregion
		#region MessageBase link accessor
		/// <summary>
		/// Get the list of RequestReferencedByOperation links to a MessageBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation> GetLinksToRequestFor ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase messageBaseInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation>(messageBaseInstance, global::Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation.MessageBaseDomainRoleId);
		}
		#endregion
		#region Operation link accessor
		/// <summary>
		/// Get the RequestReferencedByOperation link to a Operation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation GetLinkToRequest (global::Microsoft.Practices.ServiceFactory.ServiceContracts.Operation operationInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation>(operationInstance, global::Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation.OperationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Operation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region RequestReferencedByOperation instance accessors
		
		/// <summary>
		/// Get any RequestReferencedByOperation links between a given MessageBase and a Operation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation> GetLinks( global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.Operation target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation>();
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation>(source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation.MessageBaseDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation link in links )
			{
				if ( target.Equals(link.Operation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RequestReferencedByOperation link between a given MessageBaseand a Operation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation GetLink( global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.Operation target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation>(source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation.MessageBaseDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.RequestReferencedByOperation link in links )
			{
				if ( target.Equals(link.Operation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.ServiceContracts
{
	/// <summary>
	/// DomainRelationship OperationReferencesResponse
	/// Description for
	/// Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("02d27431-b5de-4fed-80f3-ccbd93466f72")]
	public partial class OperationReferencesResponse : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// OperationReferencesResponse domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x02d27431, 0xb5de, 0x4fed, 0x80, 0xf3, 0xcc, 0xbd, 0x93, 0x46, 0x6f, 0x72);
	
				
		/// <summary>
		/// Constructor
		/// Creates a OperationReferencesResponse link in the same Partition as the given Operation
		/// </summary>
		/// <param name="source">Operation to use as the source of the relationship.</param>
		/// <param name="target">MessageBase to use as the target of the relationship.</param>
		public OperationReferencesResponse(Operation source, MessageBase target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(OperationReferencesResponse.OperationDomainRoleId, source), new DslModeling::RoleAssignment(OperationReferencesResponse.MessageBaseDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OperationReferencesResponse(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OperationReferencesResponse(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OperationReferencesResponse(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OperationReferencesResponse(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Operation domain role code
		
		/// <summary>
		/// Operation domain role Id.
		/// </summary>
		public static readonly global::System.Guid OperationDomainRoleId = new global::System.Guid(0x99e92426, 0xc19f, 0x4041, 0x92, 0x77, 0x3f, 0x94, 0x85, 0xac, 0x53, 0x49);
		
		/// <summary>
		/// DomainRole Operation
		/// The message that functions as a response to this operation. These values can be
		/// controlled by connecting the messages on the design surface.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse/Operation.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse/Operation.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse/Operation.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Response", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse/Operation.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("99e92426-c19f-4041-9277-3f9485ac5349")]
		public virtual Operation Operation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Operation)DslModeling::DomainRoleInfo.GetRolePlayer(this, OperationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OperationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ResponseFor of a MessageBase
		/// <summary>
		/// Gets a list of ResponseFor.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Operation> GetResponseFor(MessageBase element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Operation>, Operation>(element, MessageBaseDomainRoleId);
		}
		#endregion
		#region MessageBase domain role code
		
		/// <summary>
		/// MessageBase domain role Id.
		/// </summary>
		public static readonly global::System.Guid MessageBaseDomainRoleId = new global::System.Guid(0xc368ce4e, 0x31cd, 0x4d7a, 0xa6, 0xe8, 0xc8, 0xab, 0xd5, 0xdb, 0x1a, 0x1c);
		
		/// <summary>
		/// DomainRole MessageBase
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse.MessageBase
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse/MessageBase.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse/MessageBase.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse/MessageBase.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ResponseFor", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse/MessageBase.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c368ce4e-31cd-4d7a-a6e8-c8abd5db1a1c")]
		public virtual MessageBase MessageBase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MessageBase)DslModeling::DomainRoleInfo.GetRolePlayer(this, MessageBaseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MessageBaseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Response of a Operation
		/// <summary>
		/// Gets Response.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MessageBase GetResponse(Operation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, OperationDomainRoleId) as MessageBase;
		}
		
		/// <summary>
		/// Sets Response.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetResponse(Operation element, MessageBase newMessageBase)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, OperationDomainRoleId, newMessageBase);
		}
		#endregion
		#region Operation link accessor
		/// <summary>
		/// Get the OperationReferencesResponse link to a Operation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse GetLinkToResponse (global::Microsoft.Practices.ServiceFactory.ServiceContracts.Operation operationInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse>(operationInstance, global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse.OperationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Operation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MessageBase link accessor
		/// <summary>
		/// Get the list of OperationReferencesResponse links to a MessageBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse> GetLinksToResponseFor ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase messageBaseInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse>(messageBaseInstance, global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse.MessageBaseDomainRoleId);
		}
		#endregion
		#region OperationReferencesResponse instance accessors
		
		/// <summary>
		/// Get any OperationReferencesResponse links between a given Operation and a MessageBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse> GetLinks( global::Microsoft.Practices.ServiceFactory.ServiceContracts.Operation source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse>();
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse>(source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse.OperationDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse link in links )
			{
				if ( target.Equals(link.MessageBase) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one OperationReferencesResponse link between a given Operationand a MessageBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse GetLink( global::Microsoft.Practices.ServiceFactory.ServiceContracts.Operation source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse>(source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse.OperationDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.OperationReferencesResponse link in links )
			{
				if ( target.Equals(link.MessageBase) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.ServiceContracts
{
	/// <summary>
	/// DomainRelationship MessageHasMessageParts
	/// Description for
	/// Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ebb784ad-4d26-4df2-81fc-5d4fa935b63b")]
	public partial class MessageHasMessageParts : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MessageHasMessageParts domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xebb784ad, 0x4d26, 0x4df2, 0x81, 0xfc, 0x5d, 0x4f, 0xa9, 0x35, 0xb6, 0x3b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MessageHasMessageParts link in the same Partition as the given MessageBase
		/// </summary>
		/// <param name="source">MessageBase to use as the source of the relationship.</param>
		/// <param name="target">MessagePart to use as the target of the relationship.</param>
		public MessageHasMessageParts(MessageBase source, MessagePart target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MessageHasMessageParts.MessageBaseDomainRoleId, source), new DslModeling::RoleAssignment(MessageHasMessageParts.MessagePartDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MessageHasMessageParts(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MessageHasMessageParts(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MessageHasMessageParts(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MessageHasMessageParts(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MessageBase domain role code
		
		/// <summary>
		/// MessageBase domain role Id.
		/// </summary>
		public static readonly global::System.Guid MessageBaseDomainRoleId = new global::System.Guid(0x7f4f7430, 0x6088, 0x4035, 0xae, 0x29, 0xfb, 0xb5, 0xac, 0x17, 0xcb, 0xd3);
		
		/// <summary>
		/// DomainRole MessageBase
		/// Description for
		/// Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts.MessageBase
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts/MessageBase.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts/MessageBase.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts/MessageBase.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "MessageParts", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts/MessageBase.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7f4f7430-6088-4035-ae29-fbb5ac17cbd3")]
		public virtual MessageBase MessageBase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MessageBase)DslModeling::DomainRoleInfo.GetRolePlayer(this, MessageBaseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MessageBaseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Message of a MessagePart
		/// <summary>
		/// Gets Message.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MessageBase GetMessage(MessagePart element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MessagePartDomainRoleId) as MessageBase;
		}
		
		/// <summary>
		/// Sets Message.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMessage(MessagePart element, MessageBase newMessageBase)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MessagePartDomainRoleId, newMessageBase);
		}
		#endregion
		#region MessagePart domain role code
		
		/// <summary>
		/// MessagePart domain role Id.
		/// </summary>
		public static readonly global::System.Guid MessagePartDomainRoleId = new global::System.Guid(0x5659501f, 0xe9bf, 0x4314, 0xb4, 0x8d, 0x10, 0x8a, 0x17, 0x27, 0x1b, 0x40);
		
		/// <summary>
		/// DomainRole MessagePart
		/// A cross-model reference to the associated data contract type on the data
		/// contract model.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts/MessagePart.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts/MessagePart.Category", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts/MessagePart.Description", typeof(global::Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractDslDomainModel), "Microsoft.Practices.ServiceFactory.ServiceContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Message", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts/MessagePart.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5659501f-e9bf-4314-b48d-108a17271b40")]
		public virtual MessagePart MessagePart
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MessagePart)DslModeling::DomainRoleInfo.GetRolePlayer(this, MessagePartDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MessagePartDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MessageParts of a MessageBase
		/// <summary>
		/// Gets a list of MessageParts.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MessagePart> GetMessageParts(MessageBase element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<MessagePart>, MessagePart>(element, MessageBaseDomainRoleId);
		}
		#endregion
		#region MessageBase link accessor
		/// <summary>
		/// Get the list of MessageHasMessageParts links to a MessageBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts> GetLinksToMessageParts ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase messageBaseInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts>(messageBaseInstance, global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts.MessageBaseDomainRoleId);
		}
		#endregion
		#region MessagePart link accessor
		/// <summary>
		/// Get the MessageHasMessageParts link to a MessagePart.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts GetLinkToMessage (global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessagePart messagePartInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts>(messagePartInstance, global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts.MessagePartDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MessagePart not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MessageHasMessageParts instance accessors
		
		/// <summary>
		/// Get any MessageHasMessageParts links between a given MessageBase and a MessagePart.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts> GetLinks( global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessagePart target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts>();
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts>(source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts.MessageBaseDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts link in links )
			{
				if ( target.Equals(link.MessagePart) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MessageHasMessageParts link between a given MessageBaseand a MessagePart.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts GetLink( global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageBase source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessagePart target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts>(source, global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts.MessageBaseDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.ServiceContracts.MessageHasMessageParts link in links )
			{
				if ( target.Equals(link.MessagePart) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
