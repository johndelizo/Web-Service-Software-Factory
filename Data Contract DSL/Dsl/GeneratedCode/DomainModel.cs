//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;
namespace Microsoft.Practices.ServiceFactory.DataContracts
{
	/// <summary>
	/// DomainModel DataContractDslDomainModel
	/// This is the Data Contract Model for the Web Service Software Factory.
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel.Description", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.CoreDomainModel))]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel))]
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
	[DslModeling::DomainObjectId("f79dc996-e28c-4367-bde9-4e5d7b9a3870")]
	public partial class DataContractDslDomainModel : DslModeling::DomainModel
	{
		#region Constructor, domain model Id
	
		/// <summary>
		/// DataContractDslDomainModel domain model Id.
		/// </summary>
		public static readonly global::System.Guid DomainModelId = new global::System.Guid(0xf79dc996, 0xe28c, 0x4367, 0xbd, 0xe9, 0x4e, 0x5d, 0x7b, 0x9a, 0x38, 0x70);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="store">Store containing the domain model.</param>
		public DataContractDslDomainModel(DslModeling::Store store)
			: base(store, DomainModelId)
		{
			// Call the partial method to allow any required serialization setup to be done.
			this.InitializeSerialization(store);		
		}
		
	
		///<Summary>
		/// Defines a partial method that will be called from the constructor to
		/// allow any necessary serialization setup to be done.
		///</Summary>
		///<remarks>
		/// For a DSL created with the DSL Designer wizard, an implementation of this 
		/// method will be generated in the GeneratedCode\SerializationHelper.cs class.
		///</remarks>
		partial void InitializeSerialization(DslModeling::Store store);
	
	
		#endregion
		#region Domain model reflection
			
		/// <summary>
		/// Gets the list of generated domain model types (classes, rules, relationships).
		/// </summary>
		/// <returns>List of types.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override global::System.Type[] GetGeneratedDomainModelTypes()
		{
			return new global::System.Type[]
			{
				typeof(DataContractModel),
				typeof(DataContract),
				typeof(ModelElementReference),
				typeof(PrimitiveDataType),
				typeof(FaultContract),
				typeof(DataContractBase),
				typeof(DataContractCollection),
				typeof(DataContractEnum),
				typeof(EnumNamedValue),
				typeof(ExtensibleModelElement),
				typeof(DataMember),
				typeof(PrimitiveDataTypeCollection),
				typeof(DataContractCollectionBase),
				typeof(Contract),
				typeof(ReferenceDataType),
				typeof(DataContractEnumHasEnumNamedValues),
				typeof(DataContractModelHasContracts),
				typeof(DataContractHasDataMembers),
				typeof(DataContractBaseCanBeContainedOnContracts),
				typeof(DataContractBaseIsBeingReferenceOnDataContractCollections),
				typeof(FaultContractHasDataMembers),
				typeof(DataContractDiagram),
				typeof(DataContractAggregationConnector),
				typeof(ReferenceConnector),
				typeof(AggregationConnector),
				typeof(DataContractCollectionShape),
				typeof(PrimitiveDataTypeCollectionShape),
				typeof(DataContractCompartmentShape),
				typeof(FaultContractCompartmentShape),
				typeof(DataContractEnumCompartmentShape),
				typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.FixUpDiagram),
				typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.ConnectorRolePlayerChanged),
				typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.CompartmentItemAddRule),
				typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.CompartmentItemDeleteRule),
				typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.CompartmentItemRolePlayerChangeRule),
				typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.CompartmentItemRolePlayerPositionChangeRule),
				typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.CompartmentItemChangeRule),
			};
		}
		/// <summary>
		/// Gets the list of generated domain properties.
		/// </summary>
		/// <returns>List of property data.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override DomainMemberInfo[] GetGeneratedDomainProperties()
		{
			return new DomainMemberInfo[]
			{
				new DomainMemberInfo(typeof(DataContractModel), "ImplementationTechnology", DataContractModel.ImplementationTechnologyDomainPropertyId, typeof(DataContractModel.ImplementationTechnologyPropertyHandler)),
				new DomainMemberInfo(typeof(DataContractModel), "ProjectMappingTable", DataContractModel.ProjectMappingTableDomainPropertyId, typeof(DataContractModel.ProjectMappingTablePropertyHandler)),
				new DomainMemberInfo(typeof(DataContractModel), "Name", DataContractModel.NameDomainPropertyId, typeof(DataContractModel.NamePropertyHandler)),
				new DomainMemberInfo(typeof(DataContractModel), "Namespace", DataContractModel.NamespaceDomainPropertyId, typeof(DataContractModel.NamespacePropertyHandler)),
				new DomainMemberInfo(typeof(ModelElementReference), "ModelElementGuid", ModelElementReference.ModelElementGuidDomainPropertyId, typeof(ModelElementReference.ModelElementGuidPropertyHandler)),
				new DomainMemberInfo(typeof(ModelElementReference), "Type", ModelElementReference.TypeDomainPropertyId, typeof(ModelElementReference.TypePropertyHandler)),
				new DomainMemberInfo(typeof(PrimitiveDataType), "IsNullable", PrimitiveDataType.IsNullableDomainPropertyId, typeof(PrimitiveDataType.IsNullablePropertyHandler)),
				new DomainMemberInfo(typeof(PrimitiveDataType), "Type", PrimitiveDataType.TypeDomainPropertyId, typeof(PrimitiveDataType.TypePropertyHandler)),
				new DomainMemberInfo(typeof(EnumNamedValue), "Value", EnumNamedValue.ValueDomainPropertyId, typeof(EnumNamedValue.ValuePropertyHandler)),
				new DomainMemberInfo(typeof(EnumNamedValue), "Name", EnumNamedValue.NameDomainPropertyId, typeof(EnumNamedValue.NamePropertyHandler)),
				new DomainMemberInfo(typeof(ExtensibleModelElement), "ObjectExtenderContainer", ExtensibleModelElement.ObjectExtenderContainerDomainPropertyId, typeof(ExtensibleModelElement.ObjectExtenderContainerPropertyHandler)),
				new DomainMemberInfo(typeof(ExtensibleModelElement), "Name", ExtensibleModelElement.NameDomainPropertyId, typeof(ExtensibleModelElement.NamePropertyHandler)),
				new DomainMemberInfo(typeof(ExtensibleModelElement), "Remarks", ExtensibleModelElement.RemarksDomainPropertyId, typeof(ExtensibleModelElement.RemarksPropertyHandler)),
				new DomainMemberInfo(typeof(DataMember), "IsDataMember", DataMember.IsDataMemberDomainPropertyId, typeof(DataMember.IsDataMemberPropertyHandler)),
				new DomainMemberInfo(typeof(DataMember), "CollectionType", DataMember.CollectionTypeDomainPropertyId, typeof(DataMember.CollectionTypePropertyHandler)),
				new DomainMemberInfo(typeof(PrimitiveDataTypeCollection), "ItemType", PrimitiveDataTypeCollection.ItemTypeDomainPropertyId, typeof(PrimitiveDataTypeCollection.ItemTypePropertyHandler)),
				new DomainMemberInfo(typeof(Contract), "Namespace", Contract.NamespaceDomainPropertyId, typeof(Contract.NamespacePropertyHandler)),
				new DomainMemberInfo(typeof(ReferenceDataType), "Type", ReferenceDataType.TypeDomainPropertyId, typeof(ReferenceDataType.TypePropertyHandler)),
				new DomainMemberInfo(typeof(DataContractCompartmentShape), "OutlineDashStyle", DataContractCompartmentShape.OutlineDashStyleDomainPropertyId, typeof(DataContractCompartmentShape.OutlineDashStylePropertyHandler)),
				new DomainMemberInfo(typeof(DataContractCompartmentShape), "OutlineThickness", DataContractCompartmentShape.OutlineThicknessDomainPropertyId, typeof(DataContractCompartmentShape.OutlineThicknessPropertyHandler)),
			};
		}
		/// <summary>
		/// Gets the list of generated domain roles.
		/// </summary>
		/// <returns>List of role data.</returns>
		protected sealed override DomainRolePlayerInfo[] GetGeneratedDomainRoles()
		{
			return new DomainRolePlayerInfo[]
			{
				new DomainRolePlayerInfo(typeof(DataContractEnumHasEnumNamedValues), "DataContractEnum", DataContractEnumHasEnumNamedValues.DataContractEnumDomainRoleId),
				new DomainRolePlayerInfo(typeof(DataContractEnumHasEnumNamedValues), "EnumNamedValue", DataContractEnumHasEnumNamedValues.EnumNamedValueDomainRoleId),
				new DomainRolePlayerInfo(typeof(DataContractModelHasContracts), "DataContractModel", DataContractModelHasContracts.DataContractModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(DataContractModelHasContracts), "Contract", DataContractModelHasContracts.ContractDomainRoleId),
				new DomainRolePlayerInfo(typeof(DataContractHasDataMembers), "DataContract", DataContractHasDataMembers.DataContractDomainRoleId),
				new DomainRolePlayerInfo(typeof(DataContractHasDataMembers), "DataMember", DataContractHasDataMembers.DataMemberDomainRoleId),
				new DomainRolePlayerInfo(typeof(DataContractBaseCanBeContainedOnContracts), "DataContractBase", DataContractBaseCanBeContainedOnContracts.DataContractBaseDomainRoleId),
				new DomainRolePlayerInfo(typeof(DataContractBaseCanBeContainedOnContracts), "Contract", DataContractBaseCanBeContainedOnContracts.ContractDomainRoleId),
				new DomainRolePlayerInfo(typeof(DataContractBaseIsBeingReferenceOnDataContractCollections), "DataContractBase", DataContractBaseIsBeingReferenceOnDataContractCollections.DataContractBaseDomainRoleId),
				new DomainRolePlayerInfo(typeof(DataContractBaseIsBeingReferenceOnDataContractCollections), "DataContractCollection", DataContractBaseIsBeingReferenceOnDataContractCollections.DataContractCollectionDomainRoleId),
				new DomainRolePlayerInfo(typeof(FaultContractHasDataMembers), "FaultContract", FaultContractHasDataMembers.FaultContractDomainRoleId),
				new DomainRolePlayerInfo(typeof(FaultContractHasDataMembers), "DataMember", FaultContractHasDataMembers.DataMemberDomainRoleId),
			};
		}
		#endregion
		#region Factory methods
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementMap;
	
		/// <summary>
		/// Creates an element of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementType">Element type which belongs to this domain model.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		public sealed override DslModeling::ModelElement CreateElement(DslModeling::Partition partition, global::System.Type elementType, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementType == null) throw new global::System.ArgumentNullException("elementType");
	
			if (createElementMap == null)
			{
				createElementMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(24);
				createElementMap.Add(typeof(DataContractModel), 0);
				createElementMap.Add(typeof(DataContract), 1);
				createElementMap.Add(typeof(ModelElementReference), 2);
				createElementMap.Add(typeof(PrimitiveDataType), 3);
				createElementMap.Add(typeof(FaultContract), 4);
				createElementMap.Add(typeof(DataContractCollection), 5);
				createElementMap.Add(typeof(DataContractEnum), 6);
				createElementMap.Add(typeof(EnumNamedValue), 7);
				createElementMap.Add(typeof(PrimitiveDataTypeCollection), 8);
				createElementMap.Add(typeof(ReferenceDataType), 9);
				createElementMap.Add(typeof(DataContractDiagram), 10);
				createElementMap.Add(typeof(DataContractAggregationConnector), 11);
				createElementMap.Add(typeof(ReferenceConnector), 12);
				createElementMap.Add(typeof(AggregationConnector), 13);
				createElementMap.Add(typeof(DataContractCollectionShape), 14);
				createElementMap.Add(typeof(PrimitiveDataTypeCollectionShape), 15);
				createElementMap.Add(typeof(DataContractCompartmentShape), 16);
				createElementMap.Add(typeof(FaultContractCompartmentShape), 17);
				createElementMap.Add(typeof(DataContractEnumCompartmentShape), 18);
			}
			int index;
			if (!createElementMap.TryGetValue(elementType, out index))
			{
				// construct exception error message		
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel.SingletonResourceManager.GetString("UnrecognizedElementType"),
								elementType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementType");
			}
			switch (index)
			{
				case 0: return new DataContractModel(partition, propertyAssignments);
				case 1: return new DataContract(partition, propertyAssignments);
				case 2: return new ModelElementReference(partition, propertyAssignments);
				case 3: return new PrimitiveDataType(partition, propertyAssignments);
				case 4: return new FaultContract(partition, propertyAssignments);
				case 5: return new DataContractCollection(partition, propertyAssignments);
				case 6: return new DataContractEnum(partition, propertyAssignments);
				case 7: return new EnumNamedValue(partition, propertyAssignments);
				case 8: return new PrimitiveDataTypeCollection(partition, propertyAssignments);
				case 9: return new ReferenceDataType(partition, propertyAssignments);
				case 10: return new DataContractDiagram(partition, propertyAssignments);
				case 11: return new DataContractAggregationConnector(partition, propertyAssignments);
				case 12: return new ReferenceConnector(partition, propertyAssignments);
				case 13: return new AggregationConnector(partition, propertyAssignments);
				case 14: return new DataContractCollectionShape(partition, propertyAssignments);
				case 15: return new PrimitiveDataTypeCollectionShape(partition, propertyAssignments);
				case 16: return new DataContractCompartmentShape(partition, propertyAssignments);
				case 17: return new FaultContractCompartmentShape(partition, propertyAssignments);
				case 18: return new DataContractEnumCompartmentShape(partition, propertyAssignments);
				default: return null;
			}
		}
	
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementLinkMap;
	
		/// <summary>
		/// Creates an element link of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementLinkType">Element link type which belongs to this domain model.</param>
		/// <param name="roleAssignments">List of relationship role assignments for the new link.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element link.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		public sealed override DslModeling::ElementLink CreateElementLink(DslModeling::Partition partition, global::System.Type elementLinkType, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementLinkType == null) throw new global::System.ArgumentNullException("elementLinkType");
			if (roleAssignments == null) throw new global::System.ArgumentNullException("roleAssignments");
	
			if (createElementLinkMap == null)
			{
				createElementLinkMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(6);
				createElementLinkMap.Add(typeof(DataContractEnumHasEnumNamedValues), 0);
				createElementLinkMap.Add(typeof(DataContractModelHasContracts), 1);
				createElementLinkMap.Add(typeof(DataContractHasDataMembers), 2);
				createElementLinkMap.Add(typeof(DataContractBaseCanBeContainedOnContracts), 3);
				createElementLinkMap.Add(typeof(DataContractBaseIsBeingReferenceOnDataContractCollections), 4);
				createElementLinkMap.Add(typeof(FaultContractHasDataMembers), 5);
			}
			int index;
			if (!createElementLinkMap.TryGetValue(elementLinkType, out index))
			{
				// construct exception error message
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel.SingletonResourceManager.GetString("UnrecognizedElementLinkType"),
								elementLinkType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementLinkType");
			
			}
			switch (index)
			{
				case 0: return new DataContractEnumHasEnumNamedValues(partition, roleAssignments, propertyAssignments);
				case 1: return new DataContractModelHasContracts(partition, roleAssignments, propertyAssignments);
				case 2: return new DataContractHasDataMembers(partition, roleAssignments, propertyAssignments);
				case 3: return new DataContractBaseCanBeContainedOnContracts(partition, roleAssignments, propertyAssignments);
				case 4: return new DataContractBaseIsBeingReferenceOnDataContractCollections(partition, roleAssignments, propertyAssignments);
				case 5: return new FaultContractHasDataMembers(partition, roleAssignments, propertyAssignments);
				default: return null;
			}
		}
		#endregion
		#region Resource manager
		
		private static global::System.Resources.ResourceManager resourceManager;
		
		/// <summary>
		/// The base name of this model's resources.
		/// </summary>
		public const string ResourceBaseName = "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx";
		
		/// <summary>
		/// Gets the DomainModel's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override global::System.Resources.ResourceManager ResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DataContractDslDomainModel.SingletonResourceManager;
			}
		}
	
		/// <summary>
		/// Gets the Singleton ResourceManager for this domain model.
		/// </summary>
		public static global::System.Resources.ResourceManager SingletonResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				if (DataContractDslDomainModel.resourceManager == null)
				{
					DataContractDslDomainModel.resourceManager = new global::System.Resources.ResourceManager(ResourceBaseName, typeof(DataContractDslDomainModel).Assembly);
				}
				return DataContractDslDomainModel.resourceManager;
			}
		}
		#endregion
		#region Copy/Remove closures
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter copyClosure;
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter removeClosure;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override DslModeling::IElementVisitorFilter GetClosureFilter(DslModeling::ClosureType type, global::System.Collections.Generic.ICollection<DslModeling::ModelElement> rootElements)
		{
			switch (type)
			{
				case DslModeling::ClosureType.CopyClosure:
					return DataContractDslDomainModel.CopyClosure;
				case DslModeling::ClosureType.DeleteClosure:
					return DataContractDslDomainModel.DeleteClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter CopyClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (DataContractDslDomainModel.copyClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter copyFilter = new DslModeling::ChainingElementVisitorFilter();
					copyFilter.AddFilter(new DataContractDslCopyClosure());
					copyFilter.AddFilter(new DslModeling::CoreCopyClosure());
					copyFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceCopyClosure());
					
					DataContractDslDomainModel.copyClosure = copyFilter;
				}
				return DataContractDslDomainModel.copyClosure;
			}
		}
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter DeleteClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (DataContractDslDomainModel.removeClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter removeFilter = new DslModeling::ChainingElementVisitorFilter();
					removeFilter.AddFilter(new DataContractDslDeleteClosure());
					removeFilter.AddFilter(new DslModeling::CoreDeleteClosure());
					removeFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceDeleteClosure());
		
					DataContractDslDomainModel.removeClosure = removeFilter;
				}
				return DataContractDslDomainModel.removeClosure;
			}
		}
		#endregion
		#region Diagram rule helpers
		/// <summary>
		/// Enables rules in this domain model related to diagram fixup for the given store.
		/// If diagram data will be loaded into the store, this method should be called first to ensure
		/// that the diagram behaves properly.
		/// </summary>
		public static void EnableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.EnableRule(typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.FixUpDiagram));
			ruleManager.EnableRule(typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.ConnectorRolePlayerChanged));
			ruleManager.EnableRule(typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.CompartmentItemAddRule));
			ruleManager.EnableRule(typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.CompartmentItemDeleteRule));
			ruleManager.EnableRule(typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.CompartmentItemRolePlayerChangeRule));
			ruleManager.EnableRule(typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.CompartmentItemRolePlayerPositionChangeRule));
			ruleManager.EnableRule(typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.CompartmentItemChangeRule));
		}
		
		/// <summary>
		/// Disables rules in this domain model related to diagram fixup for the given store.
		/// </summary>
		public static void DisableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.DisableRule(typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.FixUpDiagram));
			ruleManager.DisableRule(typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.ConnectorRolePlayerChanged));
			ruleManager.DisableRule(typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.CompartmentItemAddRule));
			ruleManager.DisableRule(typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.CompartmentItemDeleteRule));
			ruleManager.DisableRule(typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.CompartmentItemRolePlayerChangeRule));
			ruleManager.DisableRule(typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.CompartmentItemRolePlayerPositionChangeRule));
			ruleManager.DisableRule(typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.CompartmentItemChangeRule));
		}
		#endregion
	}
		
	#region Copy/Remove closure classes
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class DataContractDslDeleteClosure : DataContractDslDeleteClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DataContractDslDeleteClosure() : base()
		{
		}
	}
	
	/// <summary>
	/// Base class for remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class DataContractDslDeleteClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public DataContractDslDeleteClosureBase()
		{
			#region Initialize DomainData Table
			DomainRoles.Add(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues.EnumNamedValueDomainRoleId, true);
			DomainRoles.Add(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts.ContractDomainRoleId, true);
			DomainRoles.Add(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers.DataMemberDomainRoleId, true);
			DomainRoles.Add(global::Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers.DataMemberDomainRoleId, true);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			return DslModeling::VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			if (targetDomainRole == null) throw new global::System.ArgumentNullException("targetDomainRole");
			return this.DomainRoles.Contains(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Specialized.HybridDictionary();
				}
				return this.domainRoles;
			}
		}
	
	}
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class DataContractDslCopyClosure : DataContractDslCopyClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DataContractDslCopyClosure() : base()
		{
		}
	}
	/// <summary>
	/// Base class for copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class DataContractDslCopyClosureBase : DslModeling::CopyClosureFilter, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public DataContractDslCopyClosureBase():base()
		{
		}
	}
	#endregion
		
}
namespace Microsoft.Practices.ServiceFactory.DataContracts
{
	/// <summary>
	/// DomainEnumeration: Multiplicity
	/// Description for Microsoft.Practices.ServiceFactory.DataContracts.Multiplicity
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum Multiplicity
	{
		/// <summary>
		/// Single
		/// Description for
		/// Microsoft.Practices.ServiceFactory.DataContracts.Multiplicity.Single
		/// </summary>
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.DataContracts.Multiplicity/Single.Description", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		Single = 0,
		/// <summary>
		/// Multiple
		/// Description for
		/// Microsoft.Practices.ServiceFactory.DataContracts.Multiplicity.Multiple
		/// </summary>
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.DataContracts.Multiplicity/Multiple.Description", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		Multiple = 2,
	}
}

