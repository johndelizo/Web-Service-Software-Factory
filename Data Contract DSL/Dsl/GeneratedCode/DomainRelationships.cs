//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Microsoft.Practices.ServiceFactory.DataContracts
{
	/// <summary>
	/// DomainRelationship DataContractEnumHasEnumNamedValues
	/// Description for
	/// Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues.Description", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4be12864-5768-498d-8a27-5aa73581b446")]
	public partial class DataContractEnumHasEnumNamedValues : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DataContractEnumHasEnumNamedValues domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4be12864, 0x5768, 0x498d, 0x8a, 0x27, 0x5a, 0xa7, 0x35, 0x81, 0xb4, 0x46);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DataContractEnumHasEnumNamedValues link in the same Partition as the given DataContractEnum
		/// </summary>
		/// <param name="source">DataContractEnum to use as the source of the relationship.</param>
		/// <param name="target">EnumNamedValue to use as the target of the relationship.</param>
		public DataContractEnumHasEnumNamedValues(DataContractEnum source, EnumNamedValue target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DataContractEnumHasEnumNamedValues.DataContractEnumDomainRoleId, source), new DslModeling::RoleAssignment(DataContractEnumHasEnumNamedValues.EnumNamedValueDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DataContractEnumHasEnumNamedValues(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DataContractEnumHasEnumNamedValues(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DataContractEnumHasEnumNamedValues(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DataContractEnumHasEnumNamedValues(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DataContractEnum domain role code
		
		/// <summary>
		/// DataContractEnum domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataContractEnumDomainRoleId = new global::System.Guid(0x2bc152fd, 0x42a6, 0x4af5, 0x9a, 0x68, 0xbc, 0xe8, 0x35, 0x92, 0x43, 0xf6);
		
		/// <summary>
		/// DomainRole DataContractEnum
		/// Description for
		/// Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues.DataContractEnum
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues/DataContractEnum.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues/DataContractEnum.Category", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues/DataContractEnum.Description", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EnumNamedValues", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues/DataContractEnum.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2bc152fd-42a6-4af5-9a68-bce8359243f6")]
		public virtual DataContractEnum DataContractEnum
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataContractEnum)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataContractEnumDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataContractEnumDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DataContractEnum of a EnumNamedValue
		/// <summary>
		/// Gets DataContractEnum.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DataContractEnum GetDataContractEnum(EnumNamedValue element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EnumNamedValueDomainRoleId) as DataContractEnum;
		}
		
		/// <summary>
		/// Sets DataContractEnum.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDataContractEnum(EnumNamedValue element, DataContractEnum newDataContractEnum)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EnumNamedValueDomainRoleId, newDataContractEnum);
		}
		#endregion
		#region EnumNamedValue domain role code
		
		/// <summary>
		/// EnumNamedValue domain role Id.
		/// </summary>
		public static readonly global::System.Guid EnumNamedValueDomainRoleId = new global::System.Guid(0x72493a96, 0xb3ae, 0x4f4c, 0x80, 0x0d, 0xf9, 0xc2, 0x96, 0x59, 0x20, 0xaf);
		
		/// <summary>
		/// DomainRole EnumNamedValue
		/// Description for
		/// Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues.EnumNamedValue
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues/EnumNamedValue.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues/EnumNamedValue.Category", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues/EnumNamedValue.Description", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DataContractEnum", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues/EnumNamedValue.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("72493a96-b3ae-4f4c-800d-f9c2965920af")]
		public virtual EnumNamedValue EnumNamedValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EnumNamedValue)DslModeling::DomainRoleInfo.GetRolePlayer(this, EnumNamedValueDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EnumNamedValueDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EnumNamedValues of a DataContractEnum
		/// <summary>
		/// Gets a list of EnumNamedValues.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EnumNamedValue> GetEnumNamedValues(DataContractEnum element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EnumNamedValue>, EnumNamedValue>(element, DataContractEnumDomainRoleId);
		}
		#endregion
		#region DataContractEnum link accessor
		/// <summary>
		/// Get the list of DataContractEnumHasEnumNamedValues links to a DataContractEnum.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues> GetLinksToEnumNamedValues ( global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnum dataContractEnumInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues>(dataContractEnumInstance, global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues.DataContractEnumDomainRoleId);
		}
		#endregion
		#region EnumNamedValue link accessor
		/// <summary>
		/// Get the DataContractEnumHasEnumNamedValues link to a EnumNamedValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues GetLinkToDataContractEnum (global::Microsoft.Practices.ServiceFactory.DataContracts.EnumNamedValue enumNamedValueInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues>(enumNamedValueInstance, global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues.EnumNamedValueDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EnumNamedValue not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DataContractEnumHasEnumNamedValues instance accessors
		
		/// <summary>
		/// Get any DataContractEnumHasEnumNamedValues links between a given DataContractEnum and a EnumNamedValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues> GetLinks( global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnum source, global::Microsoft.Practices.ServiceFactory.DataContracts.EnumNamedValue target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues>();
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues>(source, global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues.DataContractEnumDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues link in links )
			{
				if ( target.Equals(link.EnumNamedValue) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DataContractEnumHasEnumNamedValues link between a given DataContractEnumand a EnumNamedValue.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues GetLink( global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnum source, global::Microsoft.Practices.ServiceFactory.DataContracts.EnumNamedValue target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues>(source, global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues.DataContractEnumDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnumHasEnumNamedValues link in links )
			{
				if ( target.Equals(link.EnumNamedValue) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.DataContracts
{
	/// <summary>
	/// DomainRelationship DataContractModelHasContracts
	/// Description for
	/// Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts.Description", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e24f9f24-0666-49c9-b9e0-6731e355e922")]
	public partial class DataContractModelHasContracts : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DataContractModelHasContracts domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe24f9f24, 0x0666, 0x49c9, 0xb9, 0xe0, 0x67, 0x31, 0xe3, 0x55, 0xe9, 0x22);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DataContractModelHasContracts link in the same Partition as the given DataContractModel
		/// </summary>
		/// <param name="source">DataContractModel to use as the source of the relationship.</param>
		/// <param name="target">Contract to use as the target of the relationship.</param>
		public DataContractModelHasContracts(DataContractModel source, Contract target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DataContractModelHasContracts.DataContractModelDomainRoleId, source), new DslModeling::RoleAssignment(DataContractModelHasContracts.ContractDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DataContractModelHasContracts(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DataContractModelHasContracts(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DataContractModelHasContracts(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DataContractModelHasContracts(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DataContractModel domain role code
		
		/// <summary>
		/// DataContractModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataContractModelDomainRoleId = new global::System.Guid(0x7d834c44, 0x11e3, 0x4c14, 0xa3, 0x13, 0xe1, 0x15, 0x8b, 0xea, 0xcd, 0xcf);
		
		/// <summary>
		/// DomainRole DataContractModel
		/// Description for
		/// Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts.DataContractModel
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts/DataContractModel.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts/DataContractModel.Category", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts/DataContractModel.Description", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Contracts", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts/DataContractModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7d834c44-11e3-4c14-a313-e1158beacdcf")]
		public virtual DataContractModel DataContractModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataContractModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataContractModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataContractModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DataContractModel of a Contract
		/// <summary>
		/// Gets DataContractModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DataContractModel GetDataContractModel(Contract element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ContractDomainRoleId) as DataContractModel;
		}
		
		/// <summary>
		/// Sets DataContractModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDataContractModel(Contract element, DataContractModel newDataContractModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ContractDomainRoleId, newDataContractModel);
		}
		#endregion
		#region Contract domain role code
		
		/// <summary>
		/// Contract domain role Id.
		/// </summary>
		public static readonly global::System.Guid ContractDomainRoleId = new global::System.Guid(0xb3b2c8c6, 0x6520, 0x493e, 0xad, 0x82, 0x5c, 0xdb, 0x4c, 0x58, 0x0b, 0xa7);
		
		/// <summary>
		/// DomainRole Contract
		/// Description for
		/// Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts.Contract
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts/Contract.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts/Contract.Category", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts/Contract.Description", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DataContractModel", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts/Contract.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b3b2c8c6-6520-493e-ad82-5cdb4c580ba7")]
		public virtual Contract Contract
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Contract)DslModeling::DomainRoleInfo.GetRolePlayer(this, ContractDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ContractDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Contracts of a DataContractModel
		/// <summary>
		/// Gets a list of Contracts.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Contract> GetContracts(DataContractModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Contract>, Contract>(element, DataContractModelDomainRoleId);
		}
		#endregion
		#region DataContractModel link accessor
		/// <summary>
		/// Get the list of DataContractModelHasContracts links to a DataContractModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts> GetLinksToContracts ( global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractModel dataContractModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts>(dataContractModelInstance, global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts.DataContractModelDomainRoleId);
		}
		#endregion
		#region Contract link accessor
		/// <summary>
		/// Get the DataContractModelHasContracts link to a Contract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts GetLinkToDataContractModel (global::Microsoft.Practices.ServiceFactory.DataContracts.Contract contractInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts>(contractInstance, global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts.ContractDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Contract not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DataContractModelHasContracts instance accessors
		
		/// <summary>
		/// Get any DataContractModelHasContracts links between a given DataContractModel and a Contract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts> GetLinks( global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractModel source, global::Microsoft.Practices.ServiceFactory.DataContracts.Contract target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts>();
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts>(source, global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts.DataContractModelDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts link in links )
			{
				if ( target.Equals(link.Contract) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DataContractModelHasContracts link between a given DataContractModeland a Contract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts GetLink( global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractModel source, global::Microsoft.Practices.ServiceFactory.DataContracts.Contract target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts>(source, global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts.DataContractModelDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractModelHasContracts link in links )
			{
				if ( target.Equals(link.Contract) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.DataContracts
{
	/// <summary>
	/// DomainRelationship DataContractHasDataMembers
	/// Description for
	/// Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers.Description", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("865c7878-5838-48b8-ad89-afe533896900")]
	public partial class DataContractHasDataMembers : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DataContractHasDataMembers domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x865c7878, 0x5838, 0x48b8, 0xad, 0x89, 0xaf, 0xe5, 0x33, 0x89, 0x69, 0x00);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DataContractHasDataMembers link in the same Partition as the given DataContract
		/// </summary>
		/// <param name="source">DataContract to use as the source of the relationship.</param>
		/// <param name="target">DataMember to use as the target of the relationship.</param>
		public DataContractHasDataMembers(DataContract source, DataMember target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DataContractHasDataMembers.DataContractDomainRoleId, source), new DslModeling::RoleAssignment(DataContractHasDataMembers.DataMemberDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DataContractHasDataMembers(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DataContractHasDataMembers(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DataContractHasDataMembers(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DataContractHasDataMembers(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DataContract domain role code
		
		/// <summary>
		/// DataContract domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataContractDomainRoleId = new global::System.Guid(0x8c7b6548, 0x289a, 0x4d45, 0x8c, 0x5c, 0x3d, 0x86, 0x56, 0x9e, 0x58, 0xf2);
		
		/// <summary>
		/// DomainRole DataContract
		/// A reference to a data contract shape that represents this collection’s type.
		/// When this value is defined, a connector will associate the two shapes on the
		/// design surface.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers/DataContract.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers/DataContract.Category", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers/DataContract.Description", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DataMembers", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers/DataContract.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8c7b6548-289a-4d45-8c5c-3d86569e58f2")]
		public virtual DataContract DataContract
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataContract)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataContractDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataContractDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DataContract of a DataMember
		/// <summary>
		/// Gets DataContract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DataContract GetDataContract(DataMember element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DataMemberDomainRoleId) as DataContract;
		}
		
		/// <summary>
		/// Sets DataContract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDataContract(DataMember element, DataContract newDataContract)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DataMemberDomainRoleId, newDataContract);
		}
		#endregion
		#region DataMember domain role code
		
		/// <summary>
		/// DataMember domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataMemberDomainRoleId = new global::System.Guid(0x13d406e6, 0x6ea2, 0x4236, 0x86, 0x06, 0xff, 0xe8, 0xbf, 0x89, 0x9b, 0x1b);
		
		/// <summary>
		/// DomainRole DataMember
		/// Description for
		/// Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers.DataMember
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers/DataMember.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers/DataMember.Category", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers/DataMember.Description", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DataContract", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers/DataMember.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("13d406e6-6ea2-4236-8606-ffe8bf899b1b")]
		public virtual DataMember DataMember
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataMember)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataMemberDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataMemberDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DataMembers of a DataContract
		/// <summary>
		/// Gets a list of DataMembers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DataMember> GetDataMembers(DataContract element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DataMember>, DataMember>(element, DataContractDomainRoleId);
		}
		#endregion
		#region DataContract link accessor
		/// <summary>
		/// Get the list of DataContractHasDataMembers links to a DataContract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers> GetLinksToDataMembers ( global::Microsoft.Practices.ServiceFactory.DataContracts.DataContract dataContractInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers>(dataContractInstance, global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers.DataContractDomainRoleId);
		}
		#endregion
		#region DataMember link accessor
		/// <summary>
		/// Get the DataContractHasDataMembers link to a DataMember.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers GetLinkToDataContract (global::Microsoft.Practices.ServiceFactory.DataContracts.DataMember dataMemberInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers>(dataMemberInstance, global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers.DataMemberDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DataMember not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DataContractHasDataMembers instance accessors
		
		/// <summary>
		/// Get any DataContractHasDataMembers links between a given DataContract and a DataMember.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers> GetLinks( global::Microsoft.Practices.ServiceFactory.DataContracts.DataContract source, global::Microsoft.Practices.ServiceFactory.DataContracts.DataMember target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers>();
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers>(source, global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers.DataContractDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers link in links )
			{
				if ( target.Equals(link.DataMember) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DataContractHasDataMembers link between a given DataContractand a DataMember.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers GetLink( global::Microsoft.Practices.ServiceFactory.DataContracts.DataContract source, global::Microsoft.Practices.ServiceFactory.DataContracts.DataMember target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers>(source, global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers.DataContractDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractHasDataMembers link in links )
			{
				if ( target.Equals(link.DataMember) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.DataContracts
{
	/// <summary>
	/// DomainRelationship DataContractBaseCanBeContainedOnContracts
	/// Description for
	/// Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseCanBeContainedOnContracts
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseCanBeContainedOnContracts.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseCanBeContainedOnContracts.Description", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("9945a887-c2ba-4161-bcc3-84584e4cd36c")]
	public partial class DataContractBaseCanBeContainedOnContracts : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DataContractBaseCanBeContainedOnContracts domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9945a887, 0xc2ba, 0x4161, 0xbc, 0xc3, 0x84, 0x58, 0x4e, 0x4c, 0xd3, 0x6c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DataContractBaseCanBeContainedOnContracts link in the same Partition as the given DataContractBase
		/// </summary>
		/// <param name="source">DataContractBase to use as the source of the relationship.</param>
		/// <param name="target">Contract to use as the target of the relationship.</param>
		public DataContractBaseCanBeContainedOnContracts(DataContractBase source, Contract target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DataContractBaseCanBeContainedOnContracts.DataContractBaseDomainRoleId, source), new DslModeling::RoleAssignment(DataContractBaseCanBeContainedOnContracts.ContractDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DataContractBaseCanBeContainedOnContracts(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DataContractBaseCanBeContainedOnContracts(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DataContractBaseCanBeContainedOnContracts(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DataContractBaseCanBeContainedOnContracts(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DataContractBase domain role code
		
		/// <summary>
		/// DataContractBase domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataContractBaseDomainRoleId = new global::System.Guid(0xd4fb32b7, 0xe696, 0x4892, 0x8a, 0x27, 0xe4, 0x1c, 0xdd, 0x8e, 0x15, 0x25);
		
		/// <summary>
		/// DomainRole DataContractBase
		/// Description for
		/// Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseCanBeContainedOnContracts.DataContractBase
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseCanBeContainedOnContracts/DataContractBase.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseCanBeContainedOnContracts/DataContractBase.Category", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseCanBeContainedOnContracts/DataContractBase.Description", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Contracts", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseCanBeContainedOnContracts/DataContractBase.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d4fb32b7-e696-4892-8a27-e41cdd8e1525")]
		public virtual DataContractBase DataContractBase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataContractBase)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataContractBaseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataContractBaseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DataContractElements of a Contract
		/// <summary>
		/// Gets a list of DataContractElements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DataContractBase> GetDataContractElements(Contract element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DataContractBase>, DataContractBase>(element, ContractDomainRoleId);
		}
		#endregion
		#region Contract domain role code
		
		/// <summary>
		/// Contract domain role Id.
		/// </summary>
		public static readonly global::System.Guid ContractDomainRoleId = new global::System.Guid(0xd9f0ffca, 0xdae8, 0x47c0, 0xbb, 0xc6, 0x2b, 0x76, 0x38, 0x2d, 0x4f, 0x92);
		
		/// <summary>
		/// DomainRole Contract
		/// Description for
		/// Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseCanBeContainedOnContracts.Contract
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseCanBeContainedOnContracts/Contract.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseCanBeContainedOnContracts/Contract.Category", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseCanBeContainedOnContracts/Contract.Description", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DataContractElements", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseCanBeContainedOnContracts/Contract.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d9f0ffca-dae8-47c0-bbc6-2b76382d4f92")]
		public virtual Contract Contract
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Contract)DslModeling::DomainRoleInfo.GetRolePlayer(this, ContractDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ContractDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Contracts of a DataContractBase
		/// <summary>
		/// Gets a list of Contracts.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Contract> GetContracts(DataContractBase element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Contract>, Contract>(element, DataContractBaseDomainRoleId);
		}
		#endregion
		#region DataContractBase link accessor
		/// <summary>
		/// Get the list of DataContractBaseCanBeContainedOnContracts links to a DataContractBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseCanBeContainedOnContracts> GetLinksToContracts ( global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBase dataContractBaseInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseCanBeContainedOnContracts>(dataContractBaseInstance, global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseCanBeContainedOnContracts.DataContractBaseDomainRoleId);
		}
		#endregion
		#region Contract link accessor
		/// <summary>
		/// Get the list of DataContractBaseCanBeContainedOnContracts links to a Contract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseCanBeContainedOnContracts> GetLinksToDataContractElements ( global::Microsoft.Practices.ServiceFactory.DataContracts.Contract contractInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseCanBeContainedOnContracts>(contractInstance, global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseCanBeContainedOnContracts.ContractDomainRoleId);
		}
		#endregion
		#region DataContractBaseCanBeContainedOnContracts instance accessors
		
		/// <summary>
		/// Get any DataContractBaseCanBeContainedOnContracts links between a given DataContractBase and a Contract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseCanBeContainedOnContracts> GetLinks( global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBase source, global::Microsoft.Practices.ServiceFactory.DataContracts.Contract target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseCanBeContainedOnContracts> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseCanBeContainedOnContracts>();
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseCanBeContainedOnContracts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseCanBeContainedOnContracts>(source, global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseCanBeContainedOnContracts.DataContractBaseDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseCanBeContainedOnContracts link in links )
			{
				if ( target.Equals(link.Contract) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.DataContracts
{
	/// <summary>
	/// DomainRelationship DataContractBaseIsBeingReferenceOnDataContractCollections
	/// Description for
	/// Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections.Description", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("43328c47-57c3-4017-9c01-66b6a2b45c42")]
	public partial class DataContractBaseIsBeingReferenceOnDataContractCollections : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DataContractBaseIsBeingReferenceOnDataContractCollections domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x43328c47, 0x57c3, 0x4017, 0x9c, 0x01, 0x66, 0xb6, 0xa2, 0xb4, 0x5c, 0x42);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DataContractBaseIsBeingReferenceOnDataContractCollections link in the same Partition as the given DataContractBase
		/// </summary>
		/// <param name="source">DataContractBase to use as the source of the relationship.</param>
		/// <param name="target">DataContractCollection to use as the target of the relationship.</param>
		public DataContractBaseIsBeingReferenceOnDataContractCollections(DataContractBase source, DataContractCollection target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DataContractBaseIsBeingReferenceOnDataContractCollections.DataContractBaseDomainRoleId, source), new DslModeling::RoleAssignment(DataContractBaseIsBeingReferenceOnDataContractCollections.DataContractCollectionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DataContractBaseIsBeingReferenceOnDataContractCollections(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DataContractBaseIsBeingReferenceOnDataContractCollections(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DataContractBaseIsBeingReferenceOnDataContractCollections(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DataContractBaseIsBeingReferenceOnDataContractCollections(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DataContractBase domain role code
		
		/// <summary>
		/// DataContractBase domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataContractBaseDomainRoleId = new global::System.Guid(0x6b9d4acc, 0xbc0c, 0x4d88, 0xb8, 0xd0, 0x7e, 0xee, 0x05, 0xd6, 0xf4, 0x40);
		
		/// <summary>
		/// DomainRole DataContractBase
		/// Description for
		/// Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections.DataContractBase
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections/DataContractBase.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections/DataContractBase.Category", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections/DataContractBase.Description", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DataContractCollections", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections/DataContractBase.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6b9d4acc-bc0c-4d88-b8d0-7eee05d6f440")]
		public virtual DataContractBase DataContractBase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataContractBase)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataContractBaseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataContractBaseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DataContract of a DataContractCollection
		/// <summary>
		/// Gets DataContract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DataContractBase GetDataContract(DataContractCollection element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DataContractCollectionDomainRoleId) as DataContractBase;
		}
		
		/// <summary>
		/// Sets DataContract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDataContract(DataContractCollection element, DataContractBase newDataContractBase)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DataContractCollectionDomainRoleId, newDataContractBase);
		}
		#endregion
		#region DataContractCollection domain role code
		
		/// <summary>
		/// DataContractCollection domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataContractCollectionDomainRoleId = new global::System.Guid(0xef08d2a1, 0xb33c, 0x4a10, 0x9b, 0x6f, 0xa6, 0xaa, 0x99, 0xee, 0x58, 0x06);
		
		/// <summary>
		/// DomainRole DataContractCollection
		/// Description for
		/// Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections.DataContractCollection
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections/DataContractCollection.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections/DataContractCollection.Category", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections/DataContractCollection.Description", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DataContract", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections/DataContractCollection.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("ef08d2a1-b33c-4a10-9b6f-a6aa99ee5806")]
		public virtual DataContractCollection DataContractCollection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataContractCollection)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataContractCollectionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataContractCollectionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DataContractCollections of a DataContractBase
		/// <summary>
		/// Gets a list of DataContractCollections.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DataContractCollection> GetDataContractCollections(DataContractBase element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DataContractCollection>, DataContractCollection>(element, DataContractBaseDomainRoleId);
		}
		#endregion
		#region DataContractBase link accessor
		/// <summary>
		/// Get the list of DataContractBaseIsBeingReferenceOnDataContractCollections links to a DataContractBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections> GetLinksToDataContractCollections ( global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBase dataContractBaseInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections>(dataContractBaseInstance, global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections.DataContractBaseDomainRoleId);
		}
		#endregion
		#region DataContractCollection link accessor
		/// <summary>
		/// Get the DataContractBaseIsBeingReferenceOnDataContractCollections link to a DataContractCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections GetLinkToDataContract (global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractCollection dataContractCollectionInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections>(dataContractCollectionInstance, global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections.DataContractCollectionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DataContractCollection not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DataContractBaseIsBeingReferenceOnDataContractCollections instance accessors
		
		/// <summary>
		/// Get any DataContractBaseIsBeingReferenceOnDataContractCollections links between a given DataContractBase and a DataContractCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections> GetLinks( global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBase source, global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractCollection target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections>();
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections>(source, global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections.DataContractBaseDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections link in links )
			{
				if ( target.Equals(link.DataContractCollection) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DataContractBaseIsBeingReferenceOnDataContractCollections link between a given DataContractBaseand a DataContractCollection.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections GetLink( global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBase source, global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractCollection target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections>(source, global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections.DataContractBaseDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractBaseIsBeingReferenceOnDataContractCollections link in links )
			{
				if ( target.Equals(link.DataContractCollection) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.DataContracts
{
	/// <summary>
	/// DomainRelationship FaultContractHasDataMembers
	/// Description for
	/// Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers.Description", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("40410903-3e65-4c16-9b27-16edad397c71")]
	public partial class FaultContractHasDataMembers : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FaultContractHasDataMembers domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x40410903, 0x3e65, 0x4c16, 0x9b, 0x27, 0x16, 0xed, 0xad, 0x39, 0x7c, 0x71);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FaultContractHasDataMembers link in the same Partition as the given FaultContract
		/// </summary>
		/// <param name="source">FaultContract to use as the source of the relationship.</param>
		/// <param name="target">DataMember to use as the target of the relationship.</param>
		public FaultContractHasDataMembers(FaultContract source, DataMember target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FaultContractHasDataMembers.FaultContractDomainRoleId, source), new DslModeling::RoleAssignment(FaultContractHasDataMembers.DataMemberDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FaultContractHasDataMembers(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FaultContractHasDataMembers(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FaultContractHasDataMembers(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FaultContractHasDataMembers(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FaultContract domain role code
		
		/// <summary>
		/// FaultContract domain role Id.
		/// </summary>
		public static readonly global::System.Guid FaultContractDomainRoleId = new global::System.Guid(0xae9c5707, 0xe70a, 0x406d, 0x82, 0xf4, 0xbb, 0x44, 0x1e, 0xb9, 0xad, 0x33);
		
		/// <summary>
		/// DomainRole FaultContract
		/// Description for
		/// Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers.FaultContract
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers/FaultContract.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers/FaultContract.Category", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers/FaultContract.Description", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DataMembers", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers/FaultContract.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ae9c5707-e70a-406d-82f4-bb441eb9ad33")]
		public virtual FaultContract FaultContract
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FaultContract)DslModeling::DomainRoleInfo.GetRolePlayer(this, FaultContractDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FaultContractDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FaultContract of a DataMember
		/// <summary>
		/// Gets FaultContract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FaultContract GetFaultContract(DataMember element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DataMemberDomainRoleId) as FaultContract;
		}
		
		/// <summary>
		/// Sets FaultContract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFaultContract(DataMember element, FaultContract newFaultContract)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DataMemberDomainRoleId, newFaultContract);
		}
		#endregion
		#region DataMember domain role code
		
		/// <summary>
		/// DataMember domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataMemberDomainRoleId = new global::System.Guid(0x37ffe634, 0xfb9e, 0x4697, 0x9f, 0x80, 0xed, 0x52, 0x72, 0x87, 0x6b, 0x49);
		
		/// <summary>
		/// DomainRole DataMember
		/// Description for
		/// Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers.DataMember
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers/DataMember.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers/DataMember.Category", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers/DataMember.Description", typeof(global::Microsoft.Practices.ServiceFactory.DataContracts.DataContractDslDomainModel), "Microsoft.Practices.ServiceFactory.DataContracts.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FaultContract", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers/DataMember.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("37ffe634-fb9e-4697-9f80-ed5272876b49")]
		public virtual DataMember DataMember
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataMember)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataMemberDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataMemberDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DataMembers of a FaultContract
		/// <summary>
		/// Gets a list of DataMembers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DataMember> GetDataMembers(FaultContract element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DataMember>, DataMember>(element, FaultContractDomainRoleId);
		}
		#endregion
		#region FaultContract link accessor
		/// <summary>
		/// Get the list of FaultContractHasDataMembers links to a FaultContract.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers> GetLinksToDataMembers ( global::Microsoft.Practices.ServiceFactory.DataContracts.FaultContract faultContractInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers>(faultContractInstance, global::Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers.FaultContractDomainRoleId);
		}
		#endregion
		#region DataMember link accessor
		/// <summary>
		/// Get the FaultContractHasDataMembers link to a DataMember.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers GetLinkToFaultContract (global::Microsoft.Practices.ServiceFactory.DataContracts.DataMember dataMemberInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers>(dataMemberInstance, global::Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers.DataMemberDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DataMember not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FaultContractHasDataMembers instance accessors
		
		/// <summary>
		/// Get any FaultContractHasDataMembers links between a given FaultContract and a DataMember.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers> GetLinks( global::Microsoft.Practices.ServiceFactory.DataContracts.FaultContract source, global::Microsoft.Practices.ServiceFactory.DataContracts.DataMember target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers>();
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers>(source, global::Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers.FaultContractDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers link in links )
			{
				if ( target.Equals(link.DataMember) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FaultContractHasDataMembers link between a given FaultContractand a DataMember.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers GetLink( global::Microsoft.Practices.ServiceFactory.DataContracts.FaultContract source, global::Microsoft.Practices.ServiceFactory.DataContracts.DataMember target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers>(source, global::Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers.FaultContractDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.DataContracts.FaultContractHasDataMembers link in links )
			{
				if ( target.Equals(link.DataMember) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
