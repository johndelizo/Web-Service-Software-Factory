<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ Dsl processor="DslDirectiveProcessor" requires="fileName='..\..\DslDefinition.dsl'" #>
<#@ output extension=".cs" #>
<#
//***************************************************************************
//
//    Copyright (c) Microsoft Corporation. All rights reserved.
//    This code is licensed under the MICROSOFT VISUAL STUDIO 2010
///   DOMAIN SPECIFIC LANGUAGES SOFTWARE DEVELOPMENT KIT, BETA license terms.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//***************************************************************************

// WARNING
// This code can be used for MICROSOFT VISUAL STUDIO 2010 Beta1. In future releases
// part of it will be integrated to the DSL Tools runtime
string dslName = this.Dsl.Name;
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using Microsoft.VisualStudio.Modeling;
using Microsoft.VisualStudio.Modeling.Integration;

namespace <#= this.Dsl.Namespace #>
{	/// <summary>
	/// Customised serialization behaviour: add in a custom property serializer to 
	/// serialize ModelBusReference properties.
	/// </summary>
	partial class <#= dslName #>SerializationBehavior
	{
		private List<DomainXmlTypeSerializerDirectoryEntry> serializers;

		public override ReadOnlyCollection<DomainXmlTypeSerializerDirectoryEntry> AllPropertySerializers
		{
			get
			{
				if (serializers == null)
				{
					serializers = new List<DomainXmlTypeSerializerDirectoryEntry>();
					serializers.AddRange(base.AllPropertySerializers);
					serializers.Add(new DomainXmlTypeSerializerDirectoryEntry(typeof(ModelBusReference), typeof(ModelBusReferencePropertySerializer)));
				}

				return serializers.AsReadOnly(); ;
			}
		}
	}	

	// partial implementation of the SerializationHelper
	partial class <#= dslName #>SerializationHelper
	{
		/// <summary>
		/// Initialize the serialization context on load / save
		/// </summary>
		/// <remarks>We need to supply a model bus for ModelBusReference deserialization to work</remarks>
		protected override void InitializeSerializationContext(Partition partition, SerializationContext serializationContext, bool isLoading)
		{
			Debug.Assert(partition != null, "partition should not be null");
			Debug.Assert(serializationContext != null, "serializationContext should not be null");

			IModelBus modelbus = partition.Store.GetService(typeof(SModelBus)) as IModelBus;
			serializationContext[Microsoft.VisualStudio.Modeling.Integration.ModelBusReferencePropertySerializer.ModelBusLoadContextKey] = modelbus;
		}	
	}	
}