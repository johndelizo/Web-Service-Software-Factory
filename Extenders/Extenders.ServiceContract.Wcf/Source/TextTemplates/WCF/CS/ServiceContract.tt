<#@ Template Language="C#" Inherits="Microsoft.Practices.Modeling.CodeGeneration.Strategies.TextTemplating.ModelingTextTransformation" #>
<#@ Import Namespace="System.Text" #>
<#@ Import Namespace="System.Globalization" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.Xml.Serialization" #>
<#@ Import Namespace="System.Runtime.Serialization" #>
<#@ Import Namespace="Microsoft.Practices.ServiceFactory.ServiceContracts" #>
<#@ Import Namespace="Microsoft.Practices.ServiceFactory.DataContracts" #>
<#@ Import Namespace="Microsoft.Practices.ServiceFactory.Extenders.DataContract.Wcf" #>
<#@ Import Namespace="Microsoft.VisualStudio.Modeling" #>
<#@ Import Namespace="Microsoft.Practices.ServiceFactory.Description" #>
<#@ Import Namespace="Microsoft.Practices.Modeling.CodeGeneration.Strategies" #>
<#@ Import Namespace="Microsoft.VisualStudio.Modeling.Integration" #>
<#@ Assembly Name="Microsoft.Practices.ServiceFactory.DataContracts.Dsl" #>
<#@ Assembly Name="Microsoft.Practices.ServiceFactory.Extenders.DataContract.Wcf" #>
<#@ Assembly Name="Microsoft.Practices.ServiceFactory.ServiceContracts.Dsl" #>
<#@ Assembly Name="Microsoft.Practices.ServiceFactory.Description" #>
<#@ Assembly Name="System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ ModelInjector processor="ModelInjectorDirectiveProcessor" #>
<#@ include file="Lib\TextTemplates\WCF\CS\ServiceContractWcfCommon.tt" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Net.Security;
using WCF = global::System.ServiceModel;

namespace <#=CurrentExtender.ArtifactLink.Namespace#>
{
	/// <summary>
	/// Service Contract Class - <#= CurrentElement.Name #>
	/// </summary><#=AddRemarks(CurrentElement, "\r\n\t")#>
	[WCF::ServiceContract(Namespace = "<#= CurrentElement.Namespace #>", Name = "<#= CurrentElement.Name #>", SessionMode = WCF::SessionMode.<#=CurrentExtender.SessionMode.ToString()#>, ProtectionLevel = ProtectionLevel.<#=CurrentExtender.ProtectionLevel.ToString()#> )]<#=ResolveXmlSerializerFormatAttribute()#>
	public partial interface <#= CurrentExtender.ServiceContractName #> 
	{
		<# foreach (Operation operationInfo in CurrentElement.Operations) 
		{
			if (operationInfo.Faults.Count!=0)
			{
				foreach(Fault faultContract in operationInfo.Faults)
				{
		#>
[WCF::FaultContract(typeof(<#= ResolveFaultTypeAndAddProjectReference(faultContract) #>))]
		<#
				}
			}
			WCFOperationContract wcfOperationInfo = GetObjectExtender<WCFOperationContract>(operationInfo);
			string replyAction = !string.IsNullOrEmpty(wcfOperationInfo.ReplyAction) ? ", ReplyAction = \"" + wcfOperationInfo.ReplyAction + "\"" : "";
			if (!wcfOperationInfo.AsyncPattern)
			{#>
[WCF::OperationContract(IsTerminating = <#=wcfOperationInfo.IsTerminating.ToString().ToLowerInvariant()#>, IsInitiating = <#=wcfOperationInfo.IsInitiating.ToString().ToLowerInvariant()#>, IsOneWay = <#=operationInfo.IsOneWay.ToString().ToLowerInvariant()#>, AsyncPattern = <#=wcfOperationInfo.AsyncPattern.ToString().ToLowerInvariant()#>, Action = "<#=operationInfo.Action#>"<#=replyAction#>, ProtectionLevel = <#=GetProtectionLevel(wcfOperationInfo)#>)]<#=ResolveServiceKnownTypeAttribute(operationInfo)#><#=AddRemarks(operationInfo, "\r\n\t\t")#>
		<#= GetResponseElement(operationInfo.Response) #> <#=operationInfo.Name#>(<#= GetRequestElement(operationInfo.Request) #>);
		
<#}
			else
			{#>
[WCF::OperationContract(IsTerminating = <#=wcfOperationInfo.IsTerminating.ToString().ToLowerInvariant()#>, IsInitiating = <#=wcfOperationInfo.IsInitiating.ToString().ToLowerInvariant()#>, IsOneWay = <#=operationInfo.IsOneWay.ToString().ToLowerInvariant()#>, AsyncPattern = <#=wcfOperationInfo.AsyncPattern.ToString().ToLowerInvariant()#>, Action = "<#=operationInfo.Action#>"<#=replyAction#>, ProtectionLevel = <#=GetProtectionLevel(wcfOperationInfo)#>)]<#=ResolveServiceKnownTypeAttribute(operationInfo)#><#=AddRemarks(operationInfo, "\r\n\t\t")#>
		IAsyncResult Begin<#=operationInfo.Name#>(<#= GetRequestElement(operationInfo.Request,UseComma.Yes) #>AsyncCallback callback, object state);
		<#= GetResponseElement(operationInfo.Response) #> End<#=operationInfo.Name#>(IAsyncResult result);
		
<#}
		} // end foreach
#>
	}
}

<#+
	private string GetProtectionLevel(WCFOperationContract operation)
	{
		return string.Concat("ProtectionLevel.", operation.ProtectionLevel.ToString());
	}
	
	private string ResolveServiceKnownTypeAttribute(Operation operationInfo)
	{
		string returnValue = "";
		if(operationInfo.Request != null && operationInfo.Request is XsdMessage)
		{
			XsdMessage message = (XsdMessage)operationInfo.Request;
			returnValue += ResolveServiceKnownTypeAttribute(message, null);
		}
		
		if(operationInfo.Response != null && operationInfo.Response is XsdMessage)
		{
			XsdMessage message = (XsdMessage)operationInfo.Response;
			returnValue += ResolveServiceKnownTypeAttribute(message, returnValue);			
		}
		
		return returnValue;
	}
	
	private string ResolveServiceKnownTypeAttribute(XsdMessage message, string previous)
	{
		string returnValue = "";

		WCFXsdMessageContract wfcXsdMc = GetObjectExtender<WCFXsdMessageContract>(message);
		if (wfcXsdMc != null)
		{
			foreach(string type in XmlSchemaUtility.GetBaseTypesFromReferencedType(message.Element, wfcXsdMc.XsdMessageContractElementArtifactLink))
			{
				if(previous == null || !previous.Contains(type))
				{
					returnValue += string.Format("\r\n\t\t[System.ServiceModel.ServiceKnownTypeAttribute(typeof({0}))]", type);
				}
			}
			if(returnValue != "")
			{
				AddProjectReference(wfcXsdMc.XsdMessageContractElementArtifactLink);
			}
		}		
		return returnValue;
	}
#>