<#@ Template Language="C#" Inherits="Microsoft.Practices.Modeling.CodeGeneration.Strategies.TextTemplating.ModelingTextTransformation" #>
<#@ Import Namespace="System.Text" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.Xml.Serialization" #>
<#@ Import Namespace="System.Runtime.Serialization" #>
<#@ Import Namespace="System.EnterpriseServices" #>
<#@ Import Namespace="Microsoft.Practices.ServiceFactory.ServiceContracts" #>
<#@ Import Namespace="Microsoft.Practices.ServiceFactory.DataContracts" #>
<#@ Import Namespace="Microsoft.Practices.ServiceFactory.Extenders.DataContract.Asmx" #>
<#@ Import Namespace="Microsoft.VisualStudio.Modeling" #>
<#@ Import Namespace="Microsoft.Practices.ServiceFactory.Description" #>
<#@ Import Namespace="Microsoft.VisualStudio.Modeling.Integration" #>
<#@ Assembly Name="Microsoft.Practices.ServiceFactory.DataContracts.Dsl" #>
<#@ Assembly Name="Microsoft.Practices.ServiceFactory.ServiceContracts.Dsl" #>
<#@ Assembly Name="Microsoft.Practices.ServiceFactory.Extenders.DataContract.Asmx" #>
<#@ Assembly Name="System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" #>
<#@ Assembly Name="Microsoft.Practices.ServiceFactory.Description" #>
<#@ ModelInjector processor="ModelInjectorDirectiveProcessor" #>
<#@ include file="Lib\TextTemplates\ASMX\CS\ServiceContractAsmcCommon.tt" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using ASMX = System.Web.Services;
using System.EnterpriseServices;

namespace <#=CurrentExtender.ArtifactLink.Namespace#>
{
	/// <summary>
	/// Service Contract Class - <#= CurrentElement.Name #>
	/// </summary><#=AddRemarks(CurrentElement, "\r\n\t")#>
	// IMPORTANT: The Namespace parameter of the System.Web.Services.WebService attribute 
	// cannot be used to control the XML Namespace of Web Service interfaces.
	// The attribute must be applied to a class which implements the service contract interface.
	[ASMX::WebService(Namespace = "<#= CurrentElement.Namespace #>", Name = "<#= CurrentElement.Name #>")]
	[ASMX::WebServiceBinding(ConformsTo = ASMX::WsiProfiles.BasicProfile1_1, EmitConformanceClaims = true, Name = "<#= CurrentElement.Name #>")]
	public partial interface I<#= CurrentElement.Name #> 
	{
<#
		foreach(Operation operation in CurrentElement.Operations)
		{
#>
		[ASMX::WebMethod(Description = "<#= BuildDescriptionProperty(operation)#>", EnableSession = <#= BuildEnableSessionProperty(operation) #>, TransactionOption = <#= BuildTransactionOptionProperty(operation) #>)]
		[ASMX::Protocols.SoapDocumentMethod(Action = "<#= BuildActionProperty(CurrentElement, operation) #>", ParameterStyle = ASMX::Protocols.SoapParameterStyle.Wrapped)]<#=AddRemarks(operation, "\r\n\t\t")#>
		<#= GetResponseElement(operation.Response) #> <#= operation.Name #>(<#= GetRequestElement(operation.Request) #>);

<#		} // close Operations foreach
#>
	}
}
<#+
	private string BuildDescriptionProperty(Operation operation)
	{
 		AsmxOperationContract extender = GetObjectExtender<AsmxOperationContract>(operation);
		return extender.Description ?? String.Empty;
	}
	
	private string BuildEnableSessionProperty(Operation operation)
	{
 		AsmxOperationContract extender = GetObjectExtender<AsmxOperationContract>(operation);
		return extender.EnableSession.ToString().ToLower();
	}
    
	private string BuildTransactionOptionProperty(Operation operation)
	{
 		AsmxOperationContract extender = GetObjectExtender<AsmxOperationContract>(operation);
		return "TransactionOption." + extender.TransactionOption.ToString();
	}
	
	/*
		Operation.Name (cannot be null)		xyz			xyz			xyz			xyz
		ServiceContract.Namespace			<empty>		abc			<empty>		abc			
		Operation.Action					<empty>		<empty>		lmn			lmn
		
		Action =							xyz			abc/xyz		lmn			abc/lmn
	*/
	
	private string BuildActionProperty(ModelElement currentElement, Operation operation)
	{
		string value = String.Empty;
		
		if (!String.IsNullOrEmpty(CurrentElement.Namespace))
		{
			value += CurrentElement.Namespace + (CurrentElement.Namespace.EndsWith("/")? string.Empty : "/") ;
		}
		if (!String.IsNullOrEmpty(operation.Action))
		{
			if (Uri.IsWellFormedUriString(operation.Action, UriKind.Absolute)) 
			{
				value = operation.Action;
			}
			else
			{
				value += operation.Action;
			}
		}
		else
		{
			value += operation.Name;
		}
		return value;
	}
#>