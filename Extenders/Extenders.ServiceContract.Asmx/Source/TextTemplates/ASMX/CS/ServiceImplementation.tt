<#@ Template Language="C#" Inherits="Microsoft.Practices.Modeling.CodeGeneration.Strategies.TextTemplating.ModelingTextTransformation" #>
<#@ Import Namespace="System" #>
<#@ Import Namespace="System.Text" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.Xml.Serialization" #>
<#@ Import Namespace="System.Runtime.Serialization" #>
<#@ Import Namespace="Microsoft.Practices.ServiceFactory.ServiceContracts" #>
<#@ Import Namespace="Microsoft.Practices.ServiceFactory.DataContracts" #>
<#@ Import Namespace="Microsoft.Practices.ServiceFactory.Extenders.DataContract.Asmx" #>
<#@ Import Namespace="Microsoft.VisualStudio.Modeling" #>
<#@ Import Namespace="Microsoft.Practices.ServiceFactory.Description" #>
<#@ Import Namespace="Microsoft.VisualStudio.Modeling.Integration" #>
<#@ Assembly Name="Microsoft.Practices.ServiceFactory.DataContracts.Dsl" #>
<#@ Assembly Name="Microsoft.Practices.ServiceFactory.ServiceContracts.Dsl" #>
<#@ Assembly Name="Microsoft.Practices.ServiceFactory.Extenders.DataContract.Asmx" #>
<#@ Assembly Name="Microsoft.Practices.ServiceFactory.Description" #>
<#@ ModelInjector processor="ModelInjectorDirectiveProcessor" #>
<#@ include file="Lib\TextTemplates\ASMX\CS\ServiceContractAsmcCommon.tt" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Text;
using ASMX = System.Web.Services;

namespace <#= CurrentExtender.ArtifactLink.Namespace #>
{
	/// <summary>
	/// Service Class - <#= CurrentElement.Name #>
	/// </summary><#=AddRemarks(CurrentElement, "\r\n\t")#>
	[ASMX::WebService(Namespace = "<#= CurrentElement.Namespace #>", Name = "<#= CurrentElement.Name #>")]
	[ASMX::WebServiceBinding(ConformsTo = ASMX::WsiProfiles.BasicProfile1_1, EmitConformanceClaims = true, Name = "<#= CurrentElement.Name #>")]
	public abstract class <#= CurrentElement.Name #>Base : System.Web.Services.WebService<#= BuildInheritedServiceContract(CurrentElement.ServiceContract) #>
	{
<#
		if (CurrentElement.ServiceContract != null) {
#>
		#region <#= CurrentElement.ServiceContract.Name #> Members
<#
		foreach(Operation operation in CurrentElement.ServiceContract.Operations)
		{
#>

		<#=AddRemarks(operation, "\r\n\t\t", true)#>public virtual <#= GetResponseElement(operation.Response) #> <#= operation.Name #>(<#= GetRequestElement(operation.Request) #>)
		{
			<#= GetImplementation(operation) #>
		}

<#		} // close Operations foreach
#>
		#endregion		
<#
	} // end if
#>		
	}
	
	<#=AddRemarks(CurrentElement, "\r\n\t", true)#>[ASMX::WebService(Namespace = "<#= CurrentElement.Namespace #>", Name = "<#= CurrentElement.Name #>")]
	public partial class <#= CurrentElement.Name #> : <#= CurrentElement.Name #>Base
	{
	}
	
}
<#+
	private string BuildInheritedServiceContract(ServiceContract serviceContract)
	{
		if (serviceContract == null)
		{
			return string.Empty;
		}
		else
		{
			return ", " + ResolveServiceContractNameAndAddProjectRef(serviceContract);
		}
	}
	
	private string GetImplementation(Operation operation)
	{
		string result = string.Empty;
		if(operation.Faults.Count > 0)
		{
			string nl = "\r\n\t\t\t"; 
			result = "// The Fault associated to this operation should be returned " + nl + 
					 "// serialized into a SoapException like the following example:" + nl + 
					 "//" + nl +
					 "// MyFault fault = new MyFault();" + nl + 
					 "// fill all properties of the fault " + nl +  
					 "// throw GenerateSoapException(\"fault description\", fault);" + nl + "//" + nl +
					 "// where GenerateSoapException will serialize the fault and will wrap it inside the SoapException;" + nl +
					 "// Sample code from GenerateSoapException function:" + nl + 
					 "//" + nl +
					 "// XmlSerializer serializer = new XmlSerializer(fault.GetType());" + nl + 
					 "// XmlDocument doc = new XmlDocument();" + nl +
					 "// MemoryStream stream = new MemoryStream();" + nl +
					 "// using (XmlTextWriter writer = new XmlTextWriter(stream, Encoding.Default));" + nl +
					 "// {" + nl + 
					 "//	serializer.Serialize(writer, fault);" + nl +
					 "//	stream.Position = 0;" + nl +
					 "//	doc.Load(stream);" + nl +
					 "// }" + nl +
					 "// XmlNode detailNode = doc.CreateNode(XmlNodeType.Element, \"detail\", \"\");" + nl +
					 "// detailNode.AppendChild((XmlNode)doc.DocumentElement);" + nl +
					 "// return new SoapException(message, SoapException.ServerFaultCode, \"\", detailNode);" + nl +
					 "// " + nl +
					 "// For the client side, on the service caller ErrorHandler we may add the following:" + nl +
					 "// try" + nl +
					 "// {" + nl +
					 "//   service call here" + nl +
					 "// }" + nl +
					 "// catch (SoapException se)" + nl +
					 "// {" + nl +
					 "//    FaultContract1 fault = DeserializeDetail<FaultContract1>(se.Detail);" + nl +
					 "// }" + nl +
					 "// " + nl +
					 "// The deserialize function:" + nl +
					 "// private T DeserializeDetail<T>(XmlNode detail)" + nl +
					 "// {" + nl +
					 "//    if (detail == null)" + nl +
					 "//    {" + nl +
					 "//		return default(T);" + nl +
					 "//    }" + nl +
					 "//    XmlSerializer serializer = new XmlSerializer(typeof(T));" + nl +
					 "//    using (XmlNodeReader reader = new XmlNodeReader(detail.FirstChild))" + nl +
					 "//    {" + nl +
					 "//    	return (T)serializer.Deserialize(reader);" + nl +
					 "//    }" + nl +
					 "// }" + nl;
		}
		return result + (operation.Response != null ? "return null;" : string.Empty);
	}
#>