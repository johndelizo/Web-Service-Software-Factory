<#@ Template Language="C#" Inherits="Microsoft.Practices.Modeling.CodeGeneration.Strategies.TextTemplating.ModelingTextTransformation" #>
<#@ Import Namespace="System" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.Collections.ObjectModel" #>
<#@ Import Namespace="System.Xml.Serialization" #>
<#@ Import Namespace="Microsoft.Practices.ServiceFactory.DataContracts" #>
<#@ Import Namespace="Microsoft.VisualStudio.Modeling" #>
<#@ Import Namespace="Microsoft.VisualStudio.Modeling.Integration" #>
<#@ ModelInjector processor="ModelInjectorDirectiveProcessor" #>
<#@ include file="Lib\TextTemplates\Asmx\CS\DataContractAsmxCommon.tt" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Xml.Serialization;

namespace <#=CurrentExtender.ArtifactLink.Namespace#>
{
	/// <summary>
	/// Data Contract Class - <#= CurrentElement.Name #>
	/// </summary><#=AddRemarks(CurrentElement, "\r\n\t")#>
	[Serializable]
	[XmlType(AnonymousType=true, Namespace = "<#= CurrentElement.Namespace #>")]
	[XmlRoot(Namespace = "<#= CurrentElement.Namespace #>", IsNullable = false)]
	public partial class <#= CurrentElement.Name #> <#= GetCollectionType() #>
	{
	}
}

<#+
private string GetCollectionType()
{
	string itemType = null;	

	if(CurrentExtender.ModelElement is PrimitiveDataTypeCollection)
	{
		itemType = ((PrimitiveDataTypeCollection)CurrentExtender.ModelElement).ItemType;
	} 
	if(CurrentExtender.ModelElement is DataContractCollection)
	{
	    DataContractBase dc = ((DataContractCollection)CurrentExtender.ModelElement).DataContract;
	    if(dc != null)
	    {
			itemType = dc.Name;
		}
	}
	
	if(itemType == null)
	{
		return "";
	}

	// Filter for the collection types that are not allowed for this scenario	
	Type collectionType = CurrentExtender.CollectionType;
	
	if(collectionType == typeof(Array) ||
	   collectionType == typeof(Dictionary<,>))
	{
		// fallback to a valid collection type
		collectionType = typeof(Collection<>);
		// Send the warning
		Warning(string.Format("The collectionType {0} is not valid in this context. This type will be replaced by {1}",
		CurrentExtender.CollectionType.FullName, collectionType.FullName));  
	}	
	
	return ": " + Utility.GetCSharpTypeDeclaration(collectionType, itemType);
}
#>
