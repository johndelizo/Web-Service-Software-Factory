<#@ Template Language="C#" Inherits="Microsoft.Practices.Modeling.CodeGeneration.Strategies.TextTemplating.ModelingTextTransformation" #>
<#@ Import Namespace="System" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.Collections.ObjectModel" #>
<#@ Import Namespace="System.Xml.Serialization" #>
<#@ Import Namespace="Microsoft.Practices.ServiceFactory.DataContracts" #>
<#@ Import Namespace="Microsoft.Practices.ServiceFactory.Extenders.DataContract.Asmx" #>
<#@ Import Namespace="Microsoft.VisualStudio.Modeling" #>
<#@ Import Namespace="Microsoft.VisualStudio.Modeling.Integration" #>
<#@ ModelInjector processor="ModelInjectorDirectiveProcessor" #>
<#@ include file="Lib\TextTemplates\Asmx\CS\DataContractAsmxCommon.tt" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Xml.Serialization;

namespace <#=CurrentExtender.ArtifactLink.Namespace#>
{
	/// <summary>
	/// Data Contract Class - <#= CurrentElement.Name #>
	/// </summary><#=AddRemarks(CurrentElement, "\r\n\t")#>
	[Serializable]
	[XmlRoot(Namespace = "<#= CurrentElement.Namespace #>", IsNullable = false)]
	public partial class <#= CurrentElement.Name #> 
	{
<# 
	bool generateOrder = false;
	AsmxDataContract contract = GetObjectExtender<AsmxDataContract>(CurrentElement);

	if(contract != null)
	{
		generateOrder = contract.OrderParts;
	}
	else
	{
		AsmxFaultContract contract1 = GetObjectExtender<AsmxFaultContract>(CurrentElement);		
		generateOrder = contract1.OrderParts;
	}

	foreach(DataMember member in CurrentElement.DataMembers)
	{ 			
		PopulateMemberVars(member, generateOrder);
		if( memberType != null )
		{				
	#>		private <#= memberType #> <#= memberPrivateName #>;
<#
		} // closes if  
	} // closes foreach

	foreach(DataMember member in CurrentElement.DataMembers)
	{ 	
		PopulateMemberVars(member, generateOrder);
		if( memberType != null )
		{
#>
		<#=AddRemarks(member, "\r\n\t")#><#= memberAttribute #>
		public <#= memberType #> <#= memberName #>
		{
		  get { return <#= memberPrivateName #>; }
		  set { <#= memberPrivateName #> = value; }
		}				
<#
		} // closes if
    } // closes foreach
#>
	}
}

<#+
private	string memberType = null;
private	string memberName = null; 
private	string memberPrivateName = null; 
private string memberAttribute = null;

private void PopulateMemberVars(DataMember member, bool generateOrder)
{
	string dataElementAttrInfo = "";
	string orderAttr = "";
    bool isCollection = false;
    
	if (member is PrimitiveDataType)
	{
		PrimitiveDataType pde = (PrimitiveDataType)member;
		
		if(pde.CollectionType == null)
		{
			memberType = Utility.GetCSharpTypeOutput(pde.Type, pde.IsNullable);
		}
		else
		{
			memberType = GetCollectionType(pde);
		}
		
		dataElementAttrInfo = ", IsNullable = " + pde.IsNullable.ToString().ToLowerInvariant();
		isCollection = (pde.CollectionType != null);
	}
	else if (member is ModelElementReference)
	{
		ModelElementReference dcde = (ModelElementReference)member;		
		memberType = Utility.GetCSharpTypeDeclaration(dcde.CollectionType, dcde.Type);
		isCollection = IsCollectionElement(dcde.Type);
	}									
	else if (member is ReferenceDataType)
	{
		ReferenceDataType rdt = (ReferenceDataType)member;
		memberType = ResolveTypeAndAddProjectReference(rdt.Type);
	}

    AsmxDataElement dateElementInfo = GetObjectExtender<AsmxDataElement>(member);
 
   	if(generateOrder)
	{
	    if(dateElementInfo != null)
	    {
			orderAttr = "Order = " + dateElementInfo.Order.ToString();
			dataElementAttrInfo += ", " + orderAttr;
	    }
	}
    
	memberName = member.Name;
	memberPrivateName = Utility.ToCamelCase(memberName);  
	if(member.IsDataMember)
	{
		memberAttribute = isCollection ? "\r\n\t\t[XmlArray("+ orderAttr +")]\r\n\t\t[XmlArrayItem(ElementName = \"" + memberName + "\"" + dataElementAttrInfo + ")]" : 
										 "\r\n\t\t[XmlElement(ElementName = \"" + memberName + "\"" + dataElementAttrInfo + ")]";						
	}
	else
	{
		memberAttribute = "[XmlIgnore]";
	}
}

private bool IsCollectionElement(string memberType)
{
	Contract found = CurrentElement.DataContractModel.Contracts.Find(delegate(Contract contract)
	{
		return contract.Name == memberType;
	});
	return (found != null && found is DataContractCollectionBase);
}

private string GetCollectionType(PrimitiveDataType pde)
{
	// Filter for the collection types that are not allowed for this scenario	
	Type collectionType = pde.CollectionType;

	if(collectionType == typeof(Dictionary<,>))
	{
		// fallback to a valid collection type
		collectionType = typeof(Collection<>);
		// Send the warning
		Warning(string.Format("The collectionType {0} is not valid in this context. This type will be replaced by {1}",
		pde.CollectionType.FullName, collectionType.FullName));  
	}	
	
	if(pde.IsNullable && Utility.CanBeNullable(pde.Type))
	{
		return Utility.GetCSharpTypeDeclaration(collectionType, Utility.GetCSharpTypeOutput(pde.Type, pde.IsNullable));
	}
	else
	{
		return Utility.GetCSharpTypeDeclaration(collectionType, pde.Type);
	}
}
#>