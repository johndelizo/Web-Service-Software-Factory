<#@ Template Debug="true" Language="C#" Inherits="Microsoft.Practices.Modeling.CodeGeneration.Strategies.TextTemplating.ModelingTextTransformation" #>
<#@ Import Namespace="System" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.Collections.ObjectModel" #>
<#@ Import Namespace="System.Xml.Serialization" #>
<#@ Import Namespace="System.Runtime.Serialization" #>
<#@ Import Namespace="Microsoft.Practices.ServiceFactory.DataContracts" #>
<#@ Import Namespace="Microsoft.Practices.ServiceFactory.Extenders.DataContract.Wcf" #>
<#@ Import Namespace="Microsoft.VisualStudio.Modeling" #>
<#@ Import Namespace="Microsoft.VisualStudio.Modeling.Integration" #>
<#@ ModelInjector processor="ModelInjectorDirectiveProcessor" #>
<#@ include file="Lib\TextTemplates\WCF\CS\DataContractWcfCommon.tt" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using WcfSerialization = global::System.Runtime.Serialization;

namespace <#=CurrentExtender.ArtifactLink.Namespace#>
{
	/// <summary>
	/// Data Contract Class - <#= CurrentElement.Name #>
	/// </summary><#=AddRemarks(CurrentElement, "\r\n\t")#>	
	[WcfSerialization::DataContract(Namespace = "<#= CurrentElement.Namespace #>", Name = "<#= CurrentElement.Name #>")]<#= BuildKnownTypeAttributes() #>
	public partial class <#= CurrentElement.Name #> 
	{
<# 
	foreach(DataMember member in CurrentElement.DataMembers)
	{ 	
		PopulateMemberVars(member);
		if( memberType != null )
		{				
	#>		private <#= memberType #> <#= memberPrivateName #>;
<#
		} // closes if  
	} // closes foreach

	foreach(DataMember member in CurrentElement.DataMembers)
	{ 	
		PopulateMemberVars(member);
		if( memberType != null )
		{
#>
		<#=AddRemarks(member, "\r\n\t\t")#><#= memberAttribute #>
		public <#= memberType #> <#= memberName #>
		{
		  get { return <#= memberPrivateName #>; }
		  set { <#= memberPrivateName #> = value; }
		}				
<#
		} // closes if
    } // closes foreach
#>
	}
}

<#+
private	string memberType = null;
private	string memberName = null; 
private	string memberPrivateName = null; 
private string memberAttribute = null;

private void PopulateMemberVars(DataMember member)
{
	string dataElementAttrInfo = "";
	
	if (member is PrimitiveDataType)
	{
		PrimitiveDataType pde = (PrimitiveDataType)member;
		
		if(pde.CollectionType == null)
		{
			memberType = Utility.GetCSharpTypeOutput(pde.Type, pde.IsNullable);
		}
		else
		{
			if(pde.IsNullable && Utility.CanBeNullable(pde.Type))
			{
				memberType = Utility.GetCSharpTypeDeclaration(pde.CollectionType, Utility.GetCSharpTypeOutput(pde.Type, pde.IsNullable));
			}
			else
			{
				memberType = Utility.GetCSharpTypeDeclaration(pde.CollectionType, pde.Type);
			}
		}
	}
	else if (member is ModelElementReference)
	{
		ModelElementReference dcde = (ModelElementReference)member;		
		memberType = Utility.GetCSharpTypeDeclaration(dcde.CollectionType, dcde.Type);
	}									
	else if (member is ReferenceDataType)
	{
		ReferenceDataType rdt = (ReferenceDataType)member;
		memberType = ResolveTypeAndAddProjectReference(rdt.Type);
	}

    WCFDataElement dateElementInfo = GetObjectExtender<WCFDataElement>(member);
    if(dateElementInfo != null && member.IsDataMember)
    {
		dataElementAttrInfo = ", IsRequired = " + dateElementInfo.IsRequired.ToString().ToLowerInvariant() + ", Order = " + dateElementInfo.Order.ToString();
    }

	memberName = member.Name;
	memberPrivateName = Utility.ToCamelCase(memberName);  
	memberAttribute = member.IsDataMember ? "\r\n\t\t[WcfSerialization::DataMember(Name = \"" + memberName + "\"" + dataElementAttrInfo + ")]" : String.Empty;								
}

private string BuildKnownTypeAttributes()
{	
	string attribute = String.Empty;
	
	foreach(DataMember member in CurrentElement.DataMembers)
	{
		ModelElementReference reference = member as ModelElementReference;
		if (reference != null &&
			reference.IsDataMember)
		{
			Contract found = CurrentElement.DataContractModel.Contracts.Find(delegate(Contract contract)
			{
				return contract.Name == reference.Type;
			});
			if (found != null && found is DataContractEnum)
			{
				attribute += string.Format("{0}	[WcfSerialization::KnownType(typeof({1}))]", Environment.NewLine, reference.Type);
			}
		}
	}
	
	return attribute;
}

#>