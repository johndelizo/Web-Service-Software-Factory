<#@ Template Language="C#" Inherits="Microsoft.Practices.Modeling.CodeGeneration.Strategies.TextTemplating.ModelingTextTransformation" #>
<#@ Import Namespace="System" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.Collections.ObjectModel" #>
<#@ Import Namespace="System.Xml.Serialization" #>
<#@ Import Namespace="System.Runtime.Serialization" #>
<#@ Import Namespace="Microsoft.Practices.ServiceFactory.DataContracts" #>
<#@ Import Namespace="Microsoft.Practices.ServiceFactory.Extenders.DataContract.Wcf" #>
<#@ Import Namespace="Microsoft.VisualStudio.Modeling" #>
<#@ Import Namespace="Microsoft.VisualStudio.Modeling.Integration" #>
<#@ ModelInjector processor="ModelInjectorDirectiveProcessor" #>
<#@ include file="Lib\TextTemplates\WCF\CS\DataContractWcfCommon.tt" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using WcfSerialization = global::System.Runtime.Serialization;

namespace <#=CurrentExtender.ArtifactLink.Namespace#>
{
	/// <summary>
	/// Data Contract Enum - <#= CurrentElement.Name #>
	/// </summary><#=AddRemarks(CurrentElement, "\r\n\t")#>
	[WcfSerialization::DataContract(Namespace = "<#= CurrentElement.Namespace #>", Name = "<#= CurrentElement.Name #>")]
	public enum <#= CurrentElement.Name #> 
	{
<# 
		int index = 0;
		foreach(EnumNamedValue member in CurrentElement.EnumNamedValues)
		{ #>
		
		[WcfSerialization::EnumMember<#= GetEnumMemberAttributes(member) #>]
		<#=member.Name#> = <#=index++#>,		
<#	    } // closes foreach #>
	}
}

<#+

private string GetEnumMemberAttributes(EnumNamedValue enumElement) 
{
	string attributeLine = string.Empty;
	if (!string.IsNullOrEmpty(enumElement.Value)) 
	{
		attributeLine = "(Value=\"" + enumElement.Value + "\")";
	}
	
	return attributeLine;
}

#>