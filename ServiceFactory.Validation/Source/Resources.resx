<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AsmxExtensionInvalidSerializerMessage" xml:space="preserve">
    <value>The Asmx Extension doesn't support the Data Contract Serializer.</value>
  </data>
  <data name="ClassHasDefaultConstructorValidatorMessage" xml:space="preserve">
    <value>The class '{0}' has no default constructor.</value>
  </data>
  <data name="CollectionTypeValidatorMessage" xml:space="preserve">
    <value>The DataContract's '{0}' Collection Type property has an invalid value. Dictionary collection is not supported in ASMX because it is not XML Serializable.</value>
  </data>
  <data name="CrossDataContractModelTIandPMTValidator" xml:space="preserve">
    <value>The element '{0}' has a reference to a Data Contract Model with no Implementation Technology or Project Mapping Table associated</value>
  </data>
  <data name="CrossServiceContractModelTIandPMTValidator" xml:space="preserve">
    <value>The Service {0} is referencing a Service Contract Model with no Implementation Technology or Project Mapping Table associated</value>
  </data>
  <data name="DataContractDataElementCollectionValidatorMessage" xml:space="preserve">
    <value>All Data Members on DataContract '{0}' must have unique names and also differ from the DataContract Name.</value>
  </data>
  <data name="DataContractEnumDataElementCollectionValidatorMessage" xml:space="preserve">
    <value>All values on DataContract '{0}' must have unique names and also differ from the DataContractEnum Name.</value>
  </data>
  <data name="DefaultModelName" xml:space="preserve">
    <value>the model</value>
  </data>
  <data name="DirectoryEmptyValidatorMessage" xml:space="preserve">
    <value>Directory is not empty.</value>
  </data>
  <data name="DirectoryExistsValidatorMessage" xml:space="preserve">
    <value>Directory does not exist.</value>
  </data>
  <data name="EmptyCollectionValidatorMessage" xml:space="preserve">
    <value>Collection is empty.</value>
  </data>
  <data name="FaultCollectionCrossModelValidatorMessage" xml:space="preserve">
    <value>There is a mismatch between the Implementation Technology and the Data Contract Model referenced by the DataContractFault '{0}' in the Operation '{1}'.</value>
  </data>
  <data name="FaultContractDataElementCollectionValidatorMessage" xml:space="preserve">
    <value>All Data Members on FaultContract '{0}' must have unique names that differ from the FaultContract Name.</value>
  </data>
  <data name="FaultInvalidSerializerMessage" xml:space="preserve">
    <value>The Operation '{0}' contains DataContractFault '{1}' that references a DCM with ASMX extension. Faults cannot be XMLSerializable.</value>
  </data>
  <data name="FileExistsValidatorMessage" xml:space="preserve">
    <value>The file does not exists.</value>
  </data>
  <data name="FileExtensionValidatorMessage" xml:space="preserve">
    <value>The file does not have the required extension: '{0}'.</value>
  </data>
  <data name="FileNameLengthValidatorMessage" xml:space="preserve">
    <value>Invalid file length.</value>
  </data>
  <data name="IdentifierValidatorUnknownLanguage" xml:space="preserve">
    <value>Unknown language.</value>
  </data>
  <data name="ImplementationTechnologyAndSerializerModelValidatorMessage" xml:space="preserve">
    <value>There is a mismatch between the implementation technology and the serializer type on the ServiceContractModel</value>
  </data>
  <data name="ImplementationTechnologyAndSerializerValidatorMessage" xml:space="preserve">
    <value>There is a mismatch between the implementation technology on the DataContract being reference on the MessagePart {0} and the serializer type</value>
  </data>
  <data name="InvalidExtensionAndSerializerCrossModelMessage" xml:space="preserve">
    <value>You must use the DataContractSerializer on the Service Contract model since there are message contracts on the Service contract model referencing a Data Contract Model which uses the WCF extender</value>
  </data>
  <data name="InvalidLanguageIdentifier" xml:space="preserve">
    <value>The provided identifier is invalid for this language.</value>
  </data>
  <data name="InvalidUriValidatorMessage" xml:space="preserve">
    <value>Uri is invalid.</value>
  </data>
  <data name="IsWrappedValidatorMessage" xml:space="preserve">
    <value>The Message '{0}' cannot have the property 'IsWrapped' set to false and contain more than one Message Part.</value>
  </data>
  <data name="MessagePartElementCollectionValidatorMessage" xml:space="preserve">
    <value>All MessageParts on Message '{0}' must have unique names that differ from the Message Name. </value>
  </data>
  <data name="ModelReferenceValidator_NoDis" xml:space="preserve">
    <value>Unable to load DSL Integration Service.</value>
  </data>
  <data name="ModelReferenceValidatorMessage" xml:space="preserve">
    <value>The {0} property on {1} '{2}' must refer to an existing model element.</value>
  </data>
  <data name="NonEmptyDataContractCollectionBaseCollectionTypeValidator" xml:space="preserve">
    <value>The DataContractCollection '{0}' cannot contain an empty '{1}' property.</value>
  </data>
  <data name="NonEmptyDataContractValidator" xml:space="preserve">
    <value>The DataContractCollection '{0}' DataContract property is not set.</value>
  </data>
  <data name="NonEmptyNamespaceValidator" xml:space="preserve">
    <value>The DataContract '{0}' Namespace property is empty.</value>
  </data>
  <data name="NonEmptyStringValidatorMessage" xml:space="preserve">
    <value>String must not be empty.</value>
  </data>
  <data name="NonRecursiveDataContractValidator" xml:space="preserve">
    <value>The DataContractCollection '{0}' DataContract property points to itself or a graph recursion was detected.</value>
  </data>
  <data name="NonUniqueProxyNameValidatorMessage" xml:space="preserve">
    <value>One or more service references have the same name and are mapped to the same project. {0}</value>
  </data>
  <data name="NonUniqueServiceReferenceNameValidatorMessage" xml:space="preserve">
    <value>One or more service references have the same name and are mapped to the same project. {0}</value>
  </data>
  <data name="NotCompliantWithDataContractSerializerMessage" xml:space="preserve">
    <value>The file name '{0}' is not compliant with the DataContractSerializer</value>
  </data>
  <data name="OnlyOneEmptyAddressMessage" xml:space="preserve">
    <value>The ServiceReference '{0}' contains more that one Endpoint with an empty address.</value>
  </data>
  <data name="OnlyOneTrueValuePropertyMessage" xml:space="preserve">
    <value>The Service Contract contains more than one Operation Contract with the property {0} set to true</value>
  </data>
  <data name="OperationElementCollectionValidatorMessage" xml:space="preserve">
    <value>All Operations on ServiceContract '{0}' must have unique names that differ from the ServiceContract Name.</value>
  </data>
  <data name="OperationElementValidatorMessage" xml:space="preserve">
    <value>Operation '{0}' cannot have {1} set to true and have a Response message or Faults or ReplyAction value.</value>
  </data>
  <data name="ProjectDoesntExistMessage" xml:space="preserve">
    <value>The project being referenced in '{0}' doesn't exists on the solution.</value>
  </data>
  <data name="ProjectItemIsUniqueValidatorMessage" xml:space="preserve">
    <value>The specified file already exists in this project.</value>
  </data>
  <data name="ReservedSystemWordsFileNameValidatorMessage" xml:space="preserve">
    <value>File name not allowed.</value>
  </data>
  <data name="ServiceAndServiceImplementationTechnologyCrossModelValidator" xml:space="preserve">
    <value>The Service {0} is referencing a Service Contract Model with a different Implementation Technology</value>
  </data>
  <data name="UniqueMessagePartsCollectionValidatorMessage" xml:space="preserve">
    <value>All message parts for Message contracts on the service contract model should have different names if their types are different when using XMLSerilizer with WCF extender and the messages are not wrapped.</value>
  </data>
  <data name="UniqueOrderPropertyCollectionValidator" xml:space="preserve">
    <value>All the DataElements in the DataContractCollection '{0}' must have a unique '{1}' property.</value>
  </data>
  <data name="UniquePropertyCollectionValidatorMessage" xml:space="preserve">
    <value>Collection '{0}' contains items with the same {1} property.</value>
  </data>
  <data name="UniquePropertyValueNotAssigned" xml:space="preserve">
    <value>The property '{1}' of the object '{0}' has not been assigned or does not exists.</value>
  </data>
  <data name="XsdElementCollectionValidatorMessage" xml:space="preserve">
    <value>All Parts on XsdMessage '{0}' must have unique names that differ from the XsdMessage Name.</value>
  </data>
  <data name="XsdElementFaultCollectionValidatoryMessage" xml:space="preserve">
    <value>The Operation '{0}' contains the XsdElementFault '{1}' which is only supported for DataContractSerializer.</value>
  </data>
  <data name="XsdElementInvalidFilePathMessage" xml:space="preserve">
    <value>The XsdElementMessagePart '{0}' refers to the file name '{1}' which does not exist in the schema directory '{2}'.</value>
  </data>
  <data name="XsdElementInvalidOrEmptySchemaMessage" xml:space="preserve">
    <value>No code will be generated for the element '{0}'. Verify that the schema file '{1}' contains valid types or select another serializer type. </value>
  </data>
  <data name="XsdElementValidatorMessage" xml:space="preserve">
    <value>The Element property of the XsdMessage '{0}' refers to a xsd type '{1}' in the schema file '{2}' that doesn't contain any top level element. This is not supported with the XMLSerializer.</value>
  </data>
  <data name="MissingConfigurationFile" xml:space="preserve">
    <value>Unable to locate and load configuration file '{0}'.</value>
  </data>
  <data name="CannotResolveReference" xml:space="preserve">
    <value>The '{0}' domain property of element '{1}' contains reference value '{2}' which is invalid.</value>
  </data>
  <data name="ModelBusRefrenceUpdate" xml:space="preserve">
    <value>The element reference in '{0}' was updated with the value: '{1}'</value>
  </data>
  <data name="FileNegateExistsValidatorMessage" xml:space="preserve">
    <value>The file does exists.</value>
  </data>
  <data name="CircularReferenceDetected" xml:space="preserve">
    <value>A circular reference was detected between elements in different models. The reference in element '{0}' points to element '{1}' located in model '{2}'.</value>
  </data>
  <data name="ElementNameValidatorLengthMessage" xml:space="preserve">
    <value>This element should have a valid not empty name with a length no longer than 255 characters.</value>
  </data>
  <data name="ElementNameValidatorInvalidNameMessage" xml:space="preserve">
    <value>This element name is invalid or has an invalid file system value.</value>
  </data>
  <data name="FaultCollectionUniqueContractValidatorMessage" xml:space="preserve">
    <value>The fault '{0}' in operation '{1}' has a Fault Contract that is already assigned to another Fault in this operation.</value>
  </data>
  <data name="SessionModeValidatorMessage" xml:space="preserve">
    <value>The Service Contract '{0}' cannot have the property 'SessionMode' set to Allowed or NotAllowed with operations with an IsTerminating = true operation or IsInitiating = false values. Set SessionMode value as 'Required' or change the operation property values.</value>
  </data>
  <data name="ExtenderObjectValidatorMessage" xml:space="preserve">
    <value>Invalid extender or ArtifactLink not set  for element '{0}'. Check that the Project Mapping Table is set to this model and has valid roles for this element. </value>
  </data>
</root>