// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using System.Configuration;
using System.Reflection;
using System.ServiceModel.Configuration;
using System.Collections;
using System.IO;
using System.ServiceModel;
using Microsoft.Practices.FxCop.Rules.WcfSecurity.Tests.Utilities;
using Microsoft.Practices.FxCop.Rules.WcfSecurity.Tests.Common;

namespace Microsoft.Practices.FxCop.Rules.WcfSecurity.Tests
{
    [TestClass]
    public class ServiceModelConfigurationManagerFixture
    {
        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void ThrowOnCreateWithNullConfiguration()
        {
            new ServiceModelConfigurationManager(null);
        }

        [TestMethod]
        [DeploymentItem(@"TestConfigs\ServiceModelConfigurationManagerFixture.config")]
        public void CanGetServiceModelSection()
        {
            Assert.IsNotNull(LoadManager().ServiceModelSection);
        }

        [TestMethod]
        [DeploymentItem(@"TestConfigs\ServiceModelConfigurationManagerFixture.config")]
        public void GetStandardBindingTest()
        {
            BasicHttpBindingElement element = LoadManager().GetStandardBinding<BasicHttpBinding, BasicHttpBindingElement>(Constants.ServiceBindingName);

            Assert.AreEqual(Constants.ServiceBindingName, element.Name);
        }

        [TestMethod]
        [ExpectedException(typeof(KeyNotFoundException))]
        [DeploymentItem(@"TestConfigs\ServiceModelConfigurationManagerFixture.config")]
        public void ThrowOnGetStandardBindingThatNotExistsTest()
        {
            BasicHttpBindingElement addedElement = LoadManager().GetStandardBinding<BasicHttpBinding, BasicHttpBindingElement>("NotExist");
        }

        [TestMethod]
        [ExpectedException(typeof(KeyNotFoundException))]
        [DeploymentItem(@"TestConfigs\ServiceModelConfigurationManagerFixture.config")]
        public void ThrowOnGetCustomBindingThatNotExistsTest()
        {
            CustomBindingElement element = LoadManager().GetCustomBinding("NotExist");
        }

        [TestMethod]
        [DeploymentItem(@"TestConfigs\ServiceModelConfigurationManagerFixture.config")]
        public void GetBehaviorTest()
        {
            NamedServiceModelExtensionCollectionElement<BehaviorExtensionElement> element = LoadManager().GetBehavior(Constants.ServiceBehaviorName);

            Assert.IsNotNull(element);
            Assert.AreEqual(Constants.ServiceBehaviorName, element.Name);
        }

        [TestMethod]
        [ExpectedException(typeof(KeyNotFoundException))]
        [DeploymentItem(@"TestConfigs\ServiceModelConfigurationManagerFixture.config")]
        public void ThrowOnBehaviorThatNotExistsTest()
        {
            NamedServiceModelExtensionCollectionElement<BehaviorExtensionElement> element = LoadManager().GetBehavior("NewBehavior");
            Assert.IsNotNull(element);
            Assert.AreEqual("NewBehavior", element.Name);
        }

        [TestMethod]
        [DeploymentItem(@"TestConfigs\ServiceModelConfigurationManagerFixture.config")]
        public void GetBehaviorExtensionTest()
        {
            NamedServiceModelExtensionCollectionElement<BehaviorExtensionElement> element = LoadManager().GetBehavior(Constants.ServiceBehaviorExtension);
            ServiceCredentialsElement extension = ServiceModelConfigurationManager.GetBehaviorExtensionElement<ServiceCredentialsElement>(element);
            Assert.IsNotNull(extension);
            Assert.AreEqual(Constants.TestCert, extension.ServiceCertificate.FindValue);
        }

        private ServiceModelConfigurationManager LoadManager()
        {
            Configuration configuration = ConfigurationLoader.LoadConfiguration("ServiceModelConfigurationManagerFixture.config");
            return new ServiceModelConfigurationManager(configuration);
        }
    }
}
