//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

[module: global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope = "type", Target = "Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDiagram")]

namespace Microsoft.Practices.ServiceFactory.HostDesigner
{
	/// <summary>
	/// Double-derived base class for DomainClass HostDesignerDiagram
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDiagram.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDiagram.Description", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e6b021f0-526f-4dfd-a19d-703fc1f22af6")]
	public abstract partial class HostDesignerDiagramBase : DslDiagrams::Diagram
	{
		#region Diagram boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#region Toolbox filters
		private static global::System.ComponentModel.ToolboxItemFilterAttribute[] toolboxFilters = new global::System.ComponentModel.ToolboxItemFilterAttribute[] {
					new global::System.ComponentModel.ToolboxItemFilterAttribute(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerToolboxHelperBase.ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require) };
		
		/// <summary>
		/// Toolbox item filter attributes for this diagram.
		/// </summary>
		public override global::System.Collections.ICollection TargetToolboxItemFilterAttributes
		{
			get
			{
				return toolboxFilters;
			}
		}
		#endregion
		#region Auto-placement
		/// <summary>
		/// Indicate that child shapes should added through view fixup should be placed automatically.
		/// </summary>
		public override bool ShouldAutoPlaceChildShapes
		{
			get
			{
				return true;
			}
		}
		#endregion
		#region Port shape support
		/// <summary>
		/// Indicates whether the diagram contains any ports.  Hit testing will not
		/// check for ports if this is false.
		/// </summary>
		public override bool SupportsPorts
		{
			get
			{
				return true;
			}
		}
		#endregion
		#region Shape mapping
		/// <summary>
		/// Called during view fixup to ask the parent whether a shape should be created for the given child element.
		/// </summary>
		/// <remarks>
		/// Always return true, since we assume there is only one diagram per model file for DSL scenarios.
		/// </remarks>
		protected override bool ShouldAddShapeForElement(DslModeling::ModelElement element)
		{
			return true;
		}
		
		/// <summary>
		/// Called during view fixup to configure the given child element, after it has been created.
		/// </summary>
		/// <remarks>
		/// Custom code for choosing the shapes attached to either end of a connector is called from here.
		/// </remarks>
		protected override void OnChildConfiguring(DslDiagrams::ShapeElement child, bool createdDuringViewFixup)
		{
			DslDiagrams::NodeShape sourceShape;
			DslDiagrams::NodeShape targetShape;
			DslDiagrams::BinaryLinkShape connector = child as DslDiagrams::BinaryLinkShape;
			if(connector == null)
			{
				base.OnChildConfiguring(child, createdDuringViewFixup);
				return;
			}
			this.GetSourceAndTargetForConnector(connector, out sourceShape, out targetShape);
			
			global::System.Diagnostics.Debug.Assert(sourceShape != null && targetShape != null, "Unable to find source and target shapes for connector.");
			connector.Connect(sourceShape, targetShape);
		}
		
		/// <summary>
		/// helper method to find the shapes for either end of a connector, including calling the user's custom code
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		internal void GetSourceAndTargetForConnector(DslDiagrams::BinaryLinkShape connector, out DslDiagrams::NodeShape sourceShape, out DslDiagrams::NodeShape targetShape)
		{
			sourceShape = null;
			targetShape = null;
			
			if (sourceShape == null || targetShape == null)
			{
				DslDiagrams::NodeShape[] endShapes = GetEndShapesForConnector(connector);
				if(sourceShape == null)
				{
					sourceShape = endShapes[0];
				}
				if(targetShape == null)
				{
					targetShape = endShapes[1];
				}
			}
		}
		
		/// <summary>
		/// Helper method to find shapes for either end of a connector by looking for shapes associated with either end of the relationship mapped to the connector.
		/// </summary>
		private DslDiagrams::NodeShape[] GetEndShapesForConnector(DslDiagrams::BinaryLinkShape connector)
		{
			DslModeling::ElementLink link = connector.ModelElement as DslModeling::ElementLink;
			DslDiagrams::NodeShape sourceShape = null, targetShape = null;
			if (link != null)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = link.LinkedElements;
				if (linkedElements.Count == 2)
				{
					DslDiagrams::Diagram currentDiagram = this.Diagram;
					DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							sourceShape = shape;
							break;
						}
					}
					
					presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							targetShape = shape;
							break;
						}
					}
		
				}
			}
			
			return new DslDiagrams::NodeShape[] { sourceShape, targetShape };
		}
		
		/// <summary>
		/// Creates a new shape for the given model element as part of view fixup
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily", Justification = "Generated code.")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
		protected override DslDiagrams::ShapeElement CreateChildShape(DslModeling::ModelElement element)
		{
			if(element is global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescription)
			{
				global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionShape newShape = new global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Microsoft.Practices.ServiceFactory.HostDesigner.Endpoint)
			{
				global::Microsoft.Practices.ServiceFactory.HostDesigner.EndpointPortShape newShape = new global::Microsoft.Practices.ServiceFactory.HostDesigner.EndpointPortShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplication)
			{
				global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationShape newShape = new global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Microsoft.Practices.ServiceFactory.HostDesigner.Proxy)
			{
				global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyPortShape newShape = new global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyPortShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplication)
			{
				global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationShape newShape = new global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions)
			{
				global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceConnector newShape = new global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceConnector(this.Partition);
				return newShape;
			}
			if(element is global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint)
			{
				global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyEndpointConnector newShape = new global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyEndpointConnector(this.Partition);
				return newShape;
			}
			return base.CreateChildShape(element);
		}
		#endregion
		#region Decorator mapping
		/// <summary>
		/// Initialize shape decorator mappings.  This is done here rather than in individual shapes because decorator maps
		/// are defined per diagram type rather than per shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			global::Microsoft.Practices.ServiceFactory.HostDesigner.BaseGeometryShape.DecoratorsInitialized += BaseGeometryShapeDecoratorMap.OnDecoratorsInitialized;
			global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationShape.DecoratorsInitialized += HostApplicationShapeDecoratorMap.OnDecoratorsInitialized;
			global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionShape.DecoratorsInitialized += ServiceDescriptionShapeDecoratorMap.OnDecoratorsInitialized;
			global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationShape.DecoratorsInitialized += ClientApplicationShapeDecoratorMap.OnDecoratorsInitialized;
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for BaseGeometryShape.
		/// </summary>
		internal static partial class BaseGeometryShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for BaseGeometryShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for HostApplicationShape.
		/// </summary>
		internal static partial class HostApplicationShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for HostApplicationShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				BaseGeometryShapeDecoratorMap.OnDecoratorsInitialized(sender, e);
				
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplication.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ServiceDescriptionShape.
		/// </summary>
		internal static partial class ServiceDescriptionShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ServiceDescriptionShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				BaseGeometryShapeDecoratorMap.OnDecoratorsInitialized(sender, e);
				
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescription.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ClientApplicationShape.
		/// </summary>
		internal static partial class ClientApplicationShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ClientApplicationShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				BaseGeometryShapeDecoratorMap.OnDecoratorsInitialized(sender, e);
				
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplication.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		#endregion
		
		#region Sticky Toolbox Support
		private string stickyToolboxItemId = null; // Id of the last-selected sticky toolbox item.
		
		/// <summary>
		/// Called when the selection on toolbox changed (through a single-click, or pressing up/down arrow keys).
		/// Base implementation does nothing.
		/// Upon double-click, a single-click is fired first, followed by a double-click. I.e. OnToolboxSelectionChanged
		/// will be called, followed by OnToolboxitemSelected (if the selected item is not "Pointer").
		/// </summary>
		/// <param name="toolboxItem">New toolbox item with selection. This can be null, if "Pointer" mode is selected.</param>
		public override void OnToolboxSelectionChanged(DslDesign::ModelingToolboxItem toolboxItem)
		{
			base.OnToolboxSelectionChanged(toolboxItem);
		
			// When a toolbox item is single-clicked, we need to turn off the sticky mode.
			this.stickyToolboxItemId = null;
			if (this.ActiveDiagramView != null)
			{
				DslDiagrams::CreateAction createAction = this.ActiveDiagramView.ActiveMouseAction as DslDiagrams::CreateAction;
				if (createAction != null)
				{
					createAction.StickyMode = false;
				}
				else
				{
					DslDiagrams::ConnectAction connectAction = this.ActiveDiagramView.ActiveMouseAction as DslDiagrams::ConnectAction;
					if (connectAction != null)
					{
						connectAction.StickyMode = false;
					}
				}
			}
		}
		
		/// <summary>
		/// Called on selection of a ToolboxItem. (A selection is a double-click, or pressing Enter).
		/// The selection cannot be null; this method is not called when the "Pointer" mode is selected.
		/// Upon double-click, a single-click is fired first, followed by a double-click. I.e. OnToolboxSelectionChanged
		/// will be called, followed by OnToolboxitemSelected (if the selected item is not "Pointer").
		/// </summary>
		/// <param name="toolboxItem">Selected toolbox item.</param>
		public override bool OnToolboxItemSelected(DslDesign::ModelingToolboxItem toolboxItem)
		{
			// Save the current sticky item choice.
			this.stickyToolboxItemId = toolboxItem.Id;
			
			// Return true to indicate that the toolbox selection action is handled. Otherwise the old
			// behavior of creating new element on double-click will be carried out.
			return true;
		}
		#endregion
		
		#region Toolbox actions
		private bool changingMouseAction;
		private global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationCreateAction hostApplicationCreateAction;
		private global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceCreateAction serviceCreateAction;
		private global::Microsoft.Practices.ServiceFactory.HostDesigner.EndpointCreateAction endpointCreateAction;
		private global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationCreateAction clientApplicationCreateAction;
		private global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyCreateAction proxyCreateAction;
		private global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyEndpointConnectionToolConnectAction proxyEndpointConnectionToolConnectAction;
		/// <summary>
		/// Virtual method to provide a filter when to select the mouse action
		/// </summary>
		/// <param name="activeView">Currently active view</param>
		/// <param name="filter">filter string used to filter the toolbox items</param>
		protected virtual bool SelectedToolboxItemSupportsFilterString(DslDiagrams::DiagramView activeView, string filter)
		{
			return activeView.SelectedToolboxItemSupportsFilterString(filter);
		}
		/// <summary>
		/// Override to provide the right mouse action when trying
		/// to create links on the diagram
		/// </summary>
		/// <param name="pointArgs"></param>
		public override void OnViewMouseEnter(DslDiagrams::DiagramPointEventArgs pointArgs)
		{
			if (pointArgs  == null) throw new global::System.ArgumentNullException("pointArgs");
		
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
			if(activeView != null)
			{
				bool stickyMode = false;
				DslDesign::ModelingToolboxItem selectedToolboxItem = activeView.Toolbox.GetSelectedToolboxItem() as DslDesign::ModelingToolboxItem;
				if (selectedToolboxItem != null && selectedToolboxItem.Id == this.stickyToolboxItemId)
				{
					stickyMode = true;
				}
				else
				{
					stickyMode = false;
					this.stickyToolboxItemId = null;
				}
		
				DslDiagrams::MouseAction action = null;
				if (SelectedToolboxItemSupportsFilterString(activeView, global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerToolboxHelper.HostApplicationFilterString))
				{
					if (this.hostApplicationCreateAction == null)
					{
						this.hostApplicationCreateAction = new global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationCreateAction(this);
						this.hostApplicationCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.hostApplicationCreateAction.StickyMode = stickyMode;
					action = this.hostApplicationCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerToolboxHelper.ServiceFilterString))
				{
					if (this.serviceCreateAction == null)
					{
						this.serviceCreateAction = new global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceCreateAction(this);
						this.serviceCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.serviceCreateAction.StickyMode = stickyMode;
					action = this.serviceCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerToolboxHelper.EndpointFilterString))
				{
					if (this.endpointCreateAction == null)
					{
						this.endpointCreateAction = new global::Microsoft.Practices.ServiceFactory.HostDesigner.EndpointCreateAction(this);
						this.endpointCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.endpointCreateAction.StickyMode = stickyMode;
					action = this.endpointCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerToolboxHelper.ClientApplicationFilterString))
				{
					if (this.clientApplicationCreateAction == null)
					{
						this.clientApplicationCreateAction = new global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationCreateAction(this);
						this.clientApplicationCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.clientApplicationCreateAction.StickyMode = stickyMode;
					action = this.clientApplicationCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerToolboxHelper.ProxyFilterString))
				{
					if (this.proxyCreateAction == null)
					{
						this.proxyCreateAction = new global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyCreateAction(this);
						this.proxyCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.proxyCreateAction.StickyMode = stickyMode;
					action = this.proxyCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerToolboxHelper.ProxyEndpointConnectionToolFilterString))
				{
					if (this.proxyEndpointConnectionToolConnectAction == null)
					{
						this.proxyEndpointConnectionToolConnectAction = new global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyEndpointConnectionToolConnectAction(this);
						this.proxyEndpointConnectionToolConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.proxyEndpointConnectionToolConnectAction.StickyMode = stickyMode;
					action = this.proxyEndpointConnectionToolConnectAction;
				} 
				else
				{
					action = null;
				}
				
				if (pointArgs.DiagramClientView.ActiveMouseAction != action)
				{
					try
					{
						this.changingMouseAction = true;
						pointArgs.DiagramClientView.ActiveMouseAction = action;
					}
					finally
					{
						this.changingMouseAction = false;
					}
				}
			}
		}
		
		/// <summary>
		/// Snap toolbox selection back to regular pointer after using a custom toolbox action.
		/// </summary>
		private void OnToolboxActionDeactivated(object sender, DslDiagrams::DiagramEventArgs e)
		{
			OnMouseActionDeactivated();
		}
		
		/// <summary>
		/// Overridable method to manage the mouse deactivation. The default implementation snap stoolbox selection back to regular pointer 
		/// after using a custom toolbox action.
		/// </summary>
		protected virtual void OnMouseActionDeactivated()
		{
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
		
			if (activeView != null && activeView.Toolbox != null)
			{
				// If we're not changing mouse action due to changing toolbox selection change,
				// reset toolbox selection.
				if (!this.changingMouseAction)
				{
					activeView.Toolbox.SelectedToolboxItemUsed();
				}
			}
		}
		#endregion
		
		/// <summary>
		/// Dispose of connect actions.
		/// </summary>
		protected override void Dispose(bool disposing)
		{
			try
			{
				if(disposing)
				{
					if(this.hostApplicationCreateAction != null)
					{
						this.hostApplicationCreateAction.Dispose();
						this.hostApplicationCreateAction = null;
					}
					if(this.serviceCreateAction != null)
					{
						this.serviceCreateAction.Dispose();
						this.serviceCreateAction = null;
					}
					if(this.endpointCreateAction != null)
					{
						this.endpointCreateAction.Dispose();
						this.endpointCreateAction = null;
					}
					if(this.clientApplicationCreateAction != null)
					{
						this.clientApplicationCreateAction.Dispose();
						this.clientApplicationCreateAction = null;
					}
					if(this.proxyCreateAction != null)
					{
						this.proxyCreateAction.Dispose();
						this.proxyCreateAction = null;
					}
					if(this.proxyEndpointConnectionToolConnectAction != null)
					{
						this.proxyEndpointConnectionToolConnectAction.Dispose();
						this.proxyEndpointConnectionToolConnectAction = null;
					}
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// HostDesignerDiagram domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe6b021f0, 0x526f, 0x4dfd, 0xa1, 0x9d, 0x70, 0x3f, 0xc1, 0xf2, 0x2a, 0xf6);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected HostDesignerDiagramBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
	/// <summary>
	/// DomainClass HostDesignerDiagram
	/// Description for
	/// Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDiagram
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class HostDesignerDiagram : HostDesignerDiagramBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public HostDesignerDiagram(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public HostDesignerDiagram(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.HostDesigner
{
	
		/// <summary>
		/// Double derived implementation for the rule that initiates view fixup when an element that has an associated shape is added to the model.
		/// This now enables the DSL author to everride the SkipFixUp() method 
		/// </summary>
		internal partial class FixUpDiagramBase : DslModeling::AddRule
		{
			protected virtual bool SkipFixup(DslModeling::ModelElement childElement)
			{
				return childElement.IsDeleted;
			}
		}
	
		/// <summary>
		/// Rule that initiates view fixup when an element that has an associated shape is added to the model. 
		/// </summary>
		[DslModeling::RuleOn(typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescription), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.Endpoint), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority + 1, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplication), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.Proxy), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority + 1, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplication), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		internal sealed partial class FixUpDiagram : FixUpDiagramBase
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
			
				DslModeling::ModelElement childElement = e.ModelElement;
				if (this.SkipFixup(childElement))
					return;
				DslModeling::ModelElement parentElement;
				if(childElement is DslModeling::ElementLink)
				{
					parentElement = GetParentForRelationship((DslModeling::ElementLink)childElement);
				} else
				if(childElement is global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescription)
				{
					parentElement = GetParentForServiceDescription((global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescription)childElement);
				} else
				if(childElement is global::Microsoft.Practices.ServiceFactory.HostDesigner.Endpoint)
				{
					parentElement = GetParentForEndpoint((global::Microsoft.Practices.ServiceFactory.HostDesigner.Endpoint)childElement);
				} else
				if(childElement is global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplication)
				{
					parentElement = GetParentForHostApplication((global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplication)childElement);
				} else
				if(childElement is global::Microsoft.Practices.ServiceFactory.HostDesigner.Proxy)
				{
					parentElement = GetParentForProxy((global::Microsoft.Practices.ServiceFactory.HostDesigner.Proxy)childElement);
				} else
				if(childElement is global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplication)
				{
					parentElement = GetParentForClientApplication((global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplication)childElement);
				} else
				{
					parentElement = null;
				}
				
				if(parentElement != null)
				{
					DslDiagrams::Diagram.FixUpDiagram(parentElement, childElement);
				}
			}
			public static global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModel GetParentForHostApplication( global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplication root )
			{
				// Segments 0 and 1
				global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModel result = root.HostDesignerModel;
				if ( result == null ) return null;
				return result;
			}
			public static global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModel GetParentForServiceDescription( global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescription root )
			{
				// Segments 0 and 1
				global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplication root2 = root.HostApplication;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModel result = root2.HostDesignerModel;
				if ( result == null ) return null;
				return result;
			}
			public static global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescription GetParentForEndpoint( global::Microsoft.Practices.ServiceFactory.HostDesigner.Endpoint root )
			{
				// Segments 0 and 1
				global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescription result = root.ServiceDescription;
				if ( result == null ) return null;
				return result;
			}
			public static global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplication GetParentForProxy( global::Microsoft.Practices.ServiceFactory.HostDesigner.Proxy root )
			{
				// Segments 0 and 1
				global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplication result = root.ClientApplication;
				if ( result == null ) return null;
				return result;
			}
			public static global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModel GetParentForClientApplication( global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplication root )
			{
				// Segments 0 and 1
				global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModel result = root.HostDesignerModel;
				if ( result == null ) return null;
				return result;
			}
			private static DslModeling::ModelElement GetParentForRelationship(DslModeling::ElementLink elementLink)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = elementLink.LinkedElements;
	
				if (linkedElements.Count == 2)
				{
					DslDiagrams::ShapeElement sourceShape = linkedElements[0] as DslDiagrams::ShapeElement;
					DslDiagrams::ShapeElement targetShape = linkedElements[1] as DslDiagrams::ShapeElement;
	
					if(sourceShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								sourceShape = shape;
								break;
							}
						}
					}
					
					if(targetShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								targetShape = shape;
								break;
							}
						}
					}
					
					if(sourceShape == null || targetShape == null)
					{
						global::System.Diagnostics.Debug.Fail("Unable to find source and/or target shape for view fixup.");
						return null;
					}
	
					DslDiagrams::ShapeElement sourceParent = sourceShape.ParentShape;
					DslDiagrams::ShapeElement targetParent = targetShape.ParentShape;
	
					while (sourceParent != targetParent && sourceParent != null)
					{
						DslDiagrams::ShapeElement curParent = targetParent;
						while (sourceParent != curParent && curParent != null)
						{
							curParent = curParent.ParentShape;
						}
	
						if(sourceParent == curParent)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					while (sourceParent != null)
					{
						// ensure that the parent can parent connectors (i.e., a diagram or a swimlane).
						if(sourceParent is DslDiagrams::Diagram || sourceParent is DslDiagrams::SwimlaneShape)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					global::System.Diagnostics.Debug.Assert(sourceParent != null && sourceParent.ModelElement != null, "Unable to find common parent for view fixup.");
					return sourceParent.ModelElement;
				}
	
				return null;
			}
		}
		
	
		/// <summary>
		/// Reroute a connector when the role players of its underlying relationship change
		/// </summary>
		[DslModeling::RuleOn(typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		internal sealed class ConnectorRolePlayerChanged : DslModeling::RolePlayerChangeRule
		{
			/// <summary>
			/// Reroute a connector when the role players of its underlying relationship change
			/// </summary>
			public override void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e)
			{
				if (e == null) throw new global::System.ArgumentNullException("e");
	
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslDiagrams::PresentationViewsSubject> connectorLinks = DslDiagrams::PresentationViewsSubject.GetLinksToPresentation(e.ElementLink);
				foreach (DslDiagrams::PresentationViewsSubject connectorLink in connectorLinks)
				{
					// Fix up any binary link shapes attached to the element link.
					DslDiagrams::BinaryLinkShape linkShape = connectorLink.Presentation as DslDiagrams::BinaryLinkShape;
					if (linkShape != null)
					{
						global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDiagram diagram = linkShape.Diagram as global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDiagram;
						if (diagram != null)
						{
							if (e.NewRolePlayer != null)
							{
								DslDiagrams::NodeShape fromShape;
								DslDiagrams::NodeShape toShape;
								diagram.GetSourceAndTargetForConnector(linkShape, out fromShape, out toShape);
								if (fromShape != null && toShape != null)
								{
									if (!object.Equals(fromShape, linkShape.FromShape))
									{
										linkShape.FromShape = fromShape;
									}
									if (!object.Equals(linkShape.ToShape, toShape))
									{
										linkShape.ToShape = toShape;
									}
								}
								else
								{
									// delete the connector if we cannot find an appropriate target shape.
									linkShape.Delete();
								}
							}
							else
							{
								// delete the connector if the new role player is null.
								linkShape.Delete();
							}
						}
					}
				}
			}
		}
	}
