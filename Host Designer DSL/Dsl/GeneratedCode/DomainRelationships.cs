//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Microsoft.Practices.ServiceFactory.HostDesigner
{
	/// <summary>
	/// DomainRelationship HostDesignerModelHasHostApplications
	/// Description for
	/// Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications.Description", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("b451e65b-c67c-4770-b5dc-8463d8a81b2e")]
	public partial class HostDesignerModelHasHostApplications : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// HostDesignerModelHasHostApplications domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb451e65b, 0xc67c, 0x4770, 0xb5, 0xdc, 0x84, 0x63, 0xd8, 0xa8, 0x1b, 0x2e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a HostDesignerModelHasHostApplications link in the same Partition as the given HostDesignerModel
		/// </summary>
		/// <param name="source">HostDesignerModel to use as the source of the relationship.</param>
		/// <param name="target">HostApplication to use as the target of the relationship.</param>
		public HostDesignerModelHasHostApplications(HostDesignerModel source, HostApplication target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(HostDesignerModelHasHostApplications.HostDesignerModelDomainRoleId, source), new DslModeling::RoleAssignment(HostDesignerModelHasHostApplications.HostApplicationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public HostDesignerModelHasHostApplications(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public HostDesignerModelHasHostApplications(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public HostDesignerModelHasHostApplications(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public HostDesignerModelHasHostApplications(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region HostDesignerModel domain role code
		
		/// <summary>
		/// HostDesignerModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid HostDesignerModelDomainRoleId = new global::System.Guid(0xdd270672, 0xa120, 0x4e4c, 0xb8, 0x58, 0x06, 0x9a, 0xd9, 0x6b, 0x00, 0x82);
		
		/// <summary>
		/// DomainRole HostDesignerModel
		/// Description for
		/// Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications.HostDesignerModel
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications/HostDesignerModel.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications/HostDesignerModel.Category", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications/HostDesignerModel.Description", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "HostApplications", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications/HostDesignerModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("dd270672-a120-4e4c-b858-069ad96b0082")]
		public virtual HostDesignerModel HostDesignerModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (HostDesignerModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, HostDesignerModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, HostDesignerModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access HostDesignerModel of a HostApplication
		/// <summary>
		/// Gets HostDesignerModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static HostDesignerModel GetHostDesignerModel(HostApplication element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, HostApplicationDomainRoleId) as HostDesignerModel;
		}
		
		/// <summary>
		/// Sets HostDesignerModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetHostDesignerModel(HostApplication element, HostDesignerModel newHostDesignerModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, HostApplicationDomainRoleId, newHostDesignerModel);
		}
		#endregion
		#region HostApplication domain role code
		
		/// <summary>
		/// HostApplication domain role Id.
		/// </summary>
		public static readonly global::System.Guid HostApplicationDomainRoleId = new global::System.Guid(0x05025203, 0xaa7d, 0x4129, 0x97, 0x8f, 0x0c, 0x6e, 0xdd, 0x39, 0x94, 0x16);
		
		/// <summary>
		/// DomainRole HostApplication
		/// Description for
		/// Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications.HostApplication
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications/HostApplication.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications/HostApplication.Category", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications/HostApplication.Description", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "HostDesignerModel", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications/HostApplication.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("05025203-aa7d-4129-978f-0c6edd399416")]
		public virtual HostApplication HostApplication
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (HostApplication)DslModeling::DomainRoleInfo.GetRolePlayer(this, HostApplicationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, HostApplicationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access HostApplications of a HostDesignerModel
		/// <summary>
		/// Gets a list of HostApplications.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<HostApplication> GetHostApplications(HostDesignerModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<HostApplication>, HostApplication>(element, HostDesignerModelDomainRoleId);
		}
		#endregion
		#region HostDesignerModel link accessor
		/// <summary>
		/// Get the list of HostDesignerModelHasHostApplications links to a HostDesignerModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications> GetLinksToHostApplications ( global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModel hostDesignerModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications>(hostDesignerModelInstance, global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications.HostDesignerModelDomainRoleId);
		}
		#endregion
		#region HostApplication link accessor
		/// <summary>
		/// Get the HostDesignerModelHasHostApplications link to a HostApplication.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications GetLinkToHostDesignerModel (global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplication hostApplicationInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications>(hostApplicationInstance, global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications.HostApplicationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of HostApplication not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region HostDesignerModelHasHostApplications instance accessors
		
		/// <summary>
		/// Get any HostDesignerModelHasHostApplications links between a given HostDesignerModel and a HostApplication.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications> GetLinks( global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModel source, global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplication target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications>();
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications>(source, global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications.HostDesignerModelDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications link in links )
			{
				if ( target.Equals(link.HostApplication) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one HostDesignerModelHasHostApplications link between a given HostDesignerModeland a HostApplication.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications GetLink( global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModel source, global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplication target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications>(source, global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications.HostDesignerModelDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasHostApplications link in links )
			{
				if ( target.Equals(link.HostApplication) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.HostDesigner
{
	/// <summary>
	/// DomainRelationship HostApplicationHasServiceDescriptions
	/// Description for
	/// Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions.Description", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("fcb7dde6-61aa-4b26-832a-bd9c8244de30")]
	public partial class HostApplicationHasServiceDescriptions : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// HostApplicationHasServiceDescriptions domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfcb7dde6, 0x61aa, 0x4b26, 0x83, 0x2a, 0xbd, 0x9c, 0x82, 0x44, 0xde, 0x30);
	
				
		/// <summary>
		/// Constructor
		/// Creates a HostApplicationHasServiceDescriptions link in the same Partition as the given HostApplication
		/// </summary>
		/// <param name="source">HostApplication to use as the source of the relationship.</param>
		/// <param name="target">ServiceDescription to use as the target of the relationship.</param>
		public HostApplicationHasServiceDescriptions(HostApplication source, ServiceDescription target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(HostApplicationHasServiceDescriptions.HostApplicationDomainRoleId, source), new DslModeling::RoleAssignment(HostApplicationHasServiceDescriptions.ServiceDescriptionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public HostApplicationHasServiceDescriptions(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public HostApplicationHasServiceDescriptions(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public HostApplicationHasServiceDescriptions(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public HostApplicationHasServiceDescriptions(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region HostApplication domain role code
		
		/// <summary>
		/// HostApplication domain role Id.
		/// </summary>
		public static readonly global::System.Guid HostApplicationDomainRoleId = new global::System.Guid(0x2516392f, 0xbfe6, 0x44ca, 0xb0, 0xc8, 0xb2, 0xf6, 0x61, 0x35, 0x42, 0x3b);
		
		/// <summary>
		/// DomainRole HostApplication
		/// Description for
		/// Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions.HostApplication
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions/HostApplication.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions/HostApplication.Category", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions/HostApplication.Description", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ServiceDescriptions", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions/HostApplication.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2516392f-bfe6-44ca-b0c8-b2f66135423b")]
		public virtual HostApplication HostApplication
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (HostApplication)DslModeling::DomainRoleInfo.GetRolePlayer(this, HostApplicationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, HostApplicationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access HostApplication of a ServiceDescription
		/// <summary>
		/// Gets HostApplication.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static HostApplication GetHostApplication(ServiceDescription element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ServiceDescriptionDomainRoleId) as HostApplication;
		}
		
		/// <summary>
		/// Sets HostApplication.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetHostApplication(ServiceDescription element, HostApplication newHostApplication)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ServiceDescriptionDomainRoleId, newHostApplication);
		}
		#endregion
		#region ServiceDescription domain role code
		
		/// <summary>
		/// ServiceDescription domain role Id.
		/// </summary>
		public static readonly global::System.Guid ServiceDescriptionDomainRoleId = new global::System.Guid(0x33a10620, 0xd5ff, 0x4e18, 0x8b, 0x1a, 0x6a, 0xb2, 0xa0, 0x5f, 0x65, 0x86);
		
		/// <summary>
		/// DomainRole ServiceDescription
		/// Description for
		/// Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions.ServiceDescription
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions/ServiceDescription.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions/ServiceDescription.Category", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions/ServiceDescription.Description", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "HostApplication", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions/ServiceDescription.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("33a10620-d5ff-4e18-8b1a-6ab2a05f6586")]
		public virtual ServiceDescription ServiceDescription
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ServiceDescription)DslModeling::DomainRoleInfo.GetRolePlayer(this, ServiceDescriptionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ServiceDescriptionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ServiceDescriptions of a HostApplication
		/// <summary>
		/// Gets a list of ServiceDescriptions.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ServiceDescription> GetServiceDescriptions(HostApplication element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ServiceDescription>, ServiceDescription>(element, HostApplicationDomainRoleId);
		}
		#endregion
		#region HostApplication link accessor
		/// <summary>
		/// Get the list of HostApplicationHasServiceDescriptions links to a HostApplication.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions> GetLinksToServiceDescriptions ( global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplication hostApplicationInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions>(hostApplicationInstance, global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions.HostApplicationDomainRoleId);
		}
		#endregion
		#region ServiceDescription link accessor
		/// <summary>
		/// Get the HostApplicationHasServiceDescriptions link to a ServiceDescription.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions GetLinkToHostApplication (global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescription serviceDescriptionInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions>(serviceDescriptionInstance, global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions.ServiceDescriptionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ServiceDescription not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region HostApplicationHasServiceDescriptions instance accessors
		
		/// <summary>
		/// Get any HostApplicationHasServiceDescriptions links between a given HostApplication and a ServiceDescription.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions> GetLinks( global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplication source, global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescription target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions>();
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions>(source, global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions.HostApplicationDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions link in links )
			{
				if ( target.Equals(link.ServiceDescription) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one HostApplicationHasServiceDescriptions link between a given HostApplicationand a ServiceDescription.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions GetLink( global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplication source, global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescription target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions>(source, global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions.HostApplicationDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.HostDesigner.HostApplicationHasServiceDescriptions link in links )
			{
				if ( target.Equals(link.ServiceDescription) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.HostDesigner
{
	/// <summary>
	/// DomainRelationship ServiceDescriptionHasEndpoints
	/// Description for
	/// Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints.Description", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a2e72d28-0d27-422c-87d7-1df6735054e1")]
	public partial class ServiceDescriptionHasEndpoints : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ServiceDescriptionHasEndpoints domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa2e72d28, 0x0d27, 0x422c, 0x87, 0xd7, 0x1d, 0xf6, 0x73, 0x50, 0x54, 0xe1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ServiceDescriptionHasEndpoints link in the same Partition as the given ServiceDescription
		/// </summary>
		/// <param name="source">ServiceDescription to use as the source of the relationship.</param>
		/// <param name="target">Endpoint to use as the target of the relationship.</param>
		public ServiceDescriptionHasEndpoints(ServiceDescription source, Endpoint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ServiceDescriptionHasEndpoints.ServiceDescriptionDomainRoleId, source), new DslModeling::RoleAssignment(ServiceDescriptionHasEndpoints.EndpointDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ServiceDescriptionHasEndpoints(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ServiceDescriptionHasEndpoints(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ServiceDescriptionHasEndpoints(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ServiceDescriptionHasEndpoints(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ServiceDescription domain role code
		
		/// <summary>
		/// ServiceDescription domain role Id.
		/// </summary>
		public static readonly global::System.Guid ServiceDescriptionDomainRoleId = new global::System.Guid(0x8295c411, 0x068d, 0x422e, 0xa5, 0x4e, 0xb4, 0x96, 0x44, 0x48, 0x22, 0x42);
		
		/// <summary>
		/// DomainRole ServiceDescription
		/// Description for
		/// Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints.ServiceDescription
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints/ServiceDescription.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints/ServiceDescription.Category", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints/ServiceDescription.Description", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Endpoints", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints/ServiceDescription.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8295c411-068d-422e-a54e-b49644482242")]
		public virtual ServiceDescription ServiceDescription
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ServiceDescription)DslModeling::DomainRoleInfo.GetRolePlayer(this, ServiceDescriptionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ServiceDescriptionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ServiceDescription of a Endpoint
		/// <summary>
		/// Gets ServiceDescription.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ServiceDescription GetServiceDescription(Endpoint element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EndpointDomainRoleId) as ServiceDescription;
		}
		
		/// <summary>
		/// Sets ServiceDescription.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetServiceDescription(Endpoint element, ServiceDescription newServiceDescription)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EndpointDomainRoleId, newServiceDescription);
		}
		#endregion
		#region Endpoint domain role code
		
		/// <summary>
		/// Endpoint domain role Id.
		/// </summary>
		public static readonly global::System.Guid EndpointDomainRoleId = new global::System.Guid(0x2d5fba69, 0xa70c, 0x4299, 0x95, 0x0c, 0x05, 0x10, 0x75, 0x4c, 0x8c, 0xe3);
		
		/// <summary>
		/// DomainRole Endpoint
		/// Description for
		/// Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints.Endpoint
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints/Endpoint.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints/Endpoint.Category", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints/Endpoint.Description", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ServiceDescription", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints/Endpoint.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("2d5fba69-a70c-4299-950c-0510754c8ce3")]
		public virtual Endpoint Endpoint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Endpoint)DslModeling::DomainRoleInfo.GetRolePlayer(this, EndpointDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EndpointDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Endpoints of a ServiceDescription
		/// <summary>
		/// Gets a list of Endpoints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Endpoint> GetEndpoints(ServiceDescription element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Endpoint>, Endpoint>(element, ServiceDescriptionDomainRoleId);
		}
		#endregion
		#region ServiceDescription link accessor
		/// <summary>
		/// Get the list of ServiceDescriptionHasEndpoints links to a ServiceDescription.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints> GetLinksToEndpoints ( global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescription serviceDescriptionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints>(serviceDescriptionInstance, global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints.ServiceDescriptionDomainRoleId);
		}
		#endregion
		#region Endpoint link accessor
		/// <summary>
		/// Get the ServiceDescriptionHasEndpoints link to a Endpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints GetLinkToServiceDescription (global::Microsoft.Practices.ServiceFactory.HostDesigner.Endpoint endpointInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints>(endpointInstance, global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints.EndpointDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Endpoint not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ServiceDescriptionHasEndpoints instance accessors
		
		/// <summary>
		/// Get any ServiceDescriptionHasEndpoints links between a given ServiceDescription and a Endpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints> GetLinks( global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescription source, global::Microsoft.Practices.ServiceFactory.HostDesigner.Endpoint target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints>();
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints>(source, global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints.ServiceDescriptionDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints link in links )
			{
				if ( target.Equals(link.Endpoint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ServiceDescriptionHasEndpoints link between a given ServiceDescriptionand a Endpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints GetLink( global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescription source, global::Microsoft.Practices.ServiceFactory.HostDesigner.Endpoint target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints>(source, global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints.ServiceDescriptionDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.HostDesigner.ServiceDescriptionHasEndpoints link in links )
			{
				if ( target.Equals(link.Endpoint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.HostDesigner
{
	/// <summary>
	/// DomainRelationship ClientApplicationHasProxies
	/// Description for
	/// Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies.Description", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("11b523b9-b40a-4263-84ce-b04cf2470990")]
	public partial class ClientApplicationHasProxies : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ClientApplicationHasProxies domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x11b523b9, 0xb40a, 0x4263, 0x84, 0xce, 0xb0, 0x4c, 0xf2, 0x47, 0x09, 0x90);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ClientApplicationHasProxies link in the same Partition as the given ClientApplication
		/// </summary>
		/// <param name="source">ClientApplication to use as the source of the relationship.</param>
		/// <param name="target">Proxy to use as the target of the relationship.</param>
		public ClientApplicationHasProxies(ClientApplication source, Proxy target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ClientApplicationHasProxies.ClientApplicationDomainRoleId, source), new DslModeling::RoleAssignment(ClientApplicationHasProxies.ProxyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClientApplicationHasProxies(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClientApplicationHasProxies(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClientApplicationHasProxies(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClientApplicationHasProxies(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ClientApplication domain role code
		
		/// <summary>
		/// ClientApplication domain role Id.
		/// </summary>
		public static readonly global::System.Guid ClientApplicationDomainRoleId = new global::System.Guid(0x001dcc80, 0x3533, 0x4768, 0xa6, 0xfa, 0x66, 0x30, 0xb4, 0xdd, 0x8c, 0x4c);
		
		/// <summary>
		/// DomainRole ClientApplication
		/// Description for
		/// Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies.ClientApplication
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies/ClientApplication.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies/ClientApplication.Category", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies/ClientApplication.Description", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Proxies", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies/ClientApplication.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("001dcc80-3533-4768-a6fa-6630b4dd8c4c")]
		public virtual ClientApplication ClientApplication
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ClientApplication)DslModeling::DomainRoleInfo.GetRolePlayer(this, ClientApplicationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ClientApplicationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ClientApplication of a Proxy
		/// <summary>
		/// Gets ClientApplication.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ClientApplication GetClientApplication(Proxy element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ProxyDomainRoleId) as ClientApplication;
		}
		
		/// <summary>
		/// Sets ClientApplication.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetClientApplication(Proxy element, ClientApplication newClientApplication)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ProxyDomainRoleId, newClientApplication);
		}
		#endregion
		#region Proxy domain role code
		
		/// <summary>
		/// Proxy domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProxyDomainRoleId = new global::System.Guid(0x91dfc089, 0x003c, 0x4acb, 0x83, 0x17, 0x74, 0x43, 0x8e, 0x0f, 0x8a, 0x96);
		
		/// <summary>
		/// DomainRole Proxy
		/// Description for
		/// Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies.Proxy
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies/Proxy.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies/Proxy.Category", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies/Proxy.Description", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ClientApplication", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies/Proxy.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("91dfc089-003c-4acb-8317-74438e0f8a96")]
		public virtual Proxy Proxy
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Proxy)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProxyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProxyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Proxies of a ClientApplication
		/// <summary>
		/// Gets a list of Proxies.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Proxy> GetProxies(ClientApplication element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Proxy>, Proxy>(element, ClientApplicationDomainRoleId);
		}
		#endregion
		#region ClientApplication link accessor
		/// <summary>
		/// Get the list of ClientApplicationHasProxies links to a ClientApplication.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies> GetLinksToProxies ( global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplication clientApplicationInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies>(clientApplicationInstance, global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies.ClientApplicationDomainRoleId);
		}
		#endregion
		#region Proxy link accessor
		/// <summary>
		/// Get the ClientApplicationHasProxies link to a Proxy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies GetLinkToClientApplication (global::Microsoft.Practices.ServiceFactory.HostDesigner.Proxy proxyInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies>(proxyInstance, global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies.ProxyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Proxy not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ClientApplicationHasProxies instance accessors
		
		/// <summary>
		/// Get any ClientApplicationHasProxies links between a given ClientApplication and a Proxy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies> GetLinks( global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplication source, global::Microsoft.Practices.ServiceFactory.HostDesigner.Proxy target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies>();
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies>(source, global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies.ClientApplicationDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies link in links )
			{
				if ( target.Equals(link.Proxy) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ClientApplicationHasProxies link between a given ClientApplicationand a Proxy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies GetLink( global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplication source, global::Microsoft.Practices.ServiceFactory.HostDesigner.Proxy target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies>(source, global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies.ClientApplicationDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplicationHasProxies link in links )
			{
				if ( target.Equals(link.Proxy) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.HostDesigner
{
	/// <summary>
	/// DomainRelationship ProxyReferencesEndpoint
	/// Description for
	/// Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint.Description", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("8fff9ca0-4f72-4067-ae83-45b028e27931")]
	public partial class ProxyReferencesEndpoint : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ProxyReferencesEndpoint domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8fff9ca0, 0x4f72, 0x4067, 0xae, 0x83, 0x45, 0xb0, 0x28, 0xe2, 0x79, 0x31);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ProxyReferencesEndpoint link in the same Partition as the given Proxy
		/// </summary>
		/// <param name="source">Proxy to use as the source of the relationship.</param>
		/// <param name="target">Endpoint to use as the target of the relationship.</param>
		public ProxyReferencesEndpoint(Proxy source, Endpoint target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ProxyReferencesEndpoint.ProxyDomainRoleId, source), new DslModeling::RoleAssignment(ProxyReferencesEndpoint.EndpointDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProxyReferencesEndpoint(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProxyReferencesEndpoint(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProxyReferencesEndpoint(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProxyReferencesEndpoint(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Proxy domain role code
		
		/// <summary>
		/// Proxy domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProxyDomainRoleId = new global::System.Guid(0x52cb9333, 0x1fa5, 0x4d06, 0x98, 0xd5, 0x73, 0x29, 0x77, 0x50, 0xd2, 0xad);
		
		/// <summary>
		/// DomainRole Proxy
		/// Description for
		/// Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint.Proxy
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint/Proxy.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint/Proxy.Category", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint/Proxy.Description", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Endpoint", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint/Proxy.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("52cb9333-1fa5-4d06-98d5-73297750d2ad")]
		public virtual Proxy Proxy
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Proxy)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProxyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProxyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Proxies of a Endpoint
		/// <summary>
		/// Gets a list of Proxies.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Proxy> GetProxies(Endpoint element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Proxy>, Proxy>(element, EndpointDomainRoleId);
		}
		#endregion
		#region Endpoint domain role code
		
		/// <summary>
		/// Endpoint domain role Id.
		/// </summary>
		public static readonly global::System.Guid EndpointDomainRoleId = new global::System.Guid(0x7632f137, 0x28eb, 0x45c1, 0xbe, 0xd5, 0x32, 0xd8, 0x4d, 0x51, 0xcd, 0x1c);
		
		/// <summary>
		/// DomainRole Endpoint
		/// Description for
		/// Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint.Endpoint
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint/Endpoint.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint/Endpoint.Category", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint/Endpoint.Description", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Proxies", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint/Endpoint.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7632f137-28eb-45c1-bed5-32d84d51cd1c")]
		public virtual Endpoint Endpoint
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Endpoint)DslModeling::DomainRoleInfo.GetRolePlayer(this, EndpointDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EndpointDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Endpoint of a Proxy
		/// <summary>
		/// Gets Endpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Endpoint GetEndpoint(Proxy element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ProxyDomainRoleId) as Endpoint;
		}
		
		/// <summary>
		/// Sets Endpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEndpoint(Proxy element, Endpoint newEndpoint)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ProxyDomainRoleId, newEndpoint);
		}
		#endregion
		#region Proxy link accessor
		/// <summary>
		/// Get the ProxyReferencesEndpoint link to a Proxy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint GetLinkToEndpoint (global::Microsoft.Practices.ServiceFactory.HostDesigner.Proxy proxyInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint>(proxyInstance, global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint.ProxyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Proxy not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Endpoint link accessor
		/// <summary>
		/// Get the list of ProxyReferencesEndpoint links to a Endpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint> GetLinksToProxies ( global::Microsoft.Practices.ServiceFactory.HostDesigner.Endpoint endpointInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint>(endpointInstance, global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint.EndpointDomainRoleId);
		}
		#endregion
		#region ProxyReferencesEndpoint instance accessors
		
		/// <summary>
		/// Get any ProxyReferencesEndpoint links between a given Proxy and a Endpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint> GetLinks( global::Microsoft.Practices.ServiceFactory.HostDesigner.Proxy source, global::Microsoft.Practices.ServiceFactory.HostDesigner.Endpoint target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint>();
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint>(source, global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint.ProxyDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint link in links )
			{
				if ( target.Equals(link.Endpoint) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ProxyReferencesEndpoint link between a given Proxyand a Endpoint.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint GetLink( global::Microsoft.Practices.ServiceFactory.HostDesigner.Proxy source, global::Microsoft.Practices.ServiceFactory.HostDesigner.Endpoint target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint>(source, global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint.ProxyDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.HostDesigner.ProxyReferencesEndpoint link in links )
			{
				if ( target.Equals(link.Endpoint) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.Practices.ServiceFactory.HostDesigner
{
	/// <summary>
	/// DomainRelationship HostDesignerModelHasClientApplications
	/// Description for
	/// Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications.Description", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("38537c39-659a-464c-8507-a756665dc570")]
	public partial class HostDesignerModelHasClientApplications : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// HostDesignerModelHasClientApplications domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x38537c39, 0x659a, 0x464c, 0x85, 0x07, 0xa7, 0x56, 0x66, 0x5d, 0xc5, 0x70);
	
				
		/// <summary>
		/// Constructor
		/// Creates a HostDesignerModelHasClientApplications link in the same Partition as the given HostDesignerModel
		/// </summary>
		/// <param name="source">HostDesignerModel to use as the source of the relationship.</param>
		/// <param name="target">ClientApplication to use as the target of the relationship.</param>
		public HostDesignerModelHasClientApplications(HostDesignerModel source, ClientApplication target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(HostDesignerModelHasClientApplications.HostDesignerModelDomainRoleId, source), new DslModeling::RoleAssignment(HostDesignerModelHasClientApplications.ClientApplicationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public HostDesignerModelHasClientApplications(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public HostDesignerModelHasClientApplications(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public HostDesignerModelHasClientApplications(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public HostDesignerModelHasClientApplications(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region HostDesignerModel domain role code
		
		/// <summary>
		/// HostDesignerModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid HostDesignerModelDomainRoleId = new global::System.Guid(0xa8fc125f, 0x7d03, 0x4348, 0xa4, 0xe9, 0x40, 0x69, 0xa9, 0x69, 0x60, 0x4e);
		
		/// <summary>
		/// DomainRole HostDesignerModel
		/// Description for
		/// Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications.HostDesignerModel
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications/HostDesignerModel.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications/HostDesignerModel.Category", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications/HostDesignerModel.Description", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ClientApplications", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications/HostDesignerModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a8fc125f-7d03-4348-a4e9-4069a969604e")]
		public virtual HostDesignerModel HostDesignerModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (HostDesignerModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, HostDesignerModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, HostDesignerModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access HostDesignerModel of a ClientApplication
		/// <summary>
		/// Gets HostDesignerModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static HostDesignerModel GetHostDesignerModel(ClientApplication element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ClientApplicationDomainRoleId) as HostDesignerModel;
		}
		
		/// <summary>
		/// Sets HostDesignerModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetHostDesignerModel(ClientApplication element, HostDesignerModel newHostDesignerModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ClientApplicationDomainRoleId, newHostDesignerModel);
		}
		#endregion
		#region ClientApplication domain role code
		
		/// <summary>
		/// ClientApplication domain role Id.
		/// </summary>
		public static readonly global::System.Guid ClientApplicationDomainRoleId = new global::System.Guid(0xdac0ced6, 0x1241, 0x40e0, 0x98, 0xea, 0x2d, 0x37, 0x72, 0x17, 0x9f, 0x83);
		
		/// <summary>
		/// DomainRole ClientApplication
		/// Description for
		/// Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications.ClientApplication
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications/ClientApplication.DisplayName", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications/ClientApplication.Category", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications/ClientApplication.Description", typeof(global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerDomainModel), "Microsoft.Practices.ServiceFactory.HostDesigner.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "HostDesignerModel", PropertyDisplayNameKey="Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications/ClientApplication.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("dac0ced6-1241-40e0-98ea-2d3772179f83")]
		public virtual ClientApplication ClientApplication
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ClientApplication)DslModeling::DomainRoleInfo.GetRolePlayer(this, ClientApplicationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ClientApplicationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ClientApplications of a HostDesignerModel
		/// <summary>
		/// Gets a list of ClientApplications.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ClientApplication> GetClientApplications(HostDesignerModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ClientApplication>, ClientApplication>(element, HostDesignerModelDomainRoleId);
		}
		#endregion
		#region HostDesignerModel link accessor
		/// <summary>
		/// Get the list of HostDesignerModelHasClientApplications links to a HostDesignerModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications> GetLinksToClientApplications ( global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModel hostDesignerModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications>(hostDesignerModelInstance, global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications.HostDesignerModelDomainRoleId);
		}
		#endregion
		#region ClientApplication link accessor
		/// <summary>
		/// Get the HostDesignerModelHasClientApplications link to a ClientApplication.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications GetLinkToHostDesignerModel (global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplication clientApplicationInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications>(clientApplicationInstance, global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications.ClientApplicationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ClientApplication not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region HostDesignerModelHasClientApplications instance accessors
		
		/// <summary>
		/// Get any HostDesignerModelHasClientApplications links between a given HostDesignerModel and a ClientApplication.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications> GetLinks( global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModel source, global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplication target )
		{
			global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications> outLinks = new global::System.Collections.Generic.List<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications>();
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications>(source, global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications.HostDesignerModelDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications link in links )
			{
				if ( target.Equals(link.ClientApplication) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one HostDesignerModelHasClientApplications link between a given HostDesignerModeland a ClientApplication.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications GetLink( global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModel source, global::Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplication target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications>(source, global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications.HostDesignerModelDomainRoleId);
			foreach ( global::Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModelHasClientApplications link in links )
			{
				if ( target.Equals(link.ClientApplication) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
