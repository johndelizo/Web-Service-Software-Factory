<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="validation" type="Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationSettings, Microsoft.Practices.EnterpriseLibrary.Validation" />
  </configSections>

  <validation>
    <!--
			ServiceContract model
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.ServiceContracts.Dsl"
			name="Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContractModel">
      <ruleset name="Common">
        <properties>
          <property name="Services">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ServiceElementCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="All Services on the service contract model must have unique names."
							name="ServiceContractModel.Services collection Name property validator"
							/>
          </property>
          <property name="ServiceContracts">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ServiceContractElementCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="All ServiceContracts on the service contract model must have unique names."
							name="ServiceContractModel.ServiceContracts collection Name property validator"
							/>
          </property>
          <property name="Messages">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.MessageContractElementCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="All Messages on the service contract model must have unique names."
							name="ServiceContractModel.MessageContracts collection Name property validator"
							/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.UniqueMessagePartsCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="All message parts for Message contracts on the service contract model should have different names if their types are different when using XMLSerilizer with WCF extender and the messages are not wrapped."
							name="ServiceContractModel.MessageContracts unique parts name collection validator"
							/>
          </property>
        </properties>
      </ruleset>
      <ruleset name="Menu">
        <properties>
          <property name="ImplementationTechnology">
            <validator type="Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator, Microsoft.Practices.EnterpriseLibrary.Validation"
							messageTemplate="The ImplementationTechnology property is not associated with the ServiceContractModel."
							name="ServiceContractModel.ImplementationTechnology not null validator"
							/>
          </property>
          <property name="ProjectMappingTable">
            <validator lowerBound="0" lowerBoundType="Exclusive" upperBound="0"
							upperBoundType="Ignore" negated="false" messageTemplate="The ProjectMappingTable property is empty."
							type="Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator, Microsoft.Practices.EnterpriseLibrary.Validation"
							name="ServiceContractModel.ProjectMappingTable property validator" />
          </property>
          <property name="SerializerType">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ImplementationTechnologyAndSerializerValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="There is a mismatch between the implementation technology and the serializer type on the ServiceContractModel"
							name="ServiceContractModel.SerializerType validator"
							/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!--
			Service
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.ServiceContracts.Dsl"
			name="Microsoft.Practices.ServiceFactory.ServiceContracts.Service">
      <ruleset name="Common">
        <properties>
          <property name="Name">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ModelNameValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The elemen '{0}' should have a valid not empty name with a length no longer than '{1}' characters."
							name="Service.Name identifier validator"
							/>
          </property>
        </properties>
      </ruleset>
      <ruleset name="Menu">
        <properties>
          <property name="Namespace">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.UriValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The Service Namespace property is incorrect."
							name="Service.Namespace property validator"/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.NonEmptyNamespaceValidator, Microsoft.Practices.ServiceFactory.Validation"
								messageTemplate="The Service '{0}' Namespace property is empty."
								name="Service.Namespace non empty Validator"/>
          </property>
          <property name="ObjectExtender">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ExtenderObjectValidator, Microsoft.Practices.ServiceFactory.Validation"
              targetRuleset="Menu"
              messageTemplate=""
              name="Service.ObjectExtender validator"/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!--
			ServiceContract
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.ServiceContracts.Dsl"
			name="Microsoft.Practices.ServiceFactory.ServiceContracts.ServiceContract">
      <ruleset name="Common">
        <properties>
          <property name="Name">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ModelNameValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The elemen '{0}' should have a valid not empty name with a length no longer than '{1}' characters."
							name="ServiceContract.Name identifier validator"
							/>
          </property>
          <property name="Operations">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.OperationElementCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
							name="ServiceContract.Operations collection Name property validator"
							caseSensitive="true"/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.OnlyOneTrueValuePropertyCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
													name="ServiceContract1.Operations.IsTerminating collection Only True property validator" collectionElementUniqueIdProperty="IsTerminating" messageTemplate="The Service Contract contains more than one Operation Contract with the property '{0}' set to true"/>
          </property>
        </properties>
      </ruleset>
      <ruleset name="Menu">
        <properties>
          <property name="Namespace">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.UriValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The ServiceContract Namespace property is incorrect."
							name="Service.Namespace property validator"
							/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.NonEmptyNamespaceValidator, Microsoft.Practices.ServiceFactory.Validation"
						messageTemplate="The ServiceContract '{0}' Namespace property is empty."
						name="ServiceContract.Namespace Validator"
							/>
          </property>
          <property name="ObjectExtender">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ExtenderObjectValidator, Microsoft.Practices.ServiceFactory.Validation"
							targetRuleset="Menu"
							messageTemplate=""
							name="ServiceContract.ObjectExtender validator"
							/>
          </property>
          <property name="Operations">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.NotEmptyOperationCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="ServiceContract does not have Operations."
							name="Operation.ServiceContract not null validator"
							/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!--
			Operation
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.ServiceContracts.Dsl"
			name="Microsoft.Practices.ServiceFactory.ServiceContracts.Operation">
      <ruleset name="Common">
        <properties>
          <property name="Name">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ModelNameValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The elemen '{0}' should have a valid not empty name with a length no longer than '{1}' characters."
							name="Operation.Name identifier validator"/>
          </property>
          <property name="Faults">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.FaultElementCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="All faults on Operation '{0}' must have unique names."
							name="Operation.Faults collection Name property validator"
							/>
          </property>
        </properties>
      </ruleset>
      <ruleset name="Menu">
        <properties>
          <property name="Action">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.OperationActionValidator, Microsoft.Practices.ServiceFactory.Validation"
							optionalValue="true"
							messageTemplate="The Operation Action property is incorrect, it contains invalid characters."
							name="Operation.Action identifier validator"
							/>
          </property>
          <property name="Faults">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.FaultElementCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
							collectionElementUniqueIdProperty="Type"
							messageTemplate="All faults on Operation '{0}' must be unique types."
							name="Operation.Faults collection Type property validator"
							/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.FaultElementUniqueContractCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
							collectionElementUniqueIdProperty="Type"
							messageTemplate="The fault '{0}' in operation '{1}' has a Fault Contract that is already assigned to another Fault in this operation."
							name="Operation.Faults collection FC property validator"
							/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.XsdElementFaultCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The Operation '{0}' contains the XsdElementFault '{1}' which is only supported for DataContractSerializer."
							name="Operation.Faults XsdElementFault Collection Validator"
							/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.FaultCollectionCrossModelValidator, Microsoft.Practices.ServiceFactory.Validation"
             messageTemplate="There is a mismatch between the Implementation Technology and the Data Contract Model referenced by the DataContractFault '{0}' in the Operation '{1}'."
             asmxExtensionInvalidSerializerMessage="The Asmx Extension doesn't support the Data Contract Serializer." faultInvalidSerializerMessage="The Operation '{0}' contains a DataContractFault '{1}' that references a Data Contract Model with ASMX extension. Faults cannot be XMLSerializable."
             name="Operation.Faults FaultCollection Cross Model Validator"
							/>
          </property>
          <property name="IsOneWay">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.OperationElementIsOneWayValidator, Microsoft.Practices.ServiceFactory.Validation"
							name="Operation.IsOneWay validator"
							/>
          </property>
          <property name="ObjectExtender">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ExtenderObjectValidator, Microsoft.Practices.ServiceFactory.Validation"
							targetRuleset="Menu"
							messageTemplate=""
							name="Operation.ObjectExtender validator"
							/>
          </property>
          <property name="ServiceContract">
            <validator type="Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator, Microsoft.Practices.EnterpriseLibrary.Validation"
							messageTemplate="Operation is not associated with a ServiceContract."
							name="Operation.ServiceContract not null validator"
							/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!-- 
			Operation WCF specific 
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.Extenders.ServiceContract.Wcf"
			name="Microsoft.Practices.ServiceFactory.Extenders.ServiceContract.Wcf.WCFOperationContract">
      <ruleset name="Menu">
        <properties>
          <property name="ReplyAction">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.OperationActionValidator, Microsoft.Practices.ServiceFactory.Validation"
							optionalValue="true"
							messageTemplate="The Operation ReplyAction property is incorrect, it contains invalid characters."
							name="Operation.Action identifier validator"
							/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!--
			Fault
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.ServiceContracts.Dsl"
			name="Microsoft.Practices.ServiceFactory.ServiceContracts.Fault">
      <ruleset name="Common">
        <properties>
          <property name="Name">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ModelNameValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The elemen '{0}' should have a valid not empty name with a length no longer than '{1}' characters."
							name="Fault.Name identifier validator"
							/>
          </property>
        </properties>
      </ruleset>
    </type>
    <type assemblyName="Microsoft.Practices.ServiceFactory.ServiceContracts.Dsl"
			name="Microsoft.Practices.ServiceFactory.ServiceContracts.DataContractFault">
      <ruleset name="Menu">
        <properties>
          <property name="Type">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.CrossDataContractModelTIandPMTValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The DataContractFault '{0}' has a reference to a Data Contract Model with empty or inconsistent Implementation Technology or Project Mapping Table associated"
	            validateReferencedElement="true" crossModelReferenceValidatorMessage=""
							name="Fault.DataContractModel TI and PMT reference validator"
							/>
          </property>
          <property name="Name">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ModelNameValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The elemen '{0}' should have a valid not empty name with a length no longer than '{1}' characters."
							name="DataContractFault.Name identifier validator"
							/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!--
			MessageBase
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.ServiceContracts.Dsl"
			name="Microsoft.Practices.ServiceFactory.ServiceContracts.Message">
      <ruleset name="Common">
        <properties>
          <property name="Name">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ModelNameValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The elemen '{0}' should have a valid not empty name with a length no longer than '{1}' characters."
							name="MessageBase.Name identifier validator"
							/>
          </property>
        </properties>
      </ruleset>
      <ruleset name="Menu">
        <properties>
          <property name="Namespace">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.UriValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The Message Namespace property is incorrect."
							name="MessageBase.Namespace property validator"
							/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.NonEmptyNamespaceValidator, Microsoft.Practices.ServiceFactory.Validation"
								messageTemplate="The Message '{0}' Namespace property is empty."
								name="MessageBase.Namespace non empty Validator"
							/>
          </property>
          <property name="MessageParts">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.MessagePartElementCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
							name="MessageBase.MessageParts collection Name property validator"
							/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.NotEmptyMessagePartCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
              messageTemplate="MessageContract does not have parts."
							name="MessageBase.MessageParts not empty property validator"
							/>
          </property>
          <property name="ObjectExtender">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ExtenderObjectValidator, Microsoft.Practices.ServiceFactory.Validation"
							targetRuleset="Menu"
							messageTemplate=""
							name="Message.ObjectExtender validator"
							/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!-- 
			WCFPrimitiveMessagePart.Namespace 
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.Extenders.ServiceContract.Wcf"
		 name="Microsoft.Practices.ServiceFactory.Extenders.ServiceContract.Wcf.WCFPrimitiveMessagePart">
      <ruleset name="Menu">
        <properties>
          <property name="Namespace">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.UriValidator, Microsoft.Practices.ServiceFactory.Validation"
				 messageTemplate="The Primitive Message Part Namespace property is incorrect."
				 name="WCFPrimitiveMessagePart.Namespace property validator"
							/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!-- 
			WCFDataContractMessagePart.Namespace
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.Extenders.ServiceContract.Wcf"
		 name="Microsoft.Practices.ServiceFactory.Extenders.ServiceContract.Wcf.WCFDataContractMessagePart">
      <ruleset name="Menu">
        <properties>
          <property name="Namespace">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.UriValidator, Microsoft.Practices.ServiceFactory.Validation"
				 messageTemplate="The DataContract Message Part Namespace property is incorrect."
				 name="WCFDataContractMessagePart.Namespace property validator"
										/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!-- 
			WCFMessageContract.IsWrapped 
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.Extenders.ServiceContract.Wcf"
		 name="Microsoft.Practices.ServiceFactory.Extenders.ServiceContract.Wcf.WCFMessageContract">
      <ruleset name="Menu">
        <properties>
          <property name="IsWrapped">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.IsWrappedValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The Message '{0}' cannot have the property 'IsWrapped' set to false and contain more than one Message Part."
							name="WCFMessageContract.IsWrapped validator"	/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!-- 
			WCFServiceContract.SessionMode 
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.Extenders.ServiceContract.Wcf"
		 name="Microsoft.Practices.ServiceFactory.Extenders.ServiceContract.Wcf.WCFServiceContract">
      <ruleset name="Menu">
        <properties>
          <property name="SessionMode">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.SessionModeValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The Service Contract '{0}' cannot have the property 'SessionMode' set to Allowed or NotAllowed with operations with an IsTerminating = true operation or IsInitiating = false values. Set SessionMode value as 'Required' or change the operation property values."
							name="WCFMessageContract.SessionMode validator"	/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!--
			DataContractMessagePart
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.ServiceContracts.Dsl"
			name="Microsoft.Practices.ServiceFactory.ServiceContracts.DataContractMessagePart">
      <ruleset name="Common">
        <properties>
          <property name="Name">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ModelNameValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The elemen '{0}' should have a valid not empty name with a length no longer than '{1}' characters."
							name="MessagePart.Name identifier validator"
							length="507"/>
          </property>
        </properties>
      </ruleset>
      <ruleset name="Menu">
        <properties>
          <property name="Type">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.CrossDataContractModelTIandPMTValidator, Microsoft.Practices.ServiceFactory.Validation"
							 messageTemplate="The Data Contract Message Part '{0}' has a reference to a Data Contract Model with empty or inconsistent Implementation Technology or Project Mapping Table associated"
							 validateReferencedElement="true"
							 name="DataContractMessagePart.DataContractModel TI and PMT reference validator"/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ImplementationTechnologyAndSerializerCrossModelValidator, Microsoft.Practices.ServiceFactory.Validation"
							 name="DataContractMessagePart.DataContractModel TI and Serializer validator"/>
          </property>
          <property name="ObjectExtender">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ExtenderObjectValidator, Microsoft.Practices.ServiceFactory.Validation"
							targetRuleset="Menu"
							messageTemplate=""
							name="DataContractMessagePart.ObjectExtender validator"/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!--
			PrimitiveMessagePart
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.ServiceContracts.Dsl"
			name="Microsoft.Practices.ServiceFactory.ServiceContracts.PrimitiveMessagePart">
      <ruleset name="Common">
        <properties>
          <property name="Name">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ModelNameValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The elemen '{0}' should have a valid not empty name with a length no longer than '{1}' characters."
							name="MessagePart.Name identifier validator"
							length="507"/>
          </property>
        </properties>
      </ruleset>
      <ruleset name="Menu">
        <properties>
          <property name="ObjectExtender">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ExtenderObjectValidator, Microsoft.Practices.ServiceFactory.Validation"
							targetRuleset="Menu"
							messageTemplate=""
							name="PrimitiveMessagePart.ObjectExtender validator"/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!--
			XsdMessage
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.ServiceContracts.Dsl"
						name="Microsoft.Practices.ServiceFactory.ServiceContracts.XsdMessage">
      <ruleset name="Common">
        <properties>
          <property name="Name">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ModelNameValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The elemen '{0}' should have a valid not empty name with a length no longer than '{1}' characters."
							name="XsdMessage.Name identifier validator"
							length="507"
							/>
          </property>
        </properties>
      </ruleset>
      <ruleset name="Menu">
        <properties>
          <property name="Element">
            <validator type="Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator, Microsoft.Practices.EnterpriseLibrary.Validation"
						 messageTemplate="The XsdMessage Element property is incorrect, it is empty or contains invalid characters."
						 name="XsdMessage.Element identifier validator"
						 lowerBound="1" lowerBoundType="Inclusive" upperBound="512" upperBoundType="Inclusive"
							/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.XsdElementValidator, Microsoft.Practices.ServiceFactory.Validation"
						 messageTemplate="The Element property of the XsdMessage '{0}' refers to a xsd type '{1}' in the schema file '{2}' that doesn't contain any top level element. This is not supported with the XMLSerializer."
						 name="XsdMessage.Element xsd type validator" invalidFilePathMessage="The Element property of the XsdMessage '{0}' refers to the file name '{1}' which does not exist in the schema directory '{2}'."
						 notCompliantWithDataContractSerializerMessage="The file name '{0}' is not compliant with the DataContractSerializer"
							/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!--
			XsdElementFault
		-->

    <type assemblyName="Microsoft.Practices.ServiceFactory.ServiceContracts.Dsl"
				name="Microsoft.Practices.ServiceFactory.ServiceContracts.XsdElementFault">
      <ruleset name="Menu">
        <properties>
          <property name="Element">
            <validator type="Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator, Microsoft.Practices.EnterpriseLibrary.Validation"
						 messageTemplate="The XsdElementFault Element property is incorrect, it is empty or contains invalid characters."
						 name="XsdElementFault.Element identifier validator"
						 lowerBound="1" lowerBoundType="Inclusive" upperBound="512" upperBoundType="Inclusive"
							/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.XsdElementValidator, Microsoft.Practices.ServiceFactory.Validation"
						 messageTemplate="The Element property of the XsdMessage '{0}' refers to a xsd type '{1}' in the schema file '{2}' that doesn't contain any top level element. This is not supported with the XMLSerializer."
						 name="XsdMessage.Element xsd type validator" invalidFilePathMessage="The Element property of the XsdMessage '{0}' refers to the file name '{1}' which does not exist in the schema directory '{2}'."
						 notCompliantWithDataContractSerializerMessage="The file name '{0}' is not compliant with the DataContractSerializer"
							/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!--
			DataContract model
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.DataContracts.Dsl"
			name="Microsoft.Practices.ServiceFactory.DataContracts.DataContractModel">
      <ruleset name="Common">
        <properties>
          <property name="Contracts">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ContractElementCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="All Contracts on the data contract model must have unique names."
							name="DataContractModel.Contracts collection Name property validator"
							/>
          </property>
        </properties>
      </ruleset>
      <ruleset name="Menu">
        <properties>
          <property name="ImplementationTechnology">
            <validator type="Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator, Microsoft.Practices.EnterpriseLibrary.Validation"
							messageTemplate="The ImplementationTechnology property is not associated with the DataContractModel."
							name="DataContractModel.ImplementationTechnology not null validator"
							/>
          </property>
          <property name="Namespace">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.NonEmptyNamespaceValidator, Microsoft.Practices.ServiceFactory.Validation"
									messageTemplate="The DataContractModel Namespace property is empty."
									name="DataContractModel.Namespace non empty validator"
							/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.UriValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The DataContractModel Namespace property is incorrect."
							name="DataContractModel.Namespace property validator"
							/>
          </property>
          <property name="ProjectMappingTable">
            <validator lowerBound="0" lowerBoundType="Exclusive" upperBound="0"
							upperBoundType="Ignore" negated="false" messageTemplate="The ProjectMappingTable property is empty."
							type="Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator, Microsoft.Practices.EnterpriseLibrary.Validation"
							name="DataContractModel.ProjectMappingTable property validator" />
          </property>
        </properties>
      </ruleset>
    </type>

    <!--
			DataContract
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.DataContracts.Dsl"
			name="Microsoft.Practices.ServiceFactory.DataContracts.DataContract">
      <ruleset name="Common">
        <properties>
          <property name="Name">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ModelNameValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The elemen '{0}' should have a valid not empty name with a length no longer than '{1}' characters."
							name="DataContract.Name identifier validator"
							/>
          </property>
        </properties>
      </ruleset>
      <ruleset name="Menu">
        <properties>
          <property name="Namespace">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.UriValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The DataContract Namespace property is incorrect."
							name="DataContract.Namespace property validator"
							/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.NonEmptyNamespaceValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The DataContract '{0}' Namespace property is empty."
							name="DataContract.Namespace Validator"
							/>
          </property>
          <property name="DataMembers">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.NotEmptyDataElementCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="DataContract does not have data members."
							name="DataContract.DataMembers not null validator"
							/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.DataContractDataElementCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
							name="DataContract.DataMembers collection Name property validator"
							caseSensitive="true"/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.UniqueOrderPropertyCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="All the DataMembers in the DataContract '{0}' must have a unique '{1}' property."
							name="DataContract unique order validator"
							/>
          </property>
          <property name="ObjectExtender">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ExtenderObjectValidator, Microsoft.Practices.ServiceFactory.Validation"
              targetRuleset="Menu"
              messageTemplate=""
              name="DataContract.ObjectExtender validator"/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!--
			DataContractCollection
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.DataContracts.Dsl"
			name="Microsoft.Practices.ServiceFactory.DataContracts.DataContractCollection">
      <ruleset name="Common">
        <properties>
          <property name="Name">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ModelNameValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The elemen '{0}' should have a valid not empty name with a length no longer than '{1}' characters."
							name="DataContractCollection.Name identifier validator"
							/>
          </property>
        </properties>
      </ruleset>
      <ruleset name="Menu">
        <properties>
          <property name="Namespace">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.NonEmptyNamespaceValidator, Microsoft.Practices.ServiceFactory.Validation"
									messageTemplate="The DataContractCollection '{0}' Namespace property is empty."
									name="DataContractCollection.Namespace non empty validator"
							/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.UriValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The DataContractCollection Namespace property is incorrect."
							name="DataContractCollection.Namespace property validator"
							/>
          </property>
          <property name="DataContract">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.NonEmptyDataContractValidator, Microsoft.Practices.ServiceFactory.Validation"
									messageTemplate="The DataContractCollection '{0}' DataContract property is not set."
									name="DataContractCollection.DataContract non empty validator"
							/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.NonRecursiveDataContractValidator, Microsoft.Practices.ServiceFactory.Validation"
									messageTemplate="The DataContractCollection '{0}' DataContract property points to itself or a graph recursion was detected."
									name="DataContractCollection.DataContract non recursive validator"
							/>
          </property>
          <property name="ObjectExtender">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ExtenderObjectValidator, Microsoft.Practices.ServiceFactory.Validation"
							targetRuleset="Menu"
							messageTemplate=""
							name="DataContractCollection.ObjectExtender validator"
							/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!-- 
			AsmxDataContractCollection.CollectionType 
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.Extenders.DataContract.Asmx"
		 name="Microsoft.Practices.ServiceFactory.Extenders.DataContract.Asmx.AsmxDataContractCollection">
      <ruleset name="Menu">
        <properties>
          <property name="CollectionType">
            <validator type="Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator, Microsoft.Practices.EnterpriseLibrary.Validation"
              messageTemplate="The CollectionType property is empty."
              name="AsmxDataContractCollection.CollectionType not null validator"
							/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!-- 
			WCFDataContractCollection.CollectionType 
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.Extenders.DataContract.Wcf"
		 name="Microsoft.Practices.ServiceFactory.Extenders.DataContract.Wcf.WCFDataContractCollection">
      <ruleset name="Menu">
        <properties>
          <property name="CollectionType">
            <validator type="Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator, Microsoft.Practices.EnterpriseLibrary.Validation"
              messageTemplate="The CollectionType property is empty."
              name="WCFDataContractCollection.CollectionType not null validator"
							/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!--
			DataContractEnum
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.DataContracts.Dsl"
			name="Microsoft.Practices.ServiceFactory.DataContracts.DataContractEnum">
      <ruleset name="Common">
        <properties>
          <property name="Name">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ModelNameValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The elemen '{0}' should have a valid not empty name with a length no longer than '{1}' characters."
							name="DataContractEnum.Name identifier validator"/>
          </property>
        </properties>
      </ruleset>
      <ruleset name="Menu">
        <properties>
          <property name="Namespace">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.NonEmptyNamespaceValidator, Microsoft.Practices.ServiceFactory.Validation"
									messageTemplate="The DataContractEnum Namespace property is empty."
									name="DataContractEnum.Namespace non empty validator"	/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.UriValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The DataContractEnum Namespace property is incorrect."
							name="DataContractEnum.Namespace property validator"/>
          </property>
          <property name="EnumNamedValues">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.NotEmptyEnumDataElementCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="DataContractEnum does not have values."
							name="DataContractEnum.EnumNamedValue not null validator"	/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.DataContractEnumDataElementCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
							name="DataContractEnum.EnumNamedValue collection Name property validator"
							caseSensitive="true"/>
          </property>
          <property name="ObjectExtender">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ExtenderObjectValidator, Microsoft.Practices.ServiceFactory.Validation"
              targetRuleset="Menu"
              messageTemplate=""
              name="DataContractEnum.ObjectExtender validator"/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!--
			PrimitiveDataTypeCollection
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.DataContracts.Dsl"
			name="Microsoft.Practices.ServiceFactory.DataContracts.PrimitiveDataTypeCollection">
      <ruleset name="Common">
        <properties>
          <property name="Name">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ModelNameValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The elemen '{0}' should have a valid not empty name with a length no longer than '{1}' characters."
							name="PrimitiveDataTypeCollection.Name identifier validator"/>
          </property>
        </properties>
      </ruleset>
      <ruleset name="Menu">
        <properties>
          <property name="Namespace">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.NonEmptyNamespaceValidator, Microsoft.Practices.ServiceFactory.Validation"
									messageTemplate="The PrimitiveDataTypeCollection Namespace property is empty."
									name="PrimitiveDataTypeCollection.Namespace non empty validator"/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.UriValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The PrimitiveDataTypeCollection Namespace property is incorrect."
							name="PrimitiveDataTypeCollection.Namespace property validator"/>
          </property>
          <property name="ItemType">
            <validator type="Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator, Microsoft.Practices.EnterpriseLibrary.Validation"
							messageTemplate="The ItemType property is empty."
							name="PrimitiveDataTypeCollection.ItemType not null validator"/>
          </property>
          <property name="ObjectExtender">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ExtenderObjectValidator, Microsoft.Practices.ServiceFactory.Validation"
							targetRuleset="Menu"
							messageTemplate=""
							name="DataContractCollection.ObjectExtender validator"/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!-- 
			AsmxPrimitiveDataContractCollection.CollectionType 
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.Extenders.DataContract.Asmx"
		 name="Microsoft.Practices.ServiceFactory.Extenders.DataContract.Asmx.AsmxPrimitiveDataContractCollection">
      <ruleset name="Menu">
        <properties>
          <property name="CollectionType">
            <validator type="Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator, Microsoft.Practices.EnterpriseLibrary.Validation"
              messageTemplate="The CollectionType property is empty."
              name="AsmxPrimitiveDataContractCollection.CollectionType not null validator"/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!--
			FaultContract
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.DataContracts.Dsl"
			name="Microsoft.Practices.ServiceFactory.DataContracts.FaultContract">
      <ruleset name="Common">
        <properties>
          <property name="Name">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ModelNameValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The elemen '{0}' should have a valid not empty name with a length no longer than '{1}' characters."
							name="FaultContract.Name identifier validator"/>
          </property>
        </properties>
      </ruleset>
      <ruleset name="Menu">
        <properties>
          <property name="Namespace">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.NonEmptyNamespaceValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The FaultContract Namespace property is empty."
							name="FaultContract.Namespace non empty validator"/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.UriValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The FaultContract Namespace property is incorrect."
							name="FaultContract.Namespace property validator"/>
          </property>
          <property name="DataMembers">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.NotEmptyDataElementCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="FaultContract does not have data members."
							name="FaultContract.DataMembers not null validator"/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.FaultContractDataElementCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
							name="FaultContract.DataMembers collection Name property validator"
							caseSensitive="true"/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.UniqueOrderPropertyCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="All the FaultMembers in the FaultContract '{0}' must have a unique '{1}' property."
							name="FaultContract unique order validator"/>
          </property>
          <property name="ObjectExtender">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ExtenderObjectValidator, Microsoft.Practices.ServiceFactory.Validation"
              targetRuleset="Menu"
              messageTemplate=""
              name="FaultContract.ObjectExtender validator"/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!--
			EnumNamedValue
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.DataContracts.Dsl"
			name="Microsoft.Practices.ServiceFactory.DataContracts.EnumNamedValue">
      <ruleset name="Common">
        <properties>
          <property name="Name">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ModelNameValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The elemen '{0}' should have a valid not empty name with a length no longer than '{1}' characters."
							name="EnumNamedValue.Name identifier validator"
							/>
          </property>
          <property name="Value">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ModelNameValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The elemen '{0}' should have a valid not empty name with a length no longer than '{1}' characters."
							name="EnumNamedValue.Value identifier validator"
							/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!--
			PrimitiveDataType
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.DataContracts.Dsl"
			name="Microsoft.Practices.ServiceFactory.DataContracts.PrimitiveDataType">
      <ruleset name="Menu">
        <properties>
          <property name="Name">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ModelNameValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The elemen '{0}' should have a valid not empty name with a length no longer than '{1}' characters."
							name="PrimitiveDataType.Name identifier validator"
							/>
          </property>
          <property name="ObjectExtender">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ExtenderObjectValidator, Microsoft.Practices.ServiceFactory.Validation"
							targetRuleset="Menu"
							messageTemplate=""
							name="PrimitiveDataType.ObjectExtender validator"
							/>
          </property>
          <property name="CollectionType">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.CollectionTypeValidator, Microsoft.Practices.ServiceFactory.Validation"
              messageTemplate="The DataContract's '{0}' Collection Type property has an invalid value. Dictionary collection is not supported in ASMX because it is not XML Serializable."
              name="PrimitiveDataType.CollectionType Collection Type validator" />
          </property>
        </properties>
      </ruleset>
    </type>

    <!--
			ModelElementReference
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.DataContracts.Dsl"
			 name="Microsoft.Practices.ServiceFactory.DataContracts.ModelElementReference">
      <ruleset name="Common">
        <properties>
          <property name="Name">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ModelNameValidator, Microsoft.Practices.ServiceFactory.Validation"
						 messageTemplate="The elemen '{0}' should have a valid not empty name with a length no longer than '{1}' characters."
						 name="ModelElementReference.Name identifier validator"	/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!--
			ReferenceDataType
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.DataContracts.Dsl"
			 name="Microsoft.Practices.ServiceFactory.DataContracts.ReferenceDataType">
      <ruleset name="Common">
        <properties>
          <property name="Name">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ModelNameValidator, Microsoft.Practices.ServiceFactory.Validation"
						 messageTemplate="The elemen '{0}' should have a valid not empty name with a length no longer than '{1}' characters."
						 name="ReferenceDataType.Name identifier validator" />
          </property>
        </properties>
      </ruleset>
      <ruleset name="Menu">
        <properties>
          <property name="Type">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.CrossDataContractModelTIandPMTValidator, Microsoft.Practices.ServiceFactory.Validation"
							 messageTemplate="The Data Contract Reference Data Type '{0}' has a reference to a Data Contract Model with empty or inconsistent Implementation Technology or Project Mapping Table value associated"
							 validateReferencedElement="true"
							 name="ReferenceDataType.DataContractModel TI and PMT reference validator"/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.CircularRefereceModelValidator, Microsoft.Practices.ServiceFactory.Validation"
							 messageTemplate="A circular reference was detected between elements in different models. The reference in element '{0}' points to element '{1}' located in model '{2}'."
							 name="ReferenceDataType.CircularRefereceModelValidator"/>
          </property>
          <property name="ObjectExtender">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ExtenderObjectValidator, Microsoft.Practices.ServiceFactory.Validation"
							targetRuleset="Menu"
							messageTemplate=""
							name="ReferenceDataType.ObjectExtender validator"/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!-- 
			WCFDataElement.Order 
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.Extenders.DataContract.Wcf"
		 name="Microsoft.Practices.ServiceFactory.Extenders.DataContract.Wcf.WCFDataElement">
      <ruleset name="Menu">
        <properties>
          <property name="Order">
            <validator lowerBound="0" lowerBoundType="Inclusive" upperBound="10000"
							 upperBoundType="Inclusive" negated="false" messageTemplate="The Order property cannot be a negative integer"
							 messageTemplateResourceName="" messageTemplateResourceType=""
							 tag="" type="Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator, Microsoft.Practices.EnterpriseLibrary.Validation"
							 name="WCFDataElement.Order range Validator" />
          </property>
        </properties>
      </ruleset>
    </type>

    <!-- 
			AsmxDataElement.Order 
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.Extenders.DataContract.Asmx"
		 name="Microsoft.Practices.ServiceFactory.Extenders.DataContract.Asmx.AsmxDataElement">
      <ruleset name="Menu">
        <properties>
          <property name="Order">
            <validator lowerBound="0" lowerBoundType="Inclusive" upperBound="10000"
							 upperBoundType="Inclusive" negated="false" messageTemplate="The Order property cannot be a negative integer"
							 messageTemplateResourceName="" messageTemplateResourceType=""
							 tag="" type="Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator, Microsoft.Practices.EnterpriseLibrary.Validation"
							 name="AsmxDataElement.Order range Validator" />
          </property>
        </properties>
      </ruleset>
    </type>

    <!--
			Host model
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.HostDesigner.Dsl"
			name="Microsoft.Practices.ServiceFactory.HostDesigner.HostDesignerModel">
      <ruleset name="Common">
        <properties>
          <property name="HostApplications">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.HostApplicationCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="All HostApplications on the host model must have unique names."
							name="HostDesignerModel.HostApplications collection Name property validator"
							/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.HostModelContainsUniqueServiceReferencesAcrossHostsValidator, Microsoft.Practices.ServiceFactory.Validation"
							name="HostDesignerModel.HostApplications contains unique Service Reference names across Hosts"
							/>
          </property>
          <property name="ClientApplications">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ClientApplicationCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="All ClientApplications on the host model must have unique names."
							name="HostDesignerModel.ClientApplications collection Name property validator"
							/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.HostModelContainsUniqueProxyNamesAcrossClientsValidator, Microsoft.Practices.ServiceFactory.Validation"
            name="HostDesignerModel.ClientApplications contains unique Proxy names across Clients"
							/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!--
			HostApplication
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.HostDesigner.Dsl"
			name="Microsoft.Practices.ServiceFactory.HostDesigner.HostApplication">
      <ruleset name="Common">
        <properties>
          <property name="Name">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ModelNameValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The elemen '{0}' should have a valid not empty name with a length no longer than '{1}' characters."
							name="HostApplication.Name identifier validator"
							/>
          </property>
          <property name="ServiceDescriptions">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ServiceDescriptionCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="All ServiceReferences on the Host must have unique names."
							name="HostApplication.ServiceDescriptions collection Name property validator"
							/>
          </property>
        </properties>
      </ruleset>
      <ruleset name="Menu">
        <properties>
          <property name="ImplementationTechnology">
            <validator type="Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator, Microsoft.Practices.EnterpriseLibrary.Validation"
							messageTemplate="The ImplementationTechnology property is not associated with the HostApplication."
							name="HostApplication.ImplementationTechnology not null validator"
							/>
          </property>
          <property name="ImplementationProject">
            <validator lowerBound="0" lowerBoundType="Exclusive" upperBound="0"
							upperBoundType="Ignore" negated="false" messageTemplate="The HostApplication ImplementationProject property is empty."
							type="Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator, Microsoft.Practices.EnterpriseLibrary.Validation"
							name="HostApplication.ImplementationProject property validator" />
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ExistingProjectValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The project being referenced on the HostApplication '{0}' doesn't exists on the solution."
							name="HostApplication.ImplementationProject1 property validator"
							/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!--
			ServiceReference
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.HostDesigner.Dsl"
				name="Microsoft.Practices.ServiceFactory.HostDesigner.ServiceReference">
      <ruleset name="Common">
        <properties>
          <property name="Name">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ModelNameValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The elemen '{0}' should have a valid not empty name with a length no longer than '{1}' characters."
							name="ServiceReference.Name identifier validator"
							/>
          </property>
          <property name="Endpoints">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.EndpointCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="All Endpoints on the ServiceReference must have unique names."
							name="ServiceDescription.Endpoints collection Name property validator"
							/>
          </property>
        </properties>
      </ruleset>
      <ruleset name="Menu">
        <properties>
          <property name="ServiceImplementationType">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.CrossModelReferenceValidator, Microsoft.Practices.ServiceFactory.Validation"
							validateReferencedElement="true"
							name="ServiceReference.ServiceContractType reference validator"
							/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.CrossServiceContractModelTIandPMTValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The Service '{0}' is referencing a Service Contract Model with no Implementation Technology or Project Mapping Table associated"
							validateReferencedElement="true" crossModelReferenceValidatorMessage=""
							name="ServiceReference.ServiceContractType1 TI and PMT reference validator"
							/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ServiceAndServiceImplementationTechnologyCrossModelValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The Service '{0}' is referencing a Service Contract Model with a different Implementation Technology"
							validateReferencedElement="true" crossModelReferenceValidatorMessage=""
							name="ServiceReference.ServiceContractType2 TIs reference validator"
							/>
          </property>
          <property name="Endpoints">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.NotEmptyEndpointCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
              messageTemplate="ServiceReference does not have Endpoints."
              name="ServiceReference.Endpoints not null validator"
							/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.EndpointPropertyCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
              collectionElementUniqueIdProperty="Address"
              messageTemplate="All Endpoints on ServiceReference '{0}' must have unique addresses."
              name="ServiceReference.Endpoints1 collection Address property validator"
							/>
            <validator type="Microsoft.Practices.ServiceFactory.Validation.EmptyAddressCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
                messageTemplate="The ServiceReference '{0}' contains more that one Endpoint with an empty address."
                name="ServiceReference.Endpoints2 empty collection Address property validator"
							/>
          </property>
          <property name="ObjectExtender">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ExtenderObjectValidator, Microsoft.Practices.ServiceFactory.Validation"
              targetRuleset="Menu"
              messageTemplate=""
              name="ServiceReference.ObjectExtender validator"/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!--
			ClientApplication
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.HostDesigner.Dsl"
			name="Microsoft.Practices.ServiceFactory.HostDesigner.ClientApplication">
      <ruleset name="Common">
        <properties>
          <property name="Name">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ModelNameValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The elemen '{0}' should have a valid not empty name with a length no longer than '{1}' characters."
							name="ClientApplication.Name identifier validator"
							/>
          </property>
          <property name="Proxies">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ProxyCollectionValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="All Proxies on the ClientApplication must have unique names."
							name="ClientApplication.Proxies collection Name property validator"
							/>
          </property>
        </properties>
      </ruleset>
      <ruleset name="Menu">
        <properties>
          <property name="ImplementationTechnology">
            <validator type="Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator, Microsoft.Practices.EnterpriseLibrary.Validation"
							messageTemplate="The ImplementationTechnology property is not associated with the ClientApplication."
							name="ClientApplication.ImplementationTechnology not null validator"
							/>
          </property>
          <property name="ImplementationProject">
            <validator lowerBound="0" lowerBoundType="Exclusive" upperBound="0"
							upperBoundType="Ignore" negated="false" messageTemplate="The ClientApplication ImplementationProject property is empty."
							type="Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator, Microsoft.Practices.EnterpriseLibrary.Validation"
							name="ClientApplication.ImplementationProject property validator" />
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ExistingProjectValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The project being referenced on the ClientApplication '{0}' doesn't exists on the solution."
							name="ClientApplication.ImplementationProject1 property validator"
							/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!--
			Endpoint
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.HostDesigner.Dsl"
        name="Microsoft.Practices.ServiceFactory.HostDesigner.Endpoint">
      <ruleset name="Common">
        <properties>
          <property name="Name">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ModelNameValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The elemen '{0}' should have a valid not empty name with a length no longer than '{1}' characters."
							name="Endpoint.Name identifier validator"
							/>
          </property>
          <property name="ObjectExtender">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ExtenderObjectValidator, Microsoft.Practices.ServiceFactory.Validation"
              targetRuleset="Menu"
              messageTemplate=""
              name="Endpoint.ObjectExtender validator"/>
          </property>
        </properties>
      </ruleset>
    </type>

    <!--
			Proxy
		-->
    <type assemblyName="Microsoft.Practices.ServiceFactory.HostDesigner.Dsl"
      name="Microsoft.Practices.ServiceFactory.HostDesigner.Proxy">
      <ruleset name="Common">
        <properties>
          <property name="Name">
            <validator type="Microsoft.Practices.ServiceFactory.Validation.ModelNameValidator, Microsoft.Practices.ServiceFactory.Validation"
							messageTemplate="The elemen '{0}' should have a valid not empty name with a length no longer than '{1}' characters."
							name="Proxy.Name identifier validator"
							/>
          </property>
        </properties>
      </ruleset>
    </type>

  </validation>
</configuration>
